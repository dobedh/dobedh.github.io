{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\r\n# Hooks\r\n\r\n### NOtification\r\n\r\n- mdn의 notification API를 참고\r\n- Notification.permission => permission 상태를 체크\r\n  - granted, default, denied\r\n\r\n### new Notification()\r\n\r\n- 새로운 noti 설정\r\n\r\n### Notification.requestPermission.then(permission => {})\r\n\r\n- 권한 없을 시, 권한 요청하고, permssion 정보 가져옴\r\n","excerpt":"Hooks NOtification mdn의 notification API를 참고 Notification.permission => permission 상태를 체크 granted, default, denied new Notification() 새로운 n…","fields":{"slug":"/TIL_210524/"},"frontmatter":{"date":"May 24, 2021","title":"TIL-210524","tags":["react","Hooks","useTabs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Hooks\r\n\r\n### current.requestFullscreen()\r\n\r\n- screen을 크게 만든다\r\n\r\n### document.exitFullscreen()\r\n\r\n- 풀스크린에서 나온다\r\n\r\n### useRef\r\n\r\n- element에 태그를 붙이고 조정할떄 쓰인다. 자주 쓰이네!\r\n\r\n### 오늘의 풀 예제\r\n\r\n```\r\n  const useFull = () => {\r\n    const element = useRef();\r\n    const makeFull = () => {\r\n      if (element.current) {\r\n        element.current.requestFullscreen();\r\n      }\r\n    };\r\n    const makeSmall = () => {\r\n      if (element.current) {\r\n        document.exitFullscreen();\r\n      }\r\n    };\r\n    return { element, makeFull, makeSmall };\r\n  };\r\n\r\n  const App = () => {\r\n    const { element, makeFull, makeSmall } = useFull();\r\n    return (\r\n      <div className=\"App\" style={{ height: \"1000vh\" }}>\r\n        <div ref={element}>\r\n          <img src=\"https://images.chosun.com/resizer/EQOOCCZ8k7OIspF8mmVBc1WK-j8=/530x749/smart/cloudfront-ap-northeast-1.images.arcpublishing.com/chosun/5JJTP6WWYEZRJTHKVDT4XD4LVM.jpg\" />\r\n          <button onClick={makeFull}>Full Screen</button>\r\n          <button onClick={makeSmall}>Small Screen</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n```\r\n","excerpt":"Hooks current.requestFullscreen() screen을 크게 만든다 document.exitFullscreen() 풀스크린에서 나온다 useRef element에 태그를 붙이고 조정할떄 쓰인다. 자주 쓰이네! 오늘의 풀 예제","fields":{"slug":"/TIL_210523/"},"frontmatter":{"date":"May 23, 2021","title":"TIL-210523","tags":["react","Hooks","useTabs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Hooks\r\n\r\n### useConfirm\r\n\r\n- Hooks은 아님\r\n\r\n### confirm()\r\n\r\n- 브라우저에 내장된 function 인듯\r\n- 클릭하면, cofirm 을 확인하는 alert 창을 띄어줌\r\n\r\n* onconfirm() alert창에 confirm을 하면 onconfirm 값은 true가 되고\r\n* onconfirm() alert 창에 취소를 하면 onconfirm 값은 false가 된다\r\n\r\n```\r\nconst useConfirm = (message, onConfirm, onRejection) => {\r\n  if (!onConfirm || typeof onConfirm !== \"function\") {\r\n    return;\r\n  }\r\n  const confirmAction = () => {\r\n    if (confirm(message)) {\r\n      onConfirm();\r\n    } else {\r\n      onRejection();\r\n    }\r\n  };\r\n\r\n```\r\n\r\n## PreventLeave\r\n\r\n### addEventListener\r\n\r\n- 반응할 event의 종류, event 발생시 실행할 함수를 넣어줘야함\r\n- `window.addEventListener(\"beforeunload\", listener)`\r\n- beforeunload => 나갈떄 발생하는 event\r\n\r\n### event.preventDefault()\r\n\r\n- 특정 이벤트가 발생할떄, 바로 event 실행안하고 prevent 시키는 alert창을 띄운다?\r\n\r\n```\r\nconst preventLeave = () => {\r\n  const listener = (event) => {\r\n    event.preventDefault();\r\n    event.returnValue = \"\";\r\n  };\r\n  const protectEvent = () => window.addEventListener(\"beforeunload\", listener);\r\n  const unprotectEvent = () =>\r\n    window.removeEventListener(\"beforeunload\", listener);\r\n  return { protectEvent, unprotectEvent };\r\n};\r\n```\r\n\r\n### use Fadein\r\n\r\n- opacity, duration, dealy 등의 개념 사용\r\n- useEffect는 계속 사용되네\r\n\r\n```\r\nconst useFadeIn = (duration = 1, delay = 1) => {\r\n  const element = useRef();\r\n  useEffect(() => {\r\n    if (!element.current) {\r\n      return;\r\n    }\r\n    const { current } = element;\r\n    current.style.transition = `opacity ${duration}s ${delay}s`;\r\n    current.style.opacity = 1;\r\n  }, []);\r\n  return { ref: element, style: { opacity: 0 } };\r\n};\r\n\r\nconst App = () => {\r\n  const fadeIn = useFadeIn(3, 1);\r\n  const fadeIn2 = useFadeIn(7, 6);\r\n  return (\r\n    <div className=\"App\">\r\n      <h2 {...fadeIn}> Hello Counselors :) </h2>\r\n      <p {...fadeIn2}> This is our playgorund! </p>\r\n    </div>\r\n  );\r\n};\r\n\r\n```\r\n\r\n## useNetwork\r\n\r\n### navigator.onLine\r\n\r\n- 네트워크가 online 이면 true를, offline이면 false를 뱉음\r\n\r\n```\r\n  const useNetwork = () => {\r\n    const [status, setStatus] = useState(navigator.onLine);\r\n    const handleChange = () => {\r\n      setStatus(navigator.onLine);\r\n    };\r\n    useEffect(() => {\r\n      window.addEventListener(\"online\", handleChange);\r\n      window.addEventListener(\"offline\", handleChange);\r\n      return () => {\r\n        window.removeEventListener(\"online\", handleChange);\r\n        window.removeEventListener(\"offline\", handleChange);\r\n      };\r\n    }, []);\r\n    return status;\r\n  };\r\n\r\n  const App = () => {\r\n    const network = useNetwork();\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>{network ? \"online\" : \"offline\"}</h2>\r\n      </div>\r\n    );\r\n  };\r\n```\r\n\r\n### useScroll\r\n\r\n- 스크롤 움직이는 것에 대한 eventListener를 추가하고\r\n- y축이 100이상일때 색깔 변화하게 하는 것\r\n\r\n```\r\n  const useScroll = () => {\r\n    const [state, setState] = useState({ x: 0, y: 0 });\r\n    const handleScroll = () => {\r\n      setState({ x: window.scrollX, y: window.scrollY });\r\n    };\r\n    useEffect(() => {\r\n      window.addEventListener(\"scroll\", handleScroll);\r\n      return () => window.removeEventListener(\"scroll\", handleScroll);\r\n    });\r\n    return state;\r\n  };\r\n\r\n  const App = () => {\r\n    const { y } = useScroll();\r\n    return (\r\n      <div className=\"App\" style={{ height: \"1000vh\" }}>\r\n        <h2 style={{ position: \"fixed\", color: y > 100 ? \"red\" : \"blue\" }}>\r\n          Hello Counselors :){\" \"}\r\n        </h2>\r\n      </div>\r\n    );\r\n  };\r\n```\r\n","excerpt":"Hooks useConfirm Hooks은 아님 confirm() 브라우저에 내장된 function 인듯 클릭하면, cofirm 을 확인하는 alert 창을 띄어줌 onconfirm() alert창에 confirm을 하면 onconfirm 값은 tr…","fields":{"slug":"/TIL_210522/"},"frontmatter":{"date":"May 22, 2021","title":"TIL-210522","tags":["react","Hooks","useTabs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Hooks\r\n\r\n### useRef\r\n\r\n- 특정 html에 ref를 추가해서, html 태그를 조작하거나 eventListener를 추가할 수 있도록 한 것\r\n- document.getElementById와 유사한 역할\r\n\r\n```\r\nconst App = () => {\r\n  const potato = useRef();\r\n  setTimeout(() => potato.current?.focus(), 5000);\r\n  return (\r\n    <div className=\"App\">\r\n      <input ref={potato} placeholder=\"hello\" />\r\n    </div>\r\n  );\r\n```\r\n\r\n### current\r\n\r\n- useRef로 특정 tag를 잡았을 때, current를 꼭 써줘야한다\r\n- 예 : potato.current.addEventListenr 등등\r\n\r\n```\r\n  const useClick = (onClick) => {\r\n    const element = useRef();\r\n    useEffect(() => {\r\n      return element.current.addEventListener(\"click\", onClick);\r\n    }, []);\r\n    return element;\r\n  };\r\n\r\n  const App = () => {\r\n    const sayHello = () => console.log(\"Say Hello\");\r\n    const potato = useClick(sayHello);\r\n    return (\r\n      <div className=\"App\">\r\n        <h2 ref={potato}> hello </h2>\r\n      </div>\r\n    );\r\n  };\r\n\r\n```\r\n","excerpt":"Hooks useRef 특정 html에 ref를 추가해서, html 태그를 조작하거나 eventListener를 추가할 수 있도록 한 것 document.getElementById와 유사한 역할 current useRef로 특정 tag를 잡았을 때,…","fields":{"slug":"/TIL_210521/"},"frontmatter":{"date":"May 21, 2021","title":"TIL-210521","tags":["react","Hooks","useTabs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Hooks\r\n\r\n### useEffect\r\n\r\n- useEffect 는 아래 것들의 역할을 하는 hoook\r\n- `componentDidMount()`\r\n- `componentDidUnmount()`\r\n- `componentDidUpdate()`\r\n- `componentWillMount()`\r\n- `componentWillUnmount()`\r\n\r\n## useEffect의 구조\r\n\r\n- 첫번째 파라미터는 실행할 function\r\n- 두번째 파라미터는 실행 dependecy => 일종의 실행 조건?\r\n\r\n  - 두번째 파라미터에 변화가 있을때만 첫번째 파라미터의 function을 실행!\r\n\r\n- useEffect(sayHello, [number]);\r\n\r\n  - number 값이 변할때만 sayHello실행\r\n\r\n- 예시\r\n\r\n```\r\n  const sayHello = () => console.log(\"Hello\");\r\n  const [number, setNumber] = useState(0);\r\n  const [anumber, setAnumber] = useState(0);\r\n  useEffect(sayHello, [number]);\r\n```\r\n\r\n### document.querySelector(\"tagname\")\r\n\r\n### setTimeout(() => (function, time))\r\n\r\n### useEffect 예제\r\n\r\n```\r\n  const useTitle = (initialTitle) => {\r\n    const [title, setTitle] = useState(initialTitle);\r\n    const titleUpdater = () => {\r\n      const titleText = document.querySelector(\"title\");\r\n      titleText.innerText = title;\r\n    };\r\n    useEffect(titleUpdater, [title]);\r\n    return setTitle;\r\n  };\r\n\r\n  const App = () => {\r\n    const titleChange = useTitle(\"is Loading...\");\r\n    setTimeout(() => titleChange(\"Home\"), 1000);\r\n    return <div className=\"App\"></div>;\r\n  };\r\n```\r\n","excerpt":"Hooks useEffect useEffect 는 아래 것들의 역할을 하는 hoook      useEffect의 구조 첫번째 파라미터는 실행할 function 두번째 파라미터는 실행 dependecy => 일종의 실행 조건? 두번째 파라미터에 변화…","fields":{"slug":"/TIL_210520/"},"frontmatter":{"date":"May 20, 2021","title":"TIL-210520","tags":["react","Hooks","useTabs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Hooks\r\n\r\n### useTabs\r\n\r\n- useState를 활용한 예제 연습중..\r\n\r\n```\r\n    const useTabs = (initialTab, allTab) => {\r\n      const [tab, setTab] = useState(initialTab);\r\n      const onClick = (allTab) => {\r\n        return console.log(allTab);\r\n      };\r\n      return onClick;\r\n    };\r\n\r\n    const content = [\r\n      {\r\n        item: \"item1\",\r\n        content: \"this is the name of item 1\"\r\n      },\r\n      {\r\n        item: \"item2\",\r\n        content: \"this is the name of item 2\"\r\n      }\r\n    ];\r\n\r\n    const App = () => {\r\n      const tabs = useTabs(0, getIndex);\r\n      const getIndex = (index) => {\r\n        return index;\r\n      };\r\n      return (\r\n        <div className=\"App\">\r\n          {content.map((section) => {\r\n            return <button onClick={getIndex}> {section.item}</button>;\r\n          })}\r\n        </div>\r\n      );\r\n    };\r\n```\r\n","excerpt":"Hooks useTabs useState를 활용한 예제 연습중..","fields":{"slug":"/TIL_210519/"},"frontmatter":{"date":"May 19, 2021","title":"TIL-210519","tags":["react","Hooks","useTabs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Hooks\r\n\r\n### useInput\r\n\r\n- 하나의 function 을 다른 function, 다른 file 등에서도 쓸 수 있게 해주는 것인듯?\r\n- 정확한 원리는 모르겠지만.....useInput function을 다른 함수내에 넣어버려서, 함수를 불러오는 느낌?\r\n\r\n```\r\nconst useInput = (initialValue, validator) => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value }\r\n    } = event;\r\n  };\r\n  let willUpdate = true;\r\n  if (typeof validator === \"function\") {\r\n    willUpdate = validator(value);\r\n  }\r\n  if (willUpdate) {\r\n    setValue(value);\r\n  }\r\n  return { value, onChange };\r\n};\r\n\r\nconst App = () => {\r\n  const maxLength = (value) => value.length <= 10;\r\n  const name = useInput(\"Mr.\", maxLength);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <input placeholder=\"Your name :)\" {...name} />\r\n    </div>\r\n  );\r\n};\r\n```\r\n","excerpt":"Hooks useInput 하나의 function 을 다른 function, 다른 file 등에서도 쓸 수 있게 해주는 것인듯? 정확한 원리는 모르겠지만.....useInput function을 다른 함수내에 넣어버려서, 함수를 불러오는 느낌?","fields":{"slug":"/TIL_210518/"},"frontmatter":{"date":"May 18, 2021","title":"TIL-210518","tags":["react","Hooks"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Hooks\r\n\r\n### 의미\r\n\r\n- 기존의 react에서 state 등 코드가 더러웠던 것들을 깔끔하게 해줌\r\n- class가 아닌 functional code로 다 짤 수 있게 해줌\r\n- 예시 : useState\r\n\r\n  - 기존에 state, this, setState 등등등 여러가지로 코드가 복잡했던 걸 아주 깔끔하게 더 짧은 줄의 코드로 만들어줌\r\n\r\n  ```\r\n  function App() {\r\n  const [item, setItem] = useState(1);\r\n  const incremental = () => setItem(item + 1);\r\n  const decremental = () => setItem(item - 1);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox {item}</h1>\r\n      <button onClick={incremental}>incremental</button>\r\n      <button onClick={decremental}>decremental</button>\r\n    </div>\r\n  );\r\n  }\r\n  ```\r\n\r\n### Linear Gradient\r\n\r\n- React Native에서는 자체 CSS 문법이 있는듯?\r\n- Linear Gradient는 배경 색 등이 gradient로 나오게 하는 것\r\n\r\n### Style in React Native\r\n\r\n- 하나의 element에 두개의 style을 부여하는 법\r\n- `<View style={{ ...styles.halfContainer, ...styles.textContainer }}>`\r\n- `...`을 이용해서, 두개를 사용 가능\r\n\r\n### Status Bar\r\n\r\n- 핸드폰 상단의 Status Bar의 색상 등 스타일을 조정해줄 수 있음 -\r\n- 쓰려면 우선 \"react-native\"에서 import\r\n","excerpt":"Hooks 의미 기존의 react에서 state 등 코드가 더러웠던 것들을 깔끔하게 해줌 class가 아닌 functional code로 다 짤 수 있게 해줌 예시 : useState 기존에 state, this, setState 등등등 여러가지로 …","fields":{"slug":"/TIL_210517/"},"frontmatter":{"date":"May 17, 2021","title":"TIL-210517","tags":["react","Hooks"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### Component\r\n\r\n- 앞선 react와 마찬가지로, component를 사용해서 app.js 에 import 한다.\r\n- styles를 이용해서 직접 native 코드를 건드리지 않고도 폰 화면 속을 꾸밀 수 있음\r\n\r\n### Styles code\r\n\r\n- paddingHorizontal\r\n- paddingVertical\r\n- backgroundColor\r\n- fontSize\r\n- justifyContent : \"flex-end\"\r\n\r\n### React Native 에서의 CSS\r\n\r\n- 보통 camel 스타일로 작성한다\r\n\r\n# Location\r\n\r\n### Expo의 여러 API들\r\n\r\n- Expo는 기본 react native에 비해서 많은 APi및 기능 제공\r\n- location 등\r\n","excerpt":"Component 앞선 react와 마찬가지로, component를 사용해서 app.js 에 import 한다. styles를 이용해서 직접 native 코드를 건드리지 않고도 폰 화면 속을 꾸밀 수 있음 Styles code paddingHoriz…","fields":{"slug":"/TIL_210513/"},"frontmatter":{"date":"May 13, 2021","title":"TIL-210513","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### React-native\r\n\r\n- react와 안드로이드, ios를 연결해주는 브릿지\r\n- View, Text 처럼 양쪽을 연결해주는 브릿지 컴포넌트들이 있음\r\n- 모든 것이 그런데 기존 html, css, js처럼 작동하지는 않고, react native만의 규칙을 갖고 있기도 함\r\n- 무거운 것들(3d 게임 등) 아니면 react native로 만들기는 좋음\r\n\r\n### View\r\n\r\n- React native에서 View는 html에서 div 같은것\r\n\r\n### flex\r\n\r\n- 폰 화면에서 공간을 얼마나 차지할 것인지\r\n- react native에서 layout을 짤 때, flexbox를 사용할 것을 니꼬가 권장\r\n- `flex : 1`은 주어진 공간을 다 사용한다는 것\r\n- 각 view들의 flex가 몇이고, 상대적으로 비율이 어떻게 되느냐에 따라 자리를 차지함\r\n\r\n### direction\r\n\r\n- react native에서 felxbox의 direction 은 기본적으로 column (웹은 row)\r\n","excerpt":"React-native react와 안드로이드, ios를 연결해주는 브릿지 View, Text 처럼 양쪽을 연결해주는 브릿지 컴포넌트들이 있음 모든 것이 그런데 기존 html, css, js처럼 작동하지는 않고, react native만의 규칙을 갖…","fields":{"slug":"/TIL_210512/"},"frontmatter":{"date":"May 12, 2021","title":"TIL-210512","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### Create React app\r\n\r\n- npx create-react-app 생성하고자하는 project/dir 이름\r\n- cd pjt 이름\r\n- npm start\r\n","excerpt":"Create React app npx create-react-app 생성하고자하는 project/dir 이름 cd pjt 이름 npm start","fields":{"slug":"/TIL_210509/"},"frontmatter":{"date":"May 09, 2021","title":"TIL-210509","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### Link - pathname, state\r\n\r\n- Link를 사용하면, pathname으로 연동될 url을 넣고\r\n- state 안에 내가 전달하고 싶은 데이터를 넘길 수 있다(string,array,object 등)\r\n\r\n```\r\n    <Link\r\n      to={{\r\n        pathname: \"/movie\",\r\n        state: {\r\n          title,\r\n          year,\r\n          summary,\r\n          poster,\r\n          genres,\r\n        },\r\n      }}\r\n    >\r\n```\r\n\r\n### Component 안의 props\r\n\r\n- 모든 컴포넌트는 기본적으로 props를 전달 받아 가지고 있다(console안에서 확인 가능)\r\n\r\n### state안에 값이 있는지 없는지 체크하고 페이지 이동\r\n\r\n- 만약, 유저가 url직접 치고 들어와서 데이터가 없는 페이지로 간다면 다시 홈이나 다른 페이지로 redirect 해줄 필요\r\n- 이때 prpos 안에 있는 history 를 사용 가능\r\n- `props.history.push(\"url\")` 이렇게하면, 해당 url로 redirect됨\r\n\r\n```\r\nclass Detail extends React.Component {\r\n  componentDidMount() {\r\n    const { location, history } = this.props;\r\n    if (location.state === undefined) {\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n  render() {\r\n    const { location } = this.props;\r\n    if (location.state) {\r\n      return <span>{location.state.title}</span>;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### 기타\r\n\r\n- 현재 로컬에 문제가 생겼을 때, git remote에 있는 걸 clone 할 수 있음\r\n- 현재 로컬 버젼을, 깃헙에 있는 걸로 변경 : `git reset --hard commit한 버전 코드`\r\n- git pull로 병합 등등...\r\n","excerpt":"Link - pathname, state Link를 사용하면, pathname으로 연동될 url을 넣고 state 안에 내가 전달하고 싶은 데이터를 넘길 수 있다(string,array,object 등) Component 안의 props 모든 컴포넌…","fields":{"slug":"/TIL_210508/"},"frontmatter":{"date":"May 08, 2021","title":"TIL-210508","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### Hash Router\r\n\r\n- react지원 기능으로, Routing API인듯\r\n- 특정 path를 호출하면, 특정 component 페이지가 보이도록 해준다\r\n- 근데 최근에는 Brower Router라는걸 더 많이 쓰는 듯. 확인 필요\r\n\r\n```\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport Home from \"./routes/Home\";\r\nimport About from \"./routes/About\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <Route path=\"/\" exact={true} component={Home}></Route>\r\n      <Route path=\"/about\" component={About}></Route>\r\n    </HashRouter>\r\n  );\r\n}\r\n```\r\n\r\n### Navigation\r\n\r\n- navigation router를 생성해서, 상단 네비게이션으로 할수 있음\r\n- 특히, html의 `a`태그를 쓰지 않고 `Link`태그를 사용하면, 전체 화면을 refresh하는게 아니라 react로 매우 빠르게 화면을 이동 가능\r\n\r\n* Navigation.js\r\n\r\n```\r\nfunction Navigation() {\r\n  return (\r\n    <div>\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\n\r\n- App.js\r\n\r\n```\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <Navigation />\r\n      <Route path=\"/\" exact={true} component={Home}></Route>\r\n      <Route path=\"/about\" component={About}></Route>\r\n    </HashRouter>\r\n  );\r\n}\r\n```\r\n","excerpt":"Hash Router react지원 기능으로, Routing API인듯 특정 path를 호출하면, 특정 component 페이지가 보이도록 해준다 근데 최근에는 Brower Router라는걸 더 많이 쓰는 듯. 확인 필요 Navigation navi…","fields":{"slug":"/TIL_210507/"},"frontmatter":{"date":"May 07, 2021","title":"TIL-210507","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### Gihub Page Deploy\r\n\r\n1. npm i gh-pages\r\n2. package.json > hompage : \"url\" (url = username.github.io/projectname)\r\n3. package.json > script > build > build dir 생성됨\r\n4. package.json > script : deploy : gh-page -d build\r\n5. 동일 경로 > predeploy > npm run build\r\n   끝~\r\n\r\n- deploy 를 run 시키면 자동으로 predeploy를 실행함\r\n\r\n### async await\r\n\r\ns\r\n","excerpt":"Gihub Page Deploy npm i gh-pages package.json > hompage : \"url\" (url = username.github.io/projectname) package.json > script > build > buil…","fields":{"slug":"/TIL_210505/"},"frontmatter":{"date":"May 06, 2021","title":"TIL-210506","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### map()\r\n\r\n- map을 사용할 때는, 항상 각 item에 key값을 부여해줘야한다.\r\n- props로 component의 각 item에 key값 부여 하면 될 듯\r\n\r\n### className\r\n\r\n- React에서 자체적으로 쓰는 class가 있기 때문에, html 내의 classs는 `className`으로 바꿔서 사용\r\n- 이런 비슷한게 몇개 있다 찾아볼 것\r\n\r\n### Array를 가져오는 Prop의 경우\r\n\r\n- proptypes를 아래와 같이 설정\r\n- `PropTypes.arrayOf(PropTypes.string).isRequired`\r\n\r\n### CSS\r\n\r\n- 이건 직접 만들어봐야함\r\n- 하나하나 화면 보면서 하고\r\n- 왠만하면 다 class를 붙여주는 것이 좋다.\r\n- flex, flexbox, 등등 기본 개념 다시 숙지 할 것\r\n","excerpt":"map() map을 사용할 때는, 항상 각 item에 key값을 부여해줘야한다. props로 component의 각 item에 key값 부여 하면 될 듯 className React에서 자체적으로 쓰는 class가 있기 때문에, html 내의 cla…","fields":{"slug":"/TIL_210504/"},"frontmatter":{"date":"May 05, 2021","title":"TIL-210505","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### axios\r\n\r\n- 데이터를 가져올 때 쓰는 js 언어.\r\n- axios.get(데이터 소스?)\r\n\r\n### async await\r\n\r\ns\r\n","excerpt":"axios 데이터를 가져올 때 쓰는 js 언어. axios.get(데이터 소스?) async await s","fields":{"slug":"/TIL_210506/"},"frontmatter":{"date":"May 04, 2021","title":"TIL-210504","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### react class\r\n\r\n- component를 function 으로 하지 않고, class로 설정한다\r\n- class 설정시 `extends`를 사용해서 React.component로 부터 특성들을 가져온다.\r\n\r\n### Render\r\n\r\n- React는 자동으로, class component의 `render` method를 화면에 뿌려준다.\r\n- Render는 return을 갖는다\r\n\r\n### state\r\n\r\n- State는 data를 담는 object\r\n- State에 있는 data를 바꿔줄 수 있다\r\n- 그래서, data를 가변적으로 바꾸기 위해서 stat를 담을 수 있는 class component를 쓰는 것\r\n\r\n### state 안 data의 변경\r\n\r\n- state 안의 data를 변경하면, 관련된 function 들을 다시 실행하도록 해야함\r\n\r\n## setState(), render\r\n\r\n- setState로 바로, state 값을 변경하고, render를 재실행시킴\r\n\r\n### 기타\r\n\r\n- function 끝에 ()를 붙이면 바로 실행하라는 것\r\n- Onclick 이라는 props를 button은 갖는다 (react의 장점)\r\n\r\n# Component Lifecycle : React 내의 다양한 func\r\n\r\n## Mount : Born\r\n\r\n- 제일 처음 react를 호출할때 mount가 됨\r\n- 아래 순서로 func이 실행됨\r\n\r\n1. constructr()\r\n2. render()\r\n3. componentDidMount()\r\n\r\n## Update : Update\r\n\r\n## Unmount : Death, kill\r\n","excerpt":"react class component를 function 으로 하지 않고, class로 설정한다 class 설정시 를 사용해서 React.component로 부터 특성들을 가져온다. Render React는 자동으로, class component의 …","fields":{"slug":"/TIL_210503/"},"frontmatter":{"date":"May 03, 2021","title":"TIL-210503","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### Component\r\n\r\n- react는 Component를 가져와서 브라우져가 이해할 수 있는 html로 변환해준\r\n- 이떄, react가 html로 반환하는 모든 것들을 componenet라고 부름\r\n\r\n### JSX\r\n\r\n- Javascript + HTML = JSX\r\n\r\n### Component 만드는 법\r\n\r\n- Upper Case로 시작하는 function을 만든다\r\n\r\n```\r\nfunction Potation() {\r\n    return\r\n}\r\n```\r\n\r\n### React app은 하나의 Componennt만 렌더할 수 있다\r\n\r\n- 따라서 다양한 component를 기본 component 안에 집어 넣어서(중첩으로) 사용한다.\r\n\r\n### Property (props)\r\n\r\n- JSX에서는, 각 component에 props 값을 부여해서, 각 componenet에 전달할 수 가 있다.\r\n- 예를 들어, fav=kimchi라는 것을 componenet값으로 전달 할 수 있는 것\r\n\r\n### Map\r\n\r\n- JS 언어로, array에 있는 각 요소들에 func을 걸수 있도록 함\r\n\r\n```\r\nfunction App() {\r\n  return foodILike.map((dish) => {\r\n    return <Food name={dish.name} picture={dish.image} />;\r\n  });\r\n}\r\n```\r\n\r\n### Prop-Types\r\n\r\n- Component에서 전달하는 Prop이 적절한 type인지, required 인데 전달이 안됐는지 등을 체크해준다.\r\n- npm i prop-types\r\n- import PropTypes from \"prop-types\"\r\n\r\n```\r\nFood.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  picture: PropTypes.string.isRequired,\r\n  rating: PropTypes.number,\r\n};\r\n```\r\n","excerpt":"Component react는 Component를 가져와서 브라우져가 이해할 수 있는 html로 변환해준 이떄, react가 html로 반환하는 모든 것들을 componenet라고 부름 JSX Javascript + HTML = JSX Compone…","fields":{"slug":"/TIL_210502/"},"frontmatter":{"date":"May 02, 2021","title":"TIL_210502","tags":["React","jsx"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n## Firebase\r\n","excerpt":"Firebase","fields":{"slug":"/TIL_210317/"},"frontmatter":{"date":"Apr 29, 2021","title":"TIL-210429","tags":["firebase"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [3.2] Mixins\r\n\r\n### 의미\r\n\r\n- scss에서 function 처럼 일부 func을 생성해서 활용할 수 있도록 하는 것\r\n- 상황에 따라서, css 결과가 달라지게 보이도록 하고 싶을때?! (if문 사용 등)\r\n- minxis 파일 내에, func처럼 활용하고 싶은 것들을 생성하고, scss파일에 import해서 사용 가능\r\n\r\n### directory\r\n\r\n- src > scss > \\_mixins.scss\r\n\r\n### \\_mixins.scss\r\n\r\n- 아래 형식으로 생성\r\n- 파라미터를 넘길 수도, if문을 쓸수도 있음\r\n\r\n```\r\n@mixin link($word) {\r\n    display : block;\r\n    @if $word == \"odd\" {\r\n        color : orangered\r\n    } else {\r\n        color : powderblue\r\n    };\r\n    text-decoration: none;\r\n}\r\n```\r\n\r\n### styles.scss\r\n\r\n- 아래 형식으로 import\r\n\r\n```\r\n        @import \"_mixins\";\r\n\r\n\r\n        a {\r\n        &:nth-child(odd) {\r\n            @include link(\"odd\")\r\n        }\r\n        &:nth-child(even) {\r\n        @include link(\"even\")\r\n        }\r\n        }\r\n```\r\n\r\n# [3.3] Extends\r\n\r\n### 의미\r\n\r\n- scss에서 같은 코드를 반복 할때 쓰는 것\r\n\r\n### 사용법\r\n\r\n1. `_directory.scss` 생성\r\n2. 해당 파일 내, `%extend_var` 형태로 생성\r\n3. styles.scss > `@import _directory`\r\n4. `@extend %var` 형태로 import\r\n\r\n# [3.4] Awesome Mixins and Conclusions\r\n\r\n### Mixin으로 responsive한 화면 만들 수 있음\r\n\r\n- 화면 크기에 따라 css가 responsive하게 `mixin`으로 인자를 전달해서 func 생성\r\n\r\n### awesome scss\r\n\r\n- 라이브러리가 있어서, 손쉽게 scss 작성 가능\r\n- https://github.com/colourgarden/awesome-scss\r\n","excerpt":"3.2 Mixins 의미 scss에서 function 처럼 일부 func을 생성해서 활용할 수 있도록 하는 것 상황에 따라서, css 결과가 달라지게 보이도록 하고 싶을때?! (if문 사용 등) minxis 파일 내에, func처럼 활용하고 싶은 것…","fields":{"slug":"/TIL_54_210317/"},"frontmatter":{"date":"Mar 17, 2021","title":"TIL_210317","tags":["scss","sass","minxin"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [3.0]\r\n\r\n### 세팅\r\n* scss 사용하기 위해서, 몇가지 세팅이 필요\r\n    * `gulp` install?\r\n    * npm install?\r\n    * `babel` install? \r\n    * 나중에 확실히 확인해볼것ㅎㅎ\r\n\r\n### SCSS\r\n* 간편하게, 로지컬하게 css를 작성하고, 이걸 나중에 웹이 이해할 수 있는 css파일 형태로 변환함\r\n* scss내에서는 코드의 간편함, 변수사용 가능 등의 강점이 있음\r\n\r\n### scss directory\r\n* src > styles.scss\r\n* css파일로 변환하고 싶지 않은 파일은 언더바 `_`를 파일명에 넣어줌\r\n\r\n* dist > styles.css\r\n    * scss 가 변환될 css파일을 저장하는 저장소\r\n    * scss파일 내용을 바꾸면 해당 디렉토리의 파일 내용 자동 변경됨 \r\n\r\n# [3.1] Variables and Nesting \r\n\r\n### Varaibles\r\n\r\n* 1. variable 파일을 만듬\r\n* 2. varialbe로 활용할 것을 `$`을 이용해 지정\r\n    ```\r\n    $bg : red\r\n    ```\r\n* 3. variable 설정한 폴더를 scss 파일에서 `@import`한 후에, variable 사용\r\n\r\n### Nesting\r\n* class나 css element 안에 다시 class나 element를 넣어서 css 속성을 부여하는 것\r\n* 코드를 읽기가 매우 쉬워짐!\r\n* nesting 안에서 `&`는 nesting 상위의 father 값을 의미함\r\n```\r\n.box {\r\n  h2 {\r\n    color : red;\r\n  }\r\n  button {\r\n    color : blue\r\n  }\r\n  &:hover {\r\n    background : peru;\r\n  }\r\n}\r\n```","excerpt":"3.0 세팅 scss 사용하기 위해서, 몇가지 세팅이 필요  install? npm install?  install?  나중에 확실히 확인해볼것ㅎㅎ SCSS 간편하게, 로지컬하게 css를 작성하고, 이걸 나중에 웹이 이해할 수 있는 css파일 형태로…","fields":{"slug":"/TIL_53_210316 copy/"},"frontmatter":{"date":"Mar 16, 2021","title":"TIL_210316","tags":["scss","sass","gulp"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [3.0]\r\n\r\n### 세팅\r\n* scss 사용하기 위해서, 몇가지 세팅이 필요\r\n    * `gulp` install?\r\n    * npm install?\r\n    * `babel` install? \r\n    * 나중에 확실히 확인해볼것ㅎㅎ\r\n\r\n### SCSS\r\n* 간편하게, 로지컬하게 css를 작성하고, 이걸 나중에 웹이 이해할 수 있는 css파일 형태로 변환함\r\n* scss내에서는 코드의 간편함, 변수사용 가능 등의 강점이 있음\r\n\r\n### scss directory\r\n* src > styles.scss\r\n* css파일로 변환하고 싶지 않은 파일은 언더바 `_`를 파일명에 넣어줌\r\n\r\n* dist > styles.css\r\n    * scss 가 변환될 css파일을 저장하는 저장소\r\n    * scss파일 내용을 바꾸면 해당 디렉토리의 파일 내용 자동 변경됨 \r\n\r\n# [3.1] Variables and Nesting \r\n\r\n### Varaibles\r\n\r\n* 1. variable 파일을 만듬\r\n* 2. varialbe로 활용할 것을 `$`을 이용해 지정\r\n    ```\r\n    $bg : red\r\n    ```\r\n* 3. variable 설정한 폴더를 scss 파일에서 `@import`한 후에, variable 사용\r\n\r\n### Nesting\r\n* class나 css element 안에 다시 class나 element를 넣어서 css 속성을 부여하는 것\r\n* 코드를 읽기가 매우 쉬워짐!\r\n* nesting 안에서 `&`는 nesting 상위의 father 값을 의미함\r\n```\r\n.box {\r\n  h2 {\r\n    color : red;\r\n  }\r\n  button {\r\n    color : blue\r\n  }\r\n  &:hover {\r\n    background : peru;\r\n  }\r\n}\r\n```","excerpt":"3.0 세팅 scss 사용하기 위해서, 몇가지 세팅이 필요  install? npm install?  install?  나중에 확실히 확인해볼것ㅎㅎ SCSS 간편하게, 로지컬하게 css를 작성하고, 이걸 나중에 웹이 이해할 수 있는 css파일 형태로…","fields":{"slug":"/TIL_53_210316/"},"frontmatter":{"date":"Mar 16, 2021","title":"TIL_210316","tags":["scss","sass","gulp"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [2.10] Auto Columns and Rows\r\n\r\n### align-self, justify-self, place-self\r\n\r\n- child에게 직접 적용하는 grid\r\n- `align-self` : column에 대한 위치 등\r\n- `justify-self` : row에 대한 위치 등\r\n- `place-self` : row, column 에 대한 위치\r\n\r\n### grid-auto-rows/columns\r\n\r\n- 설정한 grid값보다 element가 많을 경우, 나머지 element들에 대한 row/column값을 자동으로 부여해줌\r\n- 예시 : grid로는 row 4개에 대해서만 설정했는데, row가 40개 일때, 나머지 36개에 대해서는 어떤 grid값을 줄것인가?\r\n\r\n```\r\n.father {\r\n  display: grid;\r\n  gap: 10px;\r\n  height: 100vh;\r\n  grid-template-rows: repeat(4, 100px);\r\n  grid-template-columns: repeat(4, 100px);\r\n  grid-auto-rows: 100px;\r\n}\r\n```\r\n\r\n### grid-auto-flow\r\n\r\n- grid가 설정한 row/column값보다 많아질때, 어디로 grid를 추가할지 설정함\r\n- default는 row인데, column으로 바꾸면 옆으로 grid가 늘어남\r\n\r\n```\r\n\r\n```\r\n\r\n### 기타\r\n\r\n- 자동으로 div를 여러개 생성하는법 : `.item*20>{$}`\r\n  - div의 class명이 item인 것을 20개 만들고, 그 안에는 숫자(`$`)를 넣자\r\n\r\n# [2.11] minmax\r\n\r\n### minmax\r\n\r\n- 의미 : 화면 크기가 줄거나 늘어날때, element가 최소 몇까지 줄어들도록, 최대 몇까지 늘어나도록 할것인지 설정하는 것\r\n- 예시\r\n\r\n```\r\n.father {\r\n  display: grid;\r\n  gap: 10px;\r\n  height: 100vh;\r\n  grid-template-rows: repeat(4, 100px);\r\n  grid-template-columns: repeat(4, minmax(200px, 1fr));\r\n}\r\n```\r\n\r\n# [2.12] auto-fit auto-fill\r\n\r\n### 의미\r\n\r\n- grid에서 row를 기존 element로 꽉 채울 것인지, 아니면 가상의 grid들로 꽉 채울것인지에 대한것\r\n- `auto-fill` : 가상의 grid들로 row를 우선 꽉 채운 후, element가 추가되면 가상의 grid중 하나를 할당\r\n- `auto-fit` : 기존 있는 element들로 row를 꽉채운다 > responsive. 화면에따라 바뀌는 것. element 추가시, 기존 element들의 크기를 줄이고 끼워넣음\r\n\r\n### 예시\r\n\r\n```\r\n    .grid:first-child {\r\n    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\r\n    }\r\n\r\n    .grid:last-child {\r\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\r\n    }\r\n```\r\n\r\n# [2.13] min-content max-content\r\n\r\n- content의 크기에 따라, grid의 크기를 조정하는 것\r\n\r\n### min-content\r\n\r\n- grid안의 콘텐츠를 최소단위로 쪼개서, 최소단위가 들어가게 grid크기를 최소화\r\n\r\n### max-content\r\n\r\n- grid안의 콘텐츠를 한 row에 다 들어올 수 있게 grid크기를 최대화\r\n","excerpt":"2.10 Auto Columns and Rows align-self, justify-self, place-self child에게 직접 적용하는 grid  : column에 대한 위치 등  : row에 대한 위치 등  : row, column 에 대한…","fields":{"slug":"/TIL_51_210312/"},"frontmatter":{"date":"Mar 12, 2021","title":"TIL_210312","tags":["scss","grid","span"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Grid Garden\r\n\r\n- 주소 :https://cssgridgarden.com/#ko\r\n\r\n### grid-template\r\n\r\n- 결국 모든것의 끝판왕, 축약버전은 `grid-template`\r\n- `grid-template` : `rows` / `columns` 로 설정함\r\n\r\n### 기타\r\n\r\n- grid-template-rows\r\n- grid-template-columns\r\n- repeat()\r\n- grid-row-start\r\n- grid-row-end\r\n- grid-column-start\r\n- grid-column-end\r\n","excerpt":"Grid Garden 주소 :https://cssgridgarden.com/#ko grid-template 결국 모든것의 끝판왕, 축약버전은   :  /  로 설정함 기타 grid-template-rows grid-template-columns re…","fields":{"slug":"/TIL_52_210315/"},"frontmatter":{"date":"Mar 12, 2021","title":"TIL_210312","tags":["scss","grid","span","grid-template"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [2.5] Shortcuts\r\n\r\n### grid-column / grid-row가 차지할 공간 표시\r\n\r\n- 시작점과 끝점을 표기\r\n- 왼쪽부터 1, 2, 4, 4 / 오른쪽부터 -1, -2, -3, -4\r\n- 예시\r\n\r\n```\r\ngrid-column : 1 / 4\r\ngrid-row : 1 / -1\r\n```\r\n\r\n### span의 사용\r\n\r\n- 차지할 공간을 공간 개념으로 표기\r\n\r\n* span 다음에 띄어쓰기 해줘야함\r\n\r\n- 예시 : 처음부터 4개의 grid 공간 차지\r\n\r\n```\r\ngrid-column : span 4\r\n```\r\n\r\n# [2.7] Grid Template\r\n\r\n- 의미 : 시각화해서 grid의 크기를 디자인하는 것\r\n- shortcut의 끝판왕. 굳이 각 div가 어떤 grid에서 시작, 끝나는지 설정해줄 필요 없다.\r\n\r\n### fr\r\n\r\n- 의미 : px을 설정해주는 것이 아니라, 보이는 화면을 fraction으로 나눠서 꽉차게 해줌\r\n- 예시 : grid-template-columns : repeat(4, 1fr)\r\n\r\n* grid에서는 px을 직접 설정하지 않고, `fr`을 사용하자!\r\n\r\n### Grid Template 사용 법\r\n\r\n- 1. 각 item에 `grid-area`로 이름을 붙여줌\r\n- 2. father element에서 grid teplate으로 시각화해서\r\n  - grid는 높이가 없다. height설정해줘야\r\n- 3. 각 row의 grid-template을 넣어주고, 각 row의 끝에 몇 row를 차지하는지 fr로 표기해줌\r\n- 4. 모든 row 입력후, 끝에, 각 column이 몇 `fr`에 해당하는지 각각 표기\r\n\r\n* 예시\r\n\r\n```\r\n.father {\r\n  display: grid;\r\n  gap: 10px;\r\n  height: 100vh;\r\n  grid-template:\r\n    \"header header header header\" 1fr\r\n    \"content content content nav\" 2fr\r\n    \"footer footer footer footer\" 1fr / 1fr 1fr 1fr 1fr;\r\n}\r\n```\r\n\r\n# [2.8] Place Items\r\n\r\n### justify-items\r\n\r\n- 수평방향에서, 각 grid내 item을 배치함\r\n- default값 : stretch (꽉채우는 것)\r\n\r\n### align-items\r\n\r\n- 수직 방향에서, 각 gird내 item을 배치함\r\n- default값 : stretch (꽉채우는 것)\r\n\r\n### place-items\r\n\r\n- 수평, 수직 방향 모두에 대하여 grid 내 item 위치 설정\r\n- 예시 : place-items : stretch center\r\n","excerpt":"2.5 Shortcuts grid-column / grid-row가 차지할 공간 표시 시작점과 끝점을 표기 왼쪽부터 1, 2, 4, 4 / 오른쪽부터 -1, -2, -3, -4 예시 span의 사용 차지할 공간을 공간 개념으로 표기 span 다음에 …","fields":{"slug":"/TIL_50_210311/"},"frontmatter":{"date":"Mar 11, 2021","title":"TIL_210311","tags":["scss","grid","span"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [2.2] CSS Grid Basic Concepts\r\n\r\n### Grid\r\n\r\n- Grid가 나온 이유?\r\n  - 각 item 간의 간격 등을 grid 형태로 깔끔하게, 정돈되게 관리할 수 있음\r\n  - flex box에서는 개별 item 간의 간격을 각각 조정해줘야 하는 귀찮음\r\n\r\n* Grid는 flexbox와 마찬가지로 father element에 적용\r\n\r\n### 1. Grid 방법\r\n\r\n- `display : grid`\r\n\r\n### 2. Grid의 column 사이즈 설정\r\n\r\n- `grid-template-columns : 250px 200px 100px`\r\n- 원하는 컬럼 수만큼 사이즈를 넣어주면 됨\r\n\r\n### 3. Grid row 사이즈 성정\r\n\r\n- `grid-template-rows : 250px 200px 100px`\r\n- 원하는 row 수만큼 사이즈를 넣어주면 됨\r\n\r\n### 4. column, row 간의 간격 설정\r\n\r\n- `gap : 20px` : 행, 열 모두 간격 동시 설정\r\n- column-gap\r\n- row-gap\r\n  - 각각의 간격 별도 설정\r\n\r\n# [2.3] Grid Template Areas\r\n\r\n- Grid로 Layout을 설계 하는 방법\r\n\r\n### grid-template-areas\r\n\r\n- 의미 : grid로 화면의 전체 layout을 설정할 수 있도록 한다.\r\n- grid 상에서, 이 부분은 이 div로, 이 grid는 이 div로 채운다를 알려줌\r\n- 시각화된 형태로 보여준다\r\n\r\n```\r\n.father {\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 200px);\r\n  grid-template-rows: 100px repeat(2, 200px) 100px;\r\n  grid-template-areas:\r\n    \"header header header header\"\r\n    \"content content content nav\"\r\n    \"content content content nav\"\r\n    \"footer footer footer footer\";\r\n}\r\n```\r\n\r\n### gird-area\r\n\r\n- 각 div의 css값에 `grid-area`값을 부여해서, 어떤 grid area를 해당 div가 차지할지를 정할 수 있음\r\n\r\n```\r\n    .header {\r\n    background: peru;\r\n    grid-area: header;\r\n    }\r\n\r\n    .content {\r\n    background: skyblue;\r\n    grid-area: content;\r\n    }\r\n```\r\n\r\n### grid-template-colums :repeate\r\n\r\n- `repeat`를 활용하면 컬럼 값을 여러번 수기로 안넣어도 됨\r\n- 예시\r\n\r\n```\r\n.father {\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 200px);\r\n  grid-template-rows: 100px repeat(2, 200px) 100px;\r\n}\r\n```\r\n\r\n# [2.4] Rows and Columns\r\n\r\n### grid-row/column-start\r\n\r\n- grid-area, grid-template-area를 사용하지 않고, 어떤 `line`부터 어떤 `line`까지 해당 item을 stretch 시킬 것인지를 부여함\r\n\r\n* 더 나은 방법!\r\n\r\n```\r\n        .header {\r\n        background: peru;\r\n        grid-column-start: 1;\r\n        grid-column-end: 5;\r\n        }\r\n\r\n        .content {\r\n        background: skyblue;\r\n        grid-column-start: 1;\r\n        grid-column-end: 4;\r\n        grid-row-start: 2;\r\n        grid-row-end: 4;\r\n        }\r\n```\r\n","excerpt":"2.2 CSS Grid Basic Concepts Grid Grid가 나온 이유? 각 item 간의 간격 등을 grid 형태로 깔끔하게, 정돈되게 관리할 수 있음 flex box에서는 개별 item 간의 간격을 각각 조정해줘야 하는 귀찮음 Grid는…","fields":{"slug":"/TIL_49_210310/"},"frontmatter":{"date":"Mar 10, 2021","title":"TIL_210310","tags":["scss","grid"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [1.5] wrap, nowrap, reverse, align-content\r\n\r\n### flex-wrap\r\n\r\n- 의미 : item간에 `main axis상에서`(내생각) 겹치게 둘지, 겹치지 않고 item의 크기를 반영해줄지 결정하는것\r\n\r\n* 예시\r\n  - `flex-wrap : nowrap` : 같은 axis 상에 있게 하고, itme의 width를 고려하지 않음(widht를 조정함)\r\n  * `flex-wrap : wrap` : item의 크기를 존중해서, line을 자동으로 바꾸면서 item의 width를 살려줌\r\n\r\n### align-content\r\n\r\n- 의미 : item간의 line을 조정해준다. (items들이 `cross axis 상에서`(내생각) line 조정)\r\n- line은 여기서 cross axis\r\n\r\n* 예시\r\n  - `alin-content : space-around`\r\n  - `alin-content : space-between`\r\n\r\n### flex-direction\r\n\r\n- `reverse`로 axis를 변경할 수도 있고, flex의 방향을 바꿔주는 것\r\n\r\n* 예시\r\n  - `flex-direction : row-reverse`\r\n  - `flex-direction : column-reverse`\r\n\r\n# [1.6] flex-grow, flex-\r\n\r\n## flex-shirink, flex-grow\r\n\r\n- 둘다 flex-box의 child에 직접 부여되는 속성들\r\n\r\n* 위 값들을 이제 주로 쓰고, 각 item에 직접 width를 부여하는 것은 줄여나갈 것! 아마도\r\n\r\n### flex-shirink\r\n\r\n- 의미 : 화면 view가 줄어들때, 특정 item/box의 크기를 더 줄어들게 하는 것\r\n- default 값은 1로 되어 있음. 크기를 늘릴 수록 더 많이 줄어듦\r\n\r\n* 예시\r\n\r\n```\r\n.child:nth-child(1){\r\n    flex-shirink : 2\r\n}\r\n```\r\n\r\n### flex-grow\r\n\r\n- 의미 : 화면 view에서 남는 여분의 공간이 있을 때(main axis 상에서?) 해당 공간을 차지하도록 함\r\n- default 값은 0으로 되어 있음. 크기 늘릴 수록 더 많이 차지함\r\n- 예시 :\r\n\r\n```\r\n.child:nth-child(1){\r\n    flex-grow : 1\r\n}\r\n```\r\n\r\n# [1.7] flex-basis\r\n\r\n### flex-basis\r\n\r\n- 의미 : item의 initial size를 설정해주는 것 (main axis 방향으로)\r\n\r\n* 화면이 flex-grow, flex-shirink 되기 전의 크기 설정\r\n* 예시\r\n\r\n```\r\nflex-basis : 200px\r\nflex-basis : 30%\r\n```\r\n\r\n# Code Challenge\r\n\r\n### `nth-child()`\r\n\r\n- nth-child로 하나의 child만 설정하는게 아니라, 여러 범위 값들에 적용할 수 있음\r\n\r\n* nth-child의 활용법 : https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child\r\n","excerpt":"1.5 wrap, nowrap, reverse, align-content flex-wrap 의미 : item간에 (내생각) 겹치게 둘지, 겹치지 않고 item의 크기를 반영해줄지 결정하는것 예시  : 같은 axis 상에 있게 하고, itme의 wid…","fields":{"slug":"/TIL_48_210309/"},"frontmatter":{"date":"Mar 09, 2021","title":"TIL_210309","tags":["scss","flexbox"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [1.2] Main Axis and Cross Axis\r\n\r\n### flexbox의 axis\r\n\r\n- 기본적으로 `flex-direction : row`\r\n\r\n- 이때,\r\n\r\n  - main axis : horizontal\r\n\r\n  - cross axis : vertical\r\n\r\n- 그래서 블록들이 옆으로 배열되는 것\r\n\r\n### 1. main axis\r\n\r\n- 이렇게 default로 되어 있는 horizontal을 main axis라고 부르자\r\n\r\n### 1.1 justify-content\r\n\r\n- 의미 : main axis 선상에서 element를 움직일 때 쓰는 것\r\n\r\n* `justify-content`를 활용해서, main axis 위의 element들을 자동으로 배치할 수 있다\r\n* 예 : `justify-content : center`로 하면, 화면 크기에 상관없이 element를 자동으로 가운데 배치\r\n\r\n### 2. cross axis\r\n\r\n- main axis에 반대되는 axis\r\n  - main axsis가 row면 cross axis는 vertical\r\n  * main axsis가 horizontal 이면 cross axsis 는 row\r\n\r\n### 2.1 align item\r\n\r\n- cross axis 선상에서 element들을 움직일 때 쓰이는 것\r\n\r\n# [1.4] align-self and order\r\n\r\n## 개별 child를 조정하는 방법\r\n\r\n- flexbox는 기본적으로 fahter element를 손보는 것이지, child element css 코드를 직접 수정하지 않음\r\n- 하지만, flexbox 안에서도 child를 직접 수정할 수 있는 것이 몇개 있음\r\n- `align-self`와 `order`\r\n\r\n### 1. align self\r\n\r\n- 의미 : corss-axis 선상에서 child의 위치등을 조정\r\n\r\n```\r\n.box:nth-child(2) {\r\n  align-self: center;\r\n}\r\n```\r\n\r\n### 2. order\r\n\r\n- child 간의 위치를, html을 수정하지 않고 바꿈\r\n\r\n* 기본적으로, child의 default order 값은 `0`임\r\n\r\n```\r\n.box:nth-child(2) {\r\n  align-self: center;\r\n  order: 1;\r\n}\r\n```\r\n\r\n### 몇번째 child를 선택하는 법\r\n\r\n- `.classname:nth-child()`\r\n- 예시\r\n\r\n```\r\n.box:nth-child(2) {\r\n  align-self: center;\r\n}\r\n```\r\n","excerpt":"1.2 Main Axis and Cross Axis flexbox의 axis 기본적으로  이때, main axis : horizontal cross axis : vertical 그래서 블록들이 옆으로 배열되는 것 1. main axis 이렇게 def…","fields":{"slug":"/TIL_47_210308/"},"frontmatter":{"date":"Mar 08, 2021","title":"TIL_210308","tags":["scss","flexbox"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [1.1] First Rule of Flexbox\r\n\r\n### Flexbox?\r\n\r\n- 의미 : 화면 등에 따라, element들의 배열이 깨지는것을 대응해주는? 새로운 display 방식\r\n- 기존의 한계\r\n  - `display`값에 margin 등을 줘서, 각 element들의 간격들을 조정했었음.\r\n  - 하지만 화면 크기가 달라지면 해당 구조가 깨져서, 보기 안좋게 됨 (ex. inline-block)\r\n  - flexbox는 화면 크기 등이 바뀌더라도 구조가 깨지지 않고 대응되게 해줌.\r\n\r\n### flexbox의 법칙\r\n\r\n- 1. 해당 element의 바로 위 father가 flexbox로 설정되도록 한다\r\n- 2. fleoxbox 설정 방법 : `display : flex`로 설정\r\n\r\n```\r\nbody{\r\n    display : flex;\r\n}\r\n```\r\n","excerpt":"1.1 First Rule of Flexbox Flexbox? 의미 : 화면 등에 따라, element들의 배열이 깨지는것을 대응해주는? 새로운 display 방식 기존의 한계 값에 margin 등을 줘서, 각 element들의 간격들을 조정했었음.…","fields":{"slug":"/TIL_46_210307/"},"frontmatter":{"date":"Mar 07, 2021","title":"TIL_210307","tags":["scss","flexbox"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### to-do\r\n\r\n- [x] profile 클릭시, profile 페이지(유저 정보 표시)\r\n- [x] logout 하면 유저 정보를 모두 삭제(cookie, session)\r\n\r\n### profile\r\n\r\n- `req.user` 통해서, user name, email 정보를 받기\r\n- controller에서 위 정보를 pug로 넘겨서, 해당 유저 정보 표기\r\n\r\n### logout\r\n\r\n- `req.logout()`이라는 매우 좋은 passport function 쓰면 됨\r\n- 자동으로 유저 정보 삭제! 굳\r\n","excerpt":"to-do profile 클릭시, profile 페이지(유저 정보 표시) logout 하면 유저 정보를 모두 삭제(cookie, session) profile  통해서, user name, email 정보를 받기 controller에서 위 정보를 p…","fields":{"slug":"/sangdami_210220/"},"frontmatter":{"date":"Feb 20, 2021","title":"상다미-210220","tags":["sangdami","logout","profile"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [6.6] Github Log In part One\r\n\r\n### install github strategy\r\n\r\n- `npm install paspport-github`\r\n\r\n### put github strategy in passport.js\r\n\r\n- callback function은 controller에 별도 생성해두었음\r\n- 밑의 clineId, clientSecret은 env파일에 별도 저장 (중요 키값)\r\n\r\n```\r\npassport.use(\r\n  new GithubStrategy(\r\n    {\r\n      clientID: process.env.GH_ID,\r\n      clientSecret: process.env.GH_SECRET,\r\n      callbackURL: \"http://localhost:4000/auth/github/callback\",\r\n    },\r\n    githubLoginCallback\r\n  )\r\n);\r\n```\r\n","excerpt":"6.6 Github Log In part One install github strategy  put github strategy in passport.js callback function은 controller에 별도 생성해두었음 밑의 clineId,…","fields":{"slug":"/TIL_44_210220/"},"frontmatter":{"date":"Feb 20, 2021","title":"TIL_210220","tags":["TIL","githublogin","passport"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [self] kakao login\r\n\r\n- 카카오 로그인 시도했으나 실패\r\n- github 로그인보다 조금 더 복잡한듯...다시 시도해보자\r\n","excerpt":"self kakao login 카카오 로그인 시도했으나 실패 github 로그인보다 조금 더 복잡한듯...다시 시도해보자","fields":{"slug":"/TIL_45_210223/"},"frontmatter":{"date":"Feb 20, 2021","title":"TIL_210220","tags":["TIL","githublogin","passport"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [6.5] MongoStore and Middlewares \r\n\r\n### 유저 정보를 쿠키에 계속 유지하는 법\r\n* 로그인 했다 해도, 서버를 껐다 키거나, 새로고침하면 쿠키가 남아있지 않고 날아감\r\n* 따라서, 유저 정보를 Mongodb에 저장해서, X라는 유저가 지금 로그인 해있다는 걸 쿠키에 계속 남겨줘야 함\r\n* 공식 문서 참고 : https://github.com/jdesboeufs/connect-mongo#readme\r\n\r\n### 1. connect-mongo 설치\r\n* `npm install connect-mongo`\r\n\r\n### 2. import connect-mongo\r\n* `import MongoStore from \"connect-mongo`\r\n\r\n### 3. mongodb에 연결해줌\r\n* 일단, 공식문서에 따라서 new MongoStore 변수에 담음 \r\n* const CookieStore = new MongoStore(session)\r\n\r\n### 4. app.use(session)에 store key값 추가\r\n* 아래 코드는 공식문서를 따른것\r\n* `mongoose.connection`을 통해, db에 연결!\r\n```\r\napp.use(\r\n  session({\r\n    secret: process.env.COOKIE_SECRET,\r\n    resave: true,\r\n    saveUninitialized: false,\r\n    store: new CookieStore({ mongooseConnection: mongoose.connection }),\r\n  })\r\n);\r\n```\r\n\r\n## Routes 접근 제한\r\n* 이미 로그인한 유저는 join 화면에 접근이 안되어야함\r\n* 로그인하지 않은 유저는, 볼 수 없는 페이지가 있어야함(프로필 수정 등)\r\n\r\n### 1. middleware 생성\r\n* 로그인된 user 정보가 있는지 `req.user`로 체크하고, 있는경우와 없는경우에 routing 시킬 곳을 설정\r\n\r\n### 2. onlyPubclic 미들웨어\r\n* 로그인 안된 유저의 접근을 막는 페이지 코드\r\n```\r\nexport const onlyPublic = (req, res, next) => {\r\n  if (req.user) {\r\n    res.redirect(routes.home);\r\n  } else {\r\n    next();\r\n  }\r\n};\r\n```\r\n\r\n### 3. onlyPrivate 미들웨어\r\n* 로그인한 유저의 접근을 막는 페이지 코드\r\n```\r\nexport const onlyPrivate = (req, res, next) => {\r\n  if (req.user) {\r\n    next();\r\n  } else {\r\n    res.redirect(routes.home);\r\n  }\r\n};\r\n```\r\n\r\n### 4. 해당 코드들을, router 파일들의 필요부분에 삽입\r\n\r\n\r\n","excerpt":"6.5 MongoStore and Middlewares 유저 정보를 쿠키에 계속 유지하는 법 로그인 했다 해도, 서버를 껐다 키거나, 새로고침하면 쿠키가 남아있지 않고 날아감 따라서, 유저 정보를 Mongodb에 저장해서, X라는 유저가 지금 로그인…","fields":{"slug":"/TIL_43_210217/"},"frontmatter":{"date":"Feb 17, 2021","title":"TIL-210217","tags":["TIL","connectMongo","mongostore"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [6.4] Sessions on Express \r\n\r\n\r\n### 로그인 전체 flow\r\n\r\n1. User 로그인\r\n2. user 정보가 `Cookie에 저장`됨\r\n    * 이때, user id는 암호화 되서 저장\r\n3. `express session`으로, Cookie에 저장된 정보를 불러옴\r\n4. `passport`가 session안의 쿠키 정보를 읽어서, `passport.js`에서 `deinitialize`함\r\n    * 이를 통해, 암호화된 user id를 해독하고, 어떤 유저가 로그인했는지 알 수 있게됨\r\n\r\n\r\n### 1. install express-session\r\n* `npm install express-session`\r\n\r\n\r\n### 2. import express session\r\n* `import session from \"express-session\"`\r\n\r\n### 3. use session\r\n* 아래 코드\r\n```\r\napp.use(session({\r\n    secret : process.env.COOCKIE_SECRTE (비밀이 되는 아무 스트링)\r\n    resave: true,\r\n    saveUninitialized : false,\r\n}))\r\n```","excerpt":"6.4 Sessions on Express 로그인 전체 flow User 로그인 user 정보가 됨 이때, user id는 암호화 되서 저장 으로, Cookie에 저장된 정보를 불러옴 가 session안의 쿠키 정보를 읽어서, 에서 함 이를 통해, …","fields":{"slug":"/TIL_42_210216/"},"frontmatter":{"date":"Feb 16, 2021","title":"TIL-210216","tags":["TIL","userauthentication","passport"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [6.3] Loggin the User In\r\n\r\n### what to learn\r\n* db에 유저 정보를 저장하는 것(`User.register()`)에서 한단계 더 나아가, \r\n* User를 authenticate 하고 로그인 시킴\r\n\r\n### 1. passport.authenticate\r\n* 앞선 `postJoin`에서 넘겨받은 user의 eamil, passport 정보를 바탕으로 등록 유저 여부를 auth\r\n* 공식 문서 : http://www.passportjs.org/docs/authenticate/\r\n```\r\nexport const postLogin = passport.authenticate('local', {\r\n      failureRedirect : routes.login,\r\n      successRedirect : routes.home\r\n    })\r\n}\r\n```\r\n\r\n### 2. passport를 시작시키고, 전체에 다 넘겨준다\r\n* app.js에 아래 코드 삽입\r\n    * import passport from \"passport\"\r\n    * import \"./passport\" : passport 만들어진 파일을 연결\r\n\r\n\r\n\r\n\r\n### 3. app.js에 아래 코드 삽입 : passport를 시작시키고, session에 쿠키 정보를 담음?!\r\n* passport를 사용한 곳에는 다 passport를 import 해줌 \r\n* `app.use(passport.initialize())`\r\n* `app.use(passport.session())`\r\n    * 이걸 위해서 `express-session` install 필요 -> 자세한 기능은 다음 강의에서 배우자!\r\n\r\n### 4. localMiddleware에 있는 user정보 변경\r\n* `req.user`안에, 로그인/조인 하는 유저 정보가 담긴다. 때문에 이 정보를 담아줌\r\n\r\n","excerpt":"6.3 Loggin the User In what to learn db에 유저 정보를 저장하는 것()에서 한단계 더 나아가,  User를 authenticate 하고 로그인 시킴 1. passport.authenticate 앞선 에서 넘겨받은 use…","fields":{"slug":"/TIL_41_210215/"},"frontmatter":{"date":"Feb 15, 2021","title":"TIL-210215","tags":["TIL","userauthentication","passport"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [6.2] Local Authentication with Passport part Two\r\n\r\n### serialize\r\n* 의미\r\n    * 어떤 정보를 cookie에게 줄것인가. cookie가 어떤 정보를 가질 수 있는가\r\n    * 어떤 field가 쿠키에 포함될 것인지 알려줌. id를 알려줌\r\n* 쿠키 : user id는 이거. user정보는 이거. \r\n    * 우리는 결국 이 쿠키 정보를 서버에 넘길 것\r\n    * 사람들은 주로, 쿠키에 user.id를 담고. 이 user.id기반으로 나중에 유저를 찾는다\r\n    * 쿠키 정보는 최대한 작게 유지.\r\n    * 민감한 정볼르 담지 마. 다른 사람들이 볼 수있다.\r\n\r\n### deserialize\r\n* 의미 \r\n    * 유저를 어떻게 찾을 것인가\r\n    * 쿠키의 정보를 어떻게 사용자로 전환하는가. 쿠키에 있는 정보를 보고 사용자로 전환\r\n\r\n\r\n### Serialize & Deserialize\r\n* passport.js에 아래 코드 추가\r\n```\r\npassport.serializeUser(User.serializeUser());\r\npassport.deserializeUser(User.deserializeUser());\r\n```\r\n\r\n### user를 DB에 register 시키기\r\n* User.register를 통해서 유저를 db에 등록\r\n* 1) 등록하기 전에 user를 생성해서, user name, email등을 저장\r\n* 2) user와 password를 User.register()에 파라미터로 전달하면, db에 user가 등록됨\r\n```\r\nexport const postJoin = async (req, res) => {\r\n  const {\r\n    body: { name, email, password, password2 },\r\n  } = req;\r\n  if (password !== password2) {\r\n    res.status(400);\r\n    res.render(\"Join\", { pageTitle: \"Join\" });\r\n  } else {\r\n    try {\r\n      const user = await User({\r\n        name,\r\n        email,\r\n      });\r\n      await User.register(user, password);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    res.redirect(routes.home);\r\n  }\r\n};\r\n```\r\n\r\n### DB에 등록된 유저 정보 확인\r\n* `mongo`\r\n* `use we-tube`\r\n* `db.users.find({})`\r\n* user정보가 나옴. password는 암호화 되어 있음\r\n\r\n\r\n### 기타 \r\n* mongoDB 사용법\r\n    * 1) `mongo`\r\n    * 2) `use DB명`\r\n    * 3) `db.명령어`\r\n\r\n","excerpt":"6.2 Local Authentication with Passport part Two serialize 의미 어떤 정보를 cookie에게 줄것인가. cookie가 어떤 정보를 가질 수 있는가 어떤 field가 쿠키에 포함될 것인지 알려줌. id를 알…","fields":{"slug":"/TIL_40_210212/"},"frontmatter":{"date":"Feb 12, 2021","title":"TIL-210212","tags":["TIL","userauthentication"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# To-do\r\n\r\n### 미들웨어 전부 추가\r\n\r\n- [x] helmet\r\n\r\n### 최종 output\r\n\r\n* 게시글 리스트를 노출\r\n    * 제목\r\n    * 날짜\r\n    * id\r\n* 게시글 클릭 > 게시글 내용으로 이동\r\n","excerpt":"To-do 미들웨어 전부 추가 helmet 최종 output 게시글 리스트를 노출 제목 날짜 id 게시글 클릭 > 게시글 내용으로 이동","fields":{"slug":"/sangdami_210211/"},"frontmatter":{"date":"Feb 11, 2021","title":"상다미-210211","tags":["sangdami","passport"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [6.0] Introduction to PassportJS\r\n\r\n### 기능\r\n\r\n- 유저의 authentication 정보를 확인하고 알려줌\r\n- 쿠키를 생성, 브라우저에 저장, 유저에게 할당\r\n\r\n* `passport-local-mongoose` 요건 user auth 의 기본적인 것들을 다 해주는 module.다음시간에 배워보자.\r\n\r\n# [6.1] Local Authentication with Passport part One\r\n\r\n### 1. Passport 설치\r\n\r\n- PassportJS 공식 문서 : http://www.passportjs.org/\r\n- `npm install passport`\r\n\r\n### 2. User Model 생성 (User.js)\r\n\r\n- 아래 코드에서 로직을 잘 이해해보자.\r\n- 1. 우선, DB생성을 위하여 mongoose를 import\r\n- 2. \"이 DB의 구조는 이래!\"를 알려주기 위해, schema 생성\r\n- 3. 생성된 스키마로, model을 생성!\r\n- 4. 이 모델을 이제 내보내주자!\r\n\r\n```\r\n    import mongoose from \"mongoose\";\r\n\r\n    const UserSchema = new mongoose.Schema({\r\n    name: String,\r\n    email: String,\r\n    avatarUrl: String, // 이게 뭘까?\r\n    facebookId: Number,\r\n    githubId: Number,\r\n    });\r\n\r\n    const model = mongoose.model(\"User\", UserSchema);\r\n\r\n    export default model;\r\n```\r\n\r\n### 3. User model 을 init에 import\r\n\r\n### 4. passport-local-mongoose 설치\r\n\r\n- password 확인, 설정 등을 자동으로 해주는 모듈\r\n- `npm install passport-local-mongoose\r\n- 설치후, User모델에서 passport-local-mongoose를 import하고, usernameField를 설정\r\n\r\n### 4.1 passport-local plugin 추가\r\n\r\n- 기존의 User model에, 비밀번호를 자동으로 체크, 설정할 수 있는 passport-local 플러그인을 추가해보자!\r\n- 해당 코드로, passport-local에 있는 많은것을 쓸 수 있음\r\n- but 이걸로 실제 auth를 하는건 아님. 그래서 다음의 auth를 하는 passport.js 생성\r\n\r\n```\r\nimport passportLocalMongoose from \"passport-local-mongoose\";\r\nUserSchema.plugin(passportLocalMongoose, { usernameField: \"email\" });\r\n```\r\n\r\n### 5. passport.js 생성, passport-local 설치\r\n\r\n- 실제 user auth를 하는건 `passport.js`에서 이루어진다\r\n- passport.js 파일에서, strategy를 설정해준다\r\n  - strategy란, 우리가 어떤 로그인 방식을 사용할지에 관한 것\r\n  - 페이스북, 깃헙, 카카오 로그인 등\r\n- 코드 : passport와 user를 import해주고, strategy 설정\r\n- 아래의 `createStrategy`는 매우 많은 코드(유저명 확인, 패스워드 확인) 등을 한줄로 짧게 해준것\r\n\r\n```\r\nimport passport from \"passport\";\r\nimport User from \"./models/User\";\r\n\r\npassport.use(User.createStrategy());\r\n```\r\n","excerpt":"6.0 Introduction to PassportJS 기능 유저의 authentication 정보를 확인하고 알려줌 쿠키를 생성, 브라우저에 저장, 유저에게 할당  요건 user auth 의 기본적인 것들을 다 해주는 module.다음시간에 배워보…","fields":{"slug":"/TIL_39_210210/"},"frontmatter":{"date":"Feb 10, 2021","title":"TIL-210210","tags":["JS","passport"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Code Challenge\r\n\r\n- txt 파일을 업로드하는 폴더 만들기\r\n- txt를 업로드하고, convert누르면 txt의 내용이 보여야 함\r\n- 코드 내용 : https://codesandbox.io/s/txt2html-forked-3wyeq?file=/src/views/home.pug\r\n","excerpt":"Code Challenge txt 파일을 업로드하는 폴더 만들기 txt를 업로드하고, convert누르면 txt의 내용이 보여야 함 코드 내용 : https://codesandbox.io/s/txt2html-forked-3wyeq?file=/src/…","fields":{"slug":"/TIL_38_210209/"},"frontmatter":{"date":"Feb 09, 2021","title":"TIL-210209","tags":["JS","webpack"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [4.1] Styles with Webpack part One\r\n\r\n- webpack 관련 코드를 package.json에 추가\r\n  - 이건 이해가 잘안됨...왜 이코드를 넣는지?\r\n  - 웹팩에서 env를 이해못해서 수동으로 가져온다?\r\n\r\n### rules\r\n\r\n- webpack이 이해할 수 있는 rule을 추가해준다\r\n- webpack.config.js에 추가\r\n- `loader`\r\n  - 코드 실행되면, 웹팩이 loader실행\r\n  - 웹팩에게 해당 파일을 어떻게 handle 해야하는지 알려줌\r\n  - 웹팩은 아무것도 할줄 모름.\r\n\r\n### 1. rules - test\r\n\r\n- `test`는 : 좋아 이 파일을 만나면, 이파일이 이런 파일인지 우선 알아봐의 의미\r\n- 정규식을 써야함\r\n- 밑의 test는, scss 확장자의 모든 파일을 찾아줄거임\r\n\r\n```\r\n  module : {\r\n    rules : [\r\n      {\r\n        test : /\\.(scss)$/,\r\n\r\n      }\r\n    ]\r\n  }\r\n```\r\n\r\n### 2. rules > module > use\r\n\r\n- 1. `scss` 파일을 찾는다 (test의 정규식)\r\n- 2. 해당 파일을 `css`로 변환한다\r\n- 3. css내 텍스트만 다 뽑는다\r\n- 4. 그걸 다시 css파일로 저장해준다\r\n\r\n### sass loader\r\n\r\n- sass 혹은 scss파일을 css파일로 바꿔줌\r\n\r\n### postcss loader\r\n\r\n- 호환성 문제를 해결해줌\r\n\r\n* 위에서 변형한 css파일을...인터넷 익스플로어에 뿌려주자(호환) 등등\r\n\r\n### autoprefixer\r\n\r\n- 코드를, 다양항 환경(크롬, 파이어폭스, 익스플로러)에서 호환될 수 있게 자동으로 변경해줌\r\n- `npm install autoprefixer`\r\n\r\n### 설치 설치 설치\r\n\r\n- node-sas 설치\r\n- css-loader\r\n- postcss-loader\r\n- sass-loader\r\n  모두 설치\r\n\r\n### postcss-loader에 autoprefixer 플러그인 추가\r\n\r\n- 이 강의는 너무 어려워서..다시 수강필요\r\n\r\n### npm run dev:assets\r\n\r\n- 해당 코드 돌리면, static 폴더 생성\r\n- 해당 폴더 안에, main.js와 main.css파일이 생성\r\n- 즉, webpack이 assets 안의 코드를 js와 css로 바꾸어주었다는것!\r\n\r\n# [4.3] ES6 with Webpack\r\n\r\n## JS파일을 웹팩으로 변환\r\n\r\n### rules에 js파일을 찾고, 변환하는 코드 추가\r\n\r\n- 아래 코드 추가\r\n- loader에 해당하는 `bable-loader` 설치\r\n\r\n```\r\n    rules: [\r\n      {\r\n        test: /\\.(js)$/,\r\n        use: [\r\n          {\r\n            loader: \"babel-loader\",\r\n          },\r\n        ],\r\n      },\r\n```\r\n\r\n### dev 웹팩이, 수정이 있을때마다 지켜보게함\r\n\r\n- 기존 dev:assets 코드에 `-w`추가\r\n\r\n* `watch`의미. 보고 있다가 변화가 있으면\r\n\r\n```\r\n\"dev:assets\": \"cross-env WEBPACK_ENV=development webpack -w\",\r\n```\r\n\r\n### 만들어진 static안의 css와 main.js를 pug에 연결\r\n\r\n- pug에 기존 css파일과 js파일 연결하듯이 코드 삽입\r\n\r\n```\r\nHTML\r\n    head\r\n\r\n        link(rel=\"stylesheet\", href=\"/static/styles.css\")\r\n    body\r\n        script(src=\"/static/main.js\")\r\n```\r\n\r\n### app.js에서 static을 바라볼 수 있도록 코드 삽입\r\n\r\n- app.use(\"/static\", express.static(\"static\"));\r\n\r\n### 서버 > dev 순차적 실행\r\n\r\n- 1. 서버 실행`npm run dev:server`\r\n- 2. 다른 terminal에서, `npm run dev:assets`(웹팩이겠지?) 실행\r\n     - 해당 코드를 실행함으로써, 웹팩이 static에 생성되고 해당 css등이 내 파일에 적용됨\r\n","excerpt":"4.1 Styles with Webpack part One webpack 관련 코드를 package.json에 추가 이건 이해가 잘안됨...왜 이코드를 넣는지? 웹팩에서 env를 이해못해서 수동으로 가져온다? rules webpack이 이해할 수 있…","fields":{"slug":"/TIL_37_210208/"},"frontmatter":{"date":"Feb 08, 2021","title":"TIL-210208","tags":["JS","webpack"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# To-do\r\n\r\n### 미들웨어 전부 추가\r\n- [x] helmet\r\n- [x] morgan\r\n- [x] cookie-parser\r\n- [x] body-parser\r\n\r\n\r\n### 로그인\r\n* sns 로그인 버튼 추가\r\n    - [x] facebook \r\n    - [x] google\r\n    - [ ] 카카오 \r\n* [ ] User authentication\r\n    - [x] localMiddleware에 임의로, `User.isAuthenticated : true`로 설정해둠\r\n* fontaswome을 코드에 삽입해야한다. 쓸수 있게\r\n* fontawsome에서 sns로그인 할 서비스들 이미지 가져오기\r\n* fontawsome 최신버전인, kit로 하는건 이미지가 안나타나서 시도 못함ㅠ\r\n* partial pug로 sns로그인 만들기\r\n* user authentication 은 아직\r\n\r\n\r\n### 회원가입\r\n- [ ] 화면 추가\r\n\r\n### 서버 설치, 연결\r\n- [ ] mongoDB, Mongoose 설치\r\n\r\n\r\n# 최종 output\r\n* 로그인, 회원가입 가능\r\n* 자유 게시판 필요\r\n* 게시글 및 코멘트 필요 ","excerpt":"To-do 미들웨어 전부 추가 helmet morgan cookie-parser body-parser 로그인 sns 로그인 버튼 추가 facebook  google 카카오  User authentication localMiddleware에 임의로, …","fields":{"slug":"/sangdami_210206/"},"frontmatter":{"date":"Feb 06, 2021","title":"상다미-210206","tags":["sangdami"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [3.12] Searching Videos\r\n\r\n### regular expression\r\n\r\n* string에서 특정 character를 가져와줌\r\n* https://regex101.com/\r\n\r\n\r\n# [4.0] Introduction to Webpack\r\n\r\n### Webpack\r\n* 내가 사용한 JS, scss 등을, 최종 JS, HTML 등이 이해할 수 있는 형태로 변형해주는 module\r\n* 더 공부해보자 => https://webpack.js.org/\r\n\r\n### Webpack 설치\r\n* 1. `npm install webpack webpack-cli`\r\n* 2. `webpack.config.js` 파일 생성\r\n* 3. `package.json`에 start를 아래와 같이 변경\r\n        * `dev:server` : backend를 키는 js\r\n        * `dev:asset` : front를 키는 js\r\n* 4. 아래 dir, file 생성 : webpack이 켜질때 찾는 dir들\r\n        * assets > js, sccss > main, styles.scsss\r\n* 5. `webpack.config.js`파일에 내용 넣기\r\n```\r\n    const path = require(\"path\");\r\n\r\n    const ENTRY_FILE = path.resolve(__dirname, \"assets\", \"js\", \"main.js\");\r\n    const OUTPUT_DIR = path.join(__dirname, \"static\");\r\n\r\n    const config = {\r\n    entry: ENTRY_FILE,\r\n    output: {\r\n        path: OUTPUT_DIR,\r\n        name: \"[name].[format]\",\r\n    },\r\n    };\r\n\r\n    module.exports = config;\r\n```","excerpt":"3.12 Searching Videos regular expression string에서 특정 character를 가져와줌 https://regex101.com/ 4.0 Introduction to Webpack Webpack 내가 사용한 JS, s…","fields":{"slug":"/TIL_36_210206/"},"frontmatter":{"date":"Feb 06, 2021","title":"TIL-210206","tags":["JS","regex","regularexpression"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [3.12] Searching Videos\r\n\r\n## [Self-code] DB에서 데이터를 Search 하는 기능 구현\r\n\r\n### 1. 검색한 값을 string화 시킨다\r\n\r\n- `$regex` 사용. 자세한 방법은 검색\r\n  - import escapeStringRegexp from \"escape-string-regexp\";\r\n  - $regex = escapeStringRegexp(searchingBy);\r\n\r\n### 2. or로, title이든 description이든 키워드를 가진 데이터를 찾는다\r\n\r\n- `$or` 사용\r\n- 상세 내용은 아래 코드 참고\r\n\r\n```\r\nexport const search = async (req, res) => {\r\n  const {\r\n    query: { term: searchingBy },\r\n  } = req;\r\n  const $regex = escapeStringRegexp(searchingBy);\r\n  try {\r\n    const videos = await Video.find({\r\n      $or: [({ title: { $regex } }, { description: { $regex } })],\r\n    });\r\n    res.render(\"search\", {\r\n      pageTitle: `Search ${videos.title}`,\r\n      searchingBy,\r\n      videos,\r\n    });\r\n  } catch {\r\n    res.redirect(routes.home);\r\n  }\r\n};\r\n```\r\n","excerpt":"3.12 Searching Videos Self-code DB에서 데이터를 Search 하는 기능 구현 1. 검색한 값을 string화 시킨다  사용. 자세한 방법은 검색 import escapeStringRegexp from \"escape-stri…","fields":{"slug":"/TIL_35_210205/"},"frontmatter":{"date":"Feb 05, 2021","title":"TIL-210205","tags":["JS","search"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [3.9] Editing a Video\r\n\r\n### mongoDB에 저장된 데이터를 수정하는 법\r\n* `db.findOneAndUpdate(query, update)`\r\n* 몽구스의 공식 문서를 참고하는 것이 도움 된다.\r\n    * https://mongoosejs.com/docs/api.html#find_find\r\n\r\n* try and catch 지속 사용. \r\n\r\n# [3.10] Deleting a Video\r\n\r\n### MongoDB에 저장된 데이터를 삭제하는 법\r\n* `db.findOneAndRemove(query)`\r\n* 몽구스 공식 문서 참고\r\n* 해당하는 db의 id를 url에서 가져오는 법\r\n```\r\nconst {\r\n    params : {id}\r\n} = req;\r\n```","excerpt":"3.9 Editing a Video mongoDB에 저장된 데이터를 수정하는 법  몽구스의 공식 문서를 참고하는 것이 도움 된다. https://mongoosejs.com/docs/api.html#find_find try and catch 지속 사용…","fields":{"slug":"/TIL_34_210204/"},"frontmatter":{"date":"Feb 04, 2021","title":"TIL-210204","tags":["JS","mongoose","findoneandupdate"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Youtube Clone Coding Challenge\r\n\r\n### add 페이지 만들기\r\n\r\n* sumbit된 정보를 post로 받아오기\r\n* 이때 .post는, 메인에서 하는게 아니라 해당하는 router에서 설정\r\n\r\n* post된 정보를 받아오는 법? \r\n    * `req.body`에 저장되어 있다\r\n```\r\nexport const addMovies = async (req, res) => {\r\n  const {\r\n    body: { title, synopsis, genre }\r\n  } = req;\r\n  const genres = genre.split(\",\");\r\n  const movie = { title, synopsis, genres };\r\n  await addMovie(movie);\r\n  res.redirect(\"/\");\r\n};\r\n```\r\n\r\n* input에 입력된 string을, `,`기준으로 분리하여 array화 하는 방법은?\r\n    * `.split(',')` 사용. \r\n\r\n* 보다 자세한 정보는, 노션 및 challenge에 제출한 코드 링크 확인\r\n\r\n\r\n### 기타\r\n* func에서 prameter안에 정보를 넘겨줄때, prameter이름을 일치하게 넘겨줘야 인식하는 듯\r\n* 이번에는, prameter가 object형태로 되어 있어서 그럴지도. object 안의 key명과 일치하게 넘겨줘야 인식\r\n```\r\nexport const addMovie = ({ title, synopsis, genres }) => {\r\n  if (typeof title !== \"string\" || typeof synopsis !== \"string\") {\r\n    throw Error(\"❌  title and synopsis should be strings  ❌\");\r\n  }\r\n  if (!genres instanceof Array) {\r\n    throw Error(\"❌  genres should be an array  ❌\");\r\n  }\r\n  const id = Math.floor(Math.random() * (title.length + Date.now()));\r\n  movies = [{ id, title, synopsis, genres }, ...movies];\r\n};\r\n```","excerpt":"Youtube Clone Coding Challenge add 페이지 만들기 sumbit된 정보를 post로 받아오기 이때 .post는, 메인에서 하는게 아니라 해당하는 router에서 설정 post된 정보를 받아오는 법?  에 저장되어 있다 inp…","fields":{"slug":"/TIL_33_210202/"},"frontmatter":{"date":"Feb 02, 2021","title":"TIL-210202","tags":["JS","split","challenge"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [3.6] Uploading and Creating a Video\r\n\r\n### Video 파일만 업로드 받기\r\n* `accept=\"video/*\"` 코드를 input에 추가\r\n\r\n### 비디오 업로드시, 해당 비디오의 dir를 저장/불러오기\r\n* 비디오를 직접 DB에 저장하면 너무 heavy해짐\r\n* `multer`이용해서, 비디오의 링크만 가져올수 있게 하자\r\n```\r\nMulter is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It is written on top of busboy for maximum efficiency.\r\n```\r\n\r\n### Multer\r\n* `Multer`는 이용자가 데이터를 upload드 할때, 이를 URL형태로 바꿔주고, 업로드하는 파일은 특정 dir에 저장하도록 해준다.\r\n* 따라서 우리가 view에 데이터를 뿌릴 때, multer가 만들어준 path(url) 정보를 끌어다가 쓰면 된다!\r\n* 즉, DB에는 multer가 생성한 데이터의 url 정보만을 저장한다! => Middleware다.\r\n\r\n\r\n### `Multer` 설치법\r\n* 참고 : https://www.npmjs.com/package/multer\r\n* 1.  `npm install multer`\r\n* 2. middleware파일에 import multer\r\n```\r\n    import multer from \"multer\";\r\n    const multerVideo = multer({dest : \"videos/\"});\r\n    export const uploadVideo = multerVideo.single(\"videoFile\");\r\n```\r\n* 3. multer를 사용할, 즉 이용자가 업로드할 form의 encoding type을 multer에 맞게 설정\r\n```\r\nform.upload(action=`/videos${routes.upload}`, method=\"post\", enctype=\"multipart/form-data\")\r\n```\r\n* 4. multer가 생성해주는 path정보를 받아서, Model(데이터 테이블?)의 schema에 맞게 넘겨준다. \r\n    * 이떄, `async`, `await`를 사용해서, Video에 schema정보가 fully 저장되어 넘어가도록 한다.\r\n```\r\nexport const postUpload = async (req, res) => {\r\n    const {\r\n        body : { title, description }, \r\n        file : { path }\r\n    } = req;\r\n    const newVideo =  await Video.create({\r\n        fileUrl : path,\r\n        title : title,\r\n        description : description\r\n    })    \r\n    // todo : upload and save. // creat new id for uploaded video\r\n    res.render(\"upload\", { pageTitle : \"Upload\" })\r\n    //res.redirect(routes.videoDetail(123123))\r\n}\r\n``` \r\n* 5. 넘겨준 정보를, model.find()로 불러와서 뿌린다.\r\n```\r\nexport const home = async (req, res) => {\r\n    try {\r\n        const videos = await Video.find({})\r\n        console.log(videos)\r\n        res.render(\"home\", { pageTitle: \"Home\", videos})\r\n    } catch {\r\n    console.log(error)\r\n    res.render(\"home\", { pageTitle: \"Home\", videos})\r\n    }\r\n}\r\n```\r\n\r\n# [3.7] Uploading and Creating a Video part Two\r\n* 비디오가 메인에서 재생이 안되는데, 되게해보자.\r\n* \"uploads\" dir에 저장했는데, 이걸 routing 하는게 없어서임\r\n* `app.use(\"/uploads\", express.static(\"uploads\"))` 사용\r\n    * 해당 경로로 왔을때, 현재 프로젝트 내의 uploads dir를 바라봐라는 것\r\n\r\n\r\n# [3.8] Getting Video by ID\r\n* 각 비디오를 클릭했을 때, 해당 비디오의 id를 가져와서, 해당 비디오의 detail 페이지에 보이도록 하기\r\n\r\n### 1. 클릭된 video의 id 가져오기\r\n* `req.params` 사용\r\n    * 우리가 routes에서 생성한 `:id`값을 url에서 찾아서 가져와줌\r\n\r\n### 2. 해당 id에 해당하는 테이블? 찾기\r\n* `.findById`로 params로 가져온 id값에 해당하는 model을 찾기\r\n* 찾아낸 모델(video)를 이제, 렌더링할 videoDetail페이지에 보내서, 해당 비디오 내용만 랜더링\r\n```\r\nexport const videoDetail = async (req, res) => {\r\n    const {\r\n        params : {id}\r\n    } = req;\r\n    try{\r\n        const video = await Video.findById(id)\r\n        res.render(\"videoDetail\", { pageTitle : \"Video Detail\", video})\r\n    } catch(error) {\r\n        res.redirect(routes.home)\r\n    }\r\n}\r\n```","excerpt":"3.6 Uploading and Creating a Video Video 파일만 업로드 받기  코드를 input에 추가 비디오 업로드시, 해당 비디오의 dir를 저장/불러오기 비디오를 직접 DB에 저장하면 너무 heavy해짐 이용해서, 비디오의 링크…","fields":{"slug":"/TIL_32_210201/"},"frontmatter":{"date":"Feb 01, 2021","title":"TIL-210201","tags":["JS","multer"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# 윈도우 셋업 [1.2] Chocolatey\r\n\r\n* Chocolatey 설치하면, powershell에서 명령문으로 프로그램 설치가능\r\n* 윈도우에서 번거로운 .exe 파일 받아서 실행할 필요 x\r\n\r\n# [3.0] MongoDB and Mongoose\r\n\r\n### MongoDB 설치\r\n* 윈도우에서는 powershell에서 chocolatey 사용해서 설치해야함\r\n* 윈도우에서는, path 경로에 mongodb를 추가해줘야함\r\n\r\n### Mongoose 설치\r\n* MongoDB는 C++로 생성된 DB고, 우리 코드는 JS기 때문에 서로 소통 불가\r\n* 서로 소통 가능하도록 하는 adpater를 설치해야함 \r\n* 그것이 바로 Maongoose.\r\n* 설치 : `npm install mongoose`\r\n\r\n### db.js에 Mongoose 연결\r\n* 1. mongoose import\r\n* 2. mongod 실행해서, port 확인하고, 해당 port로 mongoose.connect\r\n* 3. `db.once(opne)` 설정\r\n```\r\n        import mongoose from \"mongoose\";\r\n\r\n        mongoose.connect(\r\n            \"mongodb://localhost:27017/we-tube\",\r\n            {\r\n                useNewUrlParser : true,\r\n                userFindAndModify : false\r\n            }\r\n        );\r\n\r\n        const db = mongoose.connection;\r\n\r\n        const handleOpen = () => console.log(\"✅ DB connected!\");\r\n        const handleError = (error) => console.log(`Error in DB : ${error}`)\r\n\r\n\r\n        db.once(\"open\", handleOpen)\r\n        db.on(\"error\", handleError)\r\n```\r\n\r\n### dotenv 코드 삽입\r\n* 이유 : 내 db경로등 민감한 정보를 이용자가 코드로 볼 수 없도록 처리\r\n* 방법\r\n* 1. `.env`파일 생성    \r\n        * 여기에 민감정보들을 넣어두고, 다른 js파일에서 변수로 끌어다 사용\r\n        * .env파일을 `.gitignore`에 넣는 것 잊지 말기\r\n* 2. env 안 정보를 끌어올 파일에 import\r\n```\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n```\r\n* 3. `process.env.KEYNAME` 사용해서 env내 변수정보 가져오기\r\n\r\n\r\n# [3.3] Video Model \r\n* Model : data를 가져오는 것. data의 타입 등에 대한 문서를 작성해둔다. \r\n* 방법\r\n    * models 디렉토리 생성\r\n    * Video.js 생성\r\n    * 그 안에, model 변수 생성하여, data의 타입들을 작성해준다.\r\n    * 이걸 export해서, DB를 쓸 곳에 import 하면 끝\r\n    ```\r\n        import mongoose, { Mongoose } from \"mongoose\"\r\n\r\n        const VideoSchema = new mongoose.Schema({\r\n            title : {\r\n                type : String,\r\n                required : \"Title is required\"\r\n            },\r\n            description : String,\r\n            views : {\r\n                type : Number,\r\n                default : 0\r\n        })\r\n\r\n        const model = mongoose.model(\"Video\", VideoSchema);\r\n\r\n        export default model;\r\n    ```\r\n\r\n# [3.5] Home Controller Finished\r\n\r\n### 만든 model을 실제 controller에서 db로 넘기는법\r\n* 1. controller에서 해당하는 model을 import\r\n```\r\nimport Video from \"../models/Video\"\r\n```\r\n* 2. `async`, `await`, `try & catch` 사용\r\n        * js에서는 특정 코드가 끝날때 까지 기다려주지 않고 다음 코드를 동시 실행하기 떄문에, DB에 있는 정보를 가져올때까지 기다리도록 하는 `async`와 `await`사용.\r\n        * `try & catch`는 우선 이 코드를 실행해보고, 에러가 뜨면 catch로 실행되돌 하는 것. \r\n        * async 함수안에서 사용\r\n```\r\nexport const home = async (req, res) => {\r\n    try {\r\n        const videos = await Video.find({})\r\n        console.log(videos)\r\n        res.render(\"home\", { pageTitle: \"Home\", videos})\r\n    } catch {\r\n    console.log(error)\r\n    res.render(\"home\", { pageTitle: \"Home\", videos})\r\n    }\r\n}\r\n```\r\n","excerpt":"윈도우 셋업 1.2 Chocolatey Chocolatey 설치하면, powershell에서 명령문으로 프로그램 설치가능 윈도우에서 번거로운 .exe 파일 받아서 실행할 필요 x 3.0 MongoDB and Mongoose MongoDB 설치 윈도우…","fields":{"slug":"/TIL_31_210131/"},"frontmatter":{"date":"Jan 31, 2021","title":"TIL-210131","tags":["JS","chocolatey","MongoDB","dotenv","async await"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Sangdami 세팅\r\n\r\n### 코드 추가\r\n1. `pug` install\r\n    * npm install pug\r\n    * app.set(\"view engine\", \"pug\")\r\n    * views, layouts, partial dir 추가 \r\n\r\n\r\n2. `routes` 세팅\r\n    * url 변수화, import \r\n\r\n\r\n3. `controllers` 생성\r\n    * func 기능 모두 controller로 받아오기\r\n    * pug views 생성후, controller에서 get 후 pug view로 .render\r\n\r\n### 추가 정보\r\n* https://github.com/dobedh/sangdami","excerpt":"Sangdami 세팅 코드 추가  install npm install pug app.set(\"view engine\", \"pug\") views, layouts, partial dir 추가   세팅 url 변수화, import   생성 func 기능 모…","fields":{"slug":"/TIL_30_210130/"},"frontmatter":{"date":"Jan 30, 2021","title":"TIL-210130","tags":["js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Coding Challenge\r\n* notion > 샌드박스 링크\r\n* 오늘한 challenge 코드 업로드(비공개)","excerpt":"Coding Challenge notion > 샌드박스 링크 오늘한 challenge 코드 업로드(비공개)","fields":{"slug":"/TIL_29_210129/"},"frontmatter":{"date":"Jan 29, 2021","title":"TIL-210129","tags":["code challenge","js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# \r\n\r\n### url에 id값을 넘기는 법\r\n* routes에 단순 url을 기입하는것이 아니라, 아래와 같이 id가 있을 경우 변환하도록 설정\r\n* id 값이 있다면, 이걸 넘겨줘라! 라는 의미\r\n```\r\nconst routes {\r\n        videoDetail : (id) => {\r\n            if(id) {\r\n                return `/videos/${id}`\r\n            } else {\r\n                return VIDEO_DETAIL\r\n            }\r\n        }\r\n}\r\n```\r\n\r\n### post로 전달된 데이터 가져오는 법\r\n* controller에서 `req.body`에 담겨져 온 것을 확인하면 됨\r\n```\r\nconst {\r\n    body = {data1, data2}\r\n} = req;\r\n```\r\n\r\n### input 값을 필수로 기입하게 하는 법\r\n* input tag안에 `required = true`추가\r\n","excerpt":"url에 id값을 넘기는 법 routes에 단순 url을 기입하는것이 아니라, 아래와 같이 id가 있을 경우 변환하도록 설정 id 값이 있다면, 이걸 넘겨줘라! 라는 의미 post로 전달된 데이터 가져오는 법 controller에서 에 담겨져 온 것…","fields":{"slug":"/TIL_28_210128/"},"frontmatter":{"date":"Jan 28, 2021","title":"TIL-210128","tags":["js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [2.23] Join Controller \r\n\r\n### postJoin, getJoin\r\n* url이 get됐을때 페이지를 render하는 function과\r\n* 페이지에서 정보를 post할때 부르는 function을 분리 해줌\r\n\r\n### bodyParser\r\n* middleware로 심어뒀던 `bodyParser`가, 유저가 정보를 post 할때 쓰임\r\n* 유저가 post한 정보를 body object에 담아서 전달해줌\r\n\r\n\r\n### 1. post한 정보를 어떻게 route할것인가?\r\n* `.post`로 post된 정보를 가졍로 수 있음\r\n    * .get은 get된 정보를 받아오고\r\n    * .pos는 post된 정보를 받아 routing 시킴\r\n```\r\nglobalRouter.get(routes.join, getJoin);\r\nglobalRouter.post(routes.join, postJoin);\r\n```\r\n\r\n### 2. post된 유저 정보 가져오기\r\n* post로 라우팅된 유저 정보는, 이로 인해 호출된 func의 req에 담긴다.\r\n* 이 req의 body에 유저가 입력한 name, email, password 정보가 담김\r\n```\r\nexport const postJoin = (req, res) => {\r\n    const {\r\n        body : {name, email, password, password2}\r\n    } = req;\r\n    if (password !== password2) {\r\n        res.status(400);\r\n        res.render(\"Join\", { pageTitle : \"Join\" })\r\n    } else {\r\n        res.redirect(routes.home)\r\n    }\r\n}\r\n```\r\n\r\n### 3. join 후 홈으로 다시 보내기\r\n* `res.redirect(경로)` 사용\r\n\r\n\r\n# [2.24] Log In and User Profile Controller\r\n\r\n### User authentification Basic\r\n* 1. user정보를 middleware에 저장\r\n* 2. user 정보가 true인지 체크한다\r\n* 3. true일 경우, 해당 유저의 id 값을 가져온다.\r\n        * routes에 있는, userDetail 값을 아래와 같이 object화\r\n        * user에 id가 있는 경우, id값을 url로 보낸 값 return\r\n```\r\nconst routes = {\r\n            userDetail : (id) => {\r\n            if(id) {\r\n                return `/users/${id}`\r\n            } else {\r\n                return USERS_DETAIL\r\n            }\r\n        },\r\n}\r\n```","excerpt":"2.23 Join Controller postJoin, getJoin url이 get됐을때 페이지를 render하는 function과 페이지에서 정보를 post할때 부르는 function을 분리 해줌 bodyParser middleware로 심어뒀던…","fields":{"slug":"/TIL_27_210127/"},"frontmatter":{"date":"Jan 27, 2021","title":"TIL-210127","tags":["TIL","JS"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [2.20] Change Profile HTML\r\n* BEM 사용법\r\n* https://en.bem.info/methodology/naming-convention/#naming-rules\r\n\r\n# [2.21] Home Controller\r\n* 홈화면에서, DB에 있는 데이터들을 가져와 하나씩 보여주기\r\n* DB를 바로 구축하지말고 DB틀만 잡아두고, 어떻게 하는지 보자!\r\n\r\n### 1. db.js 파일 생성\r\n* 파일 안에, 배열을 생성하고, 배열안에 object 생성하여 데이터 넣기\r\n```\r\nexport const videos = [\r\n    {\r\n        id : 123123,\r\n        title : \"The Coder, dobe\",\r\n        description : \"wowowow\",\r\n        videoFile : \"https://archive.org/download/ElephantsDream/ed_hd.avi\",\r\n        creator : {\r\n            id : 123123,\r\n            name : \"dobedh\",\r\n            email : \"dobedh@gmail.com\"\r\n        }\r\n    }\r\n]\r\n```\r\n\r\n### 2. db파일을 controller에서 import\r\n* 1) 해당 db를 사용할 controller에 저장된 db 파일을 import\r\n* 2) import한 db 변수 값을, 넘겨줄 page에 변수값으로 전달\r\n```\r\nimport { videos } from \"../db\"\r\n\r\nexport const home = (req, res) => {\r\n    res.render(\"home\", { pageTitle: \"Home\", videos})\r\n}\r\n```\r\n\r\n### 3. pug page에서 DB 전달 받아 쓰기\r\n* `each item in videos`\r\n* item은 아무거나 넣어도 상관 없음\r\n* videos는 배열 명\r\n* 배열 내 모든 값들에 대해서 특정 함수를 실행시킬 수 있음\r\n\r\n\r\n# [2.22] Home Controller part Two\r\n* 비디오 리스트가 홈에 뜨는 것을 다시 분절화 시킨다(모듈처럼)\r\n* 요렇게, pug(html)의 일부를 분리해서 재사용하는 것을 `mixin`이라고 함. partial와 차이는..?\r\n    * DB를 가져와 담는 차이일까? 여튼 확인 필요\r\n\r\n### 1. view > mixins 생성\r\n* 안에 videoBlock.js 생성\r\n\r\n### 2. videoBlock.js 안에 비어있는 object를 포함한 func 생성\r\n* 1) mixin으로 우선 함수를 만든다\r\n* 2) 함수 안에 비어있는 object를 생성한다\r\n* 3) 해당 object안에 넣을 변수 값을 설정한다\r\n```\r\nmixin videoBlock(video = {})\r\n    .videoBlock\r\n        video.videoBlock__thumbnail(src=video.videoFile, controls=true)\r\n        h4.videoBlock__title=video.title\r\n        h6.videoBlock__views=video.views\r\n```\r\n\r\n### 3. videoBlock mixin을 붙일 pug에 inclue 시킨다\r\n* 1) `include` 사용\r\n* 2) mixin의 object안에 key 와 value를 추가\r\n        * `+videoBlock`사용   \r\n        * object안에 값들을 +한다는 의미겠지?\r\nextends layouts/main\r\ninclude mixins/videoBlock\r\n\r\nblock content\r\n    .videos\r\n        each item in videos\r\n            +videoBlock( {\r\n                title: item.title,\r\n                views: item.description,\r\n                videoFile: item.videoFile\r\n            })\r\n\r\n# 기타 \r\n* video tag => 비디오를 재생할 수 있게 해준다. \r\n* controls=true로 설정하면 재생버튼등이 생김\r\n    ```\r\n    video.videoBlock__thumbnail(src=video.videoFile, controls=true)\r\n    ```\r\n* textarea => 넓은 input\r\n","excerpt":"2.20 Change Profile HTML BEM 사용법 https://en.bem.info/methodology/naming-convention/#naming-rules 2.21 Home Controller 홈화면에서, DB에 있는 데이터들을 가…","fields":{"slug":"/TIL_26_210126/"},"frontmatter":{"date":"Jan 26, 2021","title":"TIL-210126","tags":["TIL","JS"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [2.18] Search Controller \r\n\r\n## 1 .Form으로 데이터 보내기\r\n### form\r\n* `action` : form에 데이터가 입력되었을때, 보낼 url, 액션 등\r\n* `method` : `get`은 form에 input된 데이터를 url값으로 넘김. post는 나중에\r\n\r\n### input\r\n* `placeholder` : default로 쳐져있는 텍스트\r\n* `type` : 넣을 타입\r\n* `name` : input된 데이터를 담을 변수 명\r\n\r\n### methoed = \"get\"\r\n* input에 넘겨진 value를 url에 \r\n\r\n\r\n## 2. req.query로 데이터 받기\r\n* search를 호출하는 controller funciton에서, `req.qeury`로 form에서 get된 데이터를 가져옴\r\n* 아래 방식으로 가져오기 가능\r\n```\r\n    --기존\r\n    const serachingBy = req.query.term\r\n\r\n    --최신\r\n    const {query : {\r\n            term: searchingBy\r\n    }} = req.\r\n```\r\n\r\n# [2.19] Join : Log In HTML\r\n\r\n### 1. login, join 페이지에 form 추가\r\n* input의 type을 eamil, password등으로 설정 가능\r\n* action은 login 페이지로 이동하게\r\n\r\n### 2. social login 버튼\r\n* partial에 socialloin 버튼 추가. \r\n* login, join pug에 include로 가져오기\r\n\r\n### 기타\r\n* `|`을 사용하면 pug에서, 제일 앞글자를 element가 아니라 text로 인식해줌\r\n* `BEM`이 뭐지? `social--login`이런식으로 class name부여하는 방식인듯\r\n* 카카오 클론 수업에서 다뤘다니까 찾아볼 필요\r\n* backend할때는 backend만, front할때는 front만. 순차적으로\r\n\r\n### Challenge\r\n* 노션에 오늘의 challenge 코드 정리해둠","excerpt":"2.18 Search Controller 1 .Form으로 데이터 보내기 form  : form에 데이터가 입력되었을때, 보낼 url, 액션 등  : 은 form에 input된 데이터를 url값으로 넘김. post는 나중에 input  : defau…","fields":{"slug":"/TIL_25_210125/"},"frontmatter":{"date":"Jan 25, 2021","title":"TIL-210125","tags":["TIL","JS"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [2.12] recap\r\n\r\n* `coockie-parser` : 사용자 인증할때 쓰는 미들웨어\r\n* `body parser` : 사용자가 보낸 정보를 검증하는 미들웨어\r\n* `morgan` : log를 남겨주는 미들웨어\r\n\r\n# [2.13] Installing Pug\r\n\r\n* `Pug`란?\r\n    * html 코드를 훨씬 깔금하게 만들어주는 템플릿\r\n    * https://www.npmjs.com/package/pug\r\n* pug 초반 세팅\r\n    * 1) `npm install pug`\r\n    * 2) `app.set(\"view engine\", \"pug\")`\r\n        * view 엔진으로 pug 확장자를 보겠다는 것\r\n    * 3) `views` 디렉토리 생성     \r\n        * view를 렌더링 할때, express는 `views` 디렉토리를 봄. \r\n    * 4) 해당 디렉토리에, pug확장자 파일 생성\r\n    * 5) controller(func) 파일에서, `res.render`로 views 안의 pug파일 가져옴\r\n\r\n# [2.14] Layouts with Pug\r\n* pug layout 파일을 생성해서, 전체 html 파일들에 적용될 layout을 세팅하고 불러와서 씀\r\n* layout관련 디렉토리 생성해서, main.pug 생성\r\n* 해당 파일에서, 모든 파일에 적용될 레이아웃 코드 작성\r\n    * block content 부분에, 각 파일의 코드가 삽입 될 예정\r\n```\r\nDOCTYPE\r\n    html\r\nHTML \r\n    title wetube\r\n    head\r\n    body\r\n        header  \r\n            h2  Wetube\r\n        main\r\n            block content\r\n\r\n    footer \r\n        span &copy; dobedh\r\n```\r\n* 각 파일에, `extends layouts/main` 코드 상단에 작성\r\n* `block contetn`를 쓰고, 하위에 이제 해당 페이지에 넣을 코드 작성\r\n* 이렇게 하면, main.pug에 작성해둔 레이아웃 유지된 상태에서 block content에 각 페이지의 내용만 삽입됨.\r\n* 와우\r\n\r\n\r\n# [2.15] Partials with Pug \r\n* footer, header 등 partially 들어가는 것들을 따로 템플릿화 해서 저장 가능\r\n* 위 main layout처럼 별도 파일 생성\r\n* 해당 파일의 내용을, `include /파일경로` 코드 통해서 불러옴\r\n```\r\nbody\r\n    include ../partials/header\r\n    main\r\n        block content\r\n    include ../partials/footer\r\n```\r\n\r\n# [2.16] local Middelware\r\n* 다른 local 파일에 있는 코드들을 pug view에 끌어다 쓰는 법\r\n* `res.locals` 이용해서, pug에서 쓸수 있게 코드들을 내보내줌\r\n\r\n### 방법\r\n* 1) 로컬 미드웨어 추가 : `app.use(localMiddleware)`\r\n* 2) 로컬 미드웨어 divide & conquere : localmiddleware.js\r\n* 3) 해당 파일에서, `res.locals.변수명` 으로 내보낼 값들 설정\r\n* 4) 내보낸 값들을 pug에서 불러와서 쓰면 됨\r\n* localMiddleware.js\r\n```\r\n    import routes from \"./routes\";\r\n\r\n    export const localMiddelware = (req, res, next) => {\r\n        res.locals.siteName = \"Wetube\";\r\n        res.locals.routes = routes\r\n        next()\r\n    }\r\n```\r\n* header.pug\r\n```\r\nheader.header\r\n    .header_column\r\n        i.fab.fa-youtube\r\n    .header_column\r\n        ul \r\n            li\r\n                a(href=routes.join) join\r\n            li\r\n                a(href=routes.login) login\r\n```\r\n\r\n# [2.17] Template Variables in Pug\r\n* pug의 layout 템플릿에서 변수를 설정하고, 각 pug 페이지별 이 변수 값을 주는 방법\r\n* 즉, 각 pug별 고유한 변수 값을 전달하는 방법\r\n* controller에서, 해당 pug page를 render할때, 변수 값을 전달한다\r\n* 코드 \r\n```\r\n    ---controllers.js\r\n    export const home = (req, res) => res.render(\"Home\", { pageTitle: \"Home\" })\r\n    export const home = (req, res) => res.render(\"Home\", { pageTitle: \"Home\" })\r\n\r\n    ---main.pug\r\n    HTML \r\n        head\r\n            link(rel=\"stylesheet\", href=\"https://use.fontawesome.com/releases/v5.15.2/css/all.css\", integrity=\"sha384-vSIIfh2YWi9wW0r9iZe7RJPrKwp6bG+s9QZMoITbCckVJqGCCRhc+ccxNcdpHuYu\", crossorigin=\"anonymous\")\r\n        title #{pageTitle} | #{siteName}    \r\n```\r\n","excerpt":"2.12 recap  : 사용자 인증할때 쓰는 미들웨어  : 사용자가 보낸 정보를 검증하는 미들웨어  : log를 남겨주는 미들웨어 2.13 Installing Pug 란? html 코드를 훨씬 깔금하게 만들어주는 템플릿 https://www.npm…","fields":{"slug":"/TIL_24_210124/"},"frontmatter":{"date":"Jan 24, 2021","title":"TIL-210124","tags":["js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Project Setting - 복습\r\n* 1. 프로젝트 폴더 생성\r\n* 2. `npm init` \r\n        * 해당 프로젝트에 대한 정보를 입력(author, project name, liscence... etc)\r\n* 3. `npm install express`\r\n        * expressJS 사용할 수 있도록 express 설치\r\n        * node modules 설치되어, 기존 패키지들 활용 가능\r\n* 4. `README.md 생성`\r\n        * 해당 프로젝트 설명(github에서)\r\n* 5. `.gitignore` 생성\r\n        * github 업로드시 업로드 안하고 무시할 코드/파일들 저장\r\n* 6. git remote add origin `github저장소 url`\r\n        * github과 로컬의 해당 프로젝트 폴더를 연결\r\n* 7. 기타 파일들 생성후, git add,commit 및 push","excerpt":"Project Setting - 복습 프로젝트 폴더 생성   해당 프로젝트에 대한 정보를 입력(author, project name, liscence... etc)  expressJS 사용할 수 있도록 express 설치 node modules 설치…","fields":{"slug":"/TIL_23_210123/"},"frontmatter":{"date":"Jan 23, 2021","title":"TIL-210123","tags":["project_setting","sangdami"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n\r\n# [2.11] MVC Pattern part(3)\r\n\r\n### URL 들만 따로 나누기\r\n* 1) routes 폴더를 만들고, 그 안에 URL들을 모두 변수화 시킨다.\r\n* 2) 변수화된 routes 들을 object화 해서 불러 쓸수 있게 한다. \r\n* 3) 그리고 그 routes 코드를 다른 파일들에서 import 한다\r\n* 결과적으로, 직접 URL을 쓰거나 기억할 필요 없이, routes 안의 변수를 불러와 URL생성 가능!\r\n```\r\n    // home\r\n    const HOME = \"/\"cd \r\n    const JOIN = \"/join\"\r\n\r\n    //user \r\n    const USERS = \"/users\"\r\n    const USERS_DETAIL = \"/:id\"\r\n\r\n\r\n    const routes = {\r\n        home : HOME,\r\n        join : JOIN,\r\n        users : USERS,\r\n        userDetail : USERS_DETAIL,\r\n    };\r\n\r\n    export default routes;\r\n\r\n```\r\n\r\n\r\n# [2.11] MVC Pattern part(4)\r\n\r\n### 1. Controller\r\n* function을 따로 분리하여 저장한다.\r\n* 보통 각 프로젝트에서, 모델들 마다 controller 파일을 생성함 ","excerpt":"2.11 MVC Pattern part(3) URL 들만 따로 나누기 routes 폴더를 만들고, 그 안에 URL들을 모두 변수화 시킨다. 변수화된 routes 들을 object화 해서 불러 쓸수 있게 한다.  그리고 그 routes 코드를 다른 파…","fields":{"slug":"/TIL_22_210122/"},"frontmatter":{"date":"Jan 22, 2021","title":"TIL-210122","tags":["JS","nodejs","youtubeclone"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [2.8] Express Core : Routing\r\n\r\n## js 파일을 다른 js파일에서 가져오기\r\n* import 들은 node_modules에서 코드들을 가져옴\r\n* 내가 js파일을 만들어서, js파일의 코드를 불러올 수도 있음\r\n\r\n### 1. export하려는 파일에 export 추가\r\n* app.js 파일\r\n```\r\nexport default app;\r\n```\r\n\r\n### 2. 가져올 파일에 import 추가\r\n\r\n* init.js 파일\r\n```\r\nimport app from \"./app\"\r\n```\r\n\r\n\r\n### 3. package.json에 호출할 js파일 명 변경\r\n* 기존에 index.js 불러오게 되있던걸, 새롭게 변경한걸로 수정\r\n\r\n\r\n### 4. Port에 접속하는 코드 재작성(init.js파일에)\r\n* `app.listen()` 요게 특정 포트로 접속했을떄, 이 함수를 실행해라는 의미.\r\n* 특정 port가 열려 있도록도 하는듯. 위 코드가 없으면 호출되지 않음. \r\n```\r\nconst PORT = 4000;\r\nconst handleListening = () => console.log(`Listening on https://localhost:${PORT}`)\r\napp.listen(PORT, handleListening)\r\n```\r\n\r\n\r\n## Router 사용\r\n* route들을 더 복잡하게 쪼개서 사용할때 사용\r\n* 예 : /user/changepassword, /user/login .... so on\r\n\r\n### 1.router로 사용할 js 파일 생성\r\n* 예 : router.js\r\n\r\n### 2. router 파일 내, 아래 코드 작성\r\n* 1) `const app = express()` 가 아님\r\n    * router : `const userRouter = express.Router()`\r\n    * `express.Router()`는 메인 app이 아니라, mini app을 호출하는 느낌임 \r\n    * `express()`는 main app을 호출하는 느낌\r\n    * 참고 : https://stackoverflow.com/questions/28305120/differences-between-express-router-and-app-get#:~:text=When%20var%20app%20%3D%20express(),different%20mini%20app%20is%20returned.\r\n* 2) route 안에 함수를 바로 사용\r\n    * 기존에는 함수명만 적어서 호출했다면, 여기선 함수를 바로 넣고 사용\r\n* 3) export default vs export\r\n    * export default는 해당 js파일 전체를 export 하는것\r\n    * export 는 해당 하는 변수만 export하는것\r\n```\r\n    import express from \"express\"\r\n\r\n    export const userRouter = express.Router();\r\n\r\n    userRouter.get(\"/\", (req, res) => res.send(\"Hello User!\"));\r\n    userRouter.get(\"/edit\", (req, res) => res.send(\"edit your page\"));\r\n    userRouter.get(\"/password\", (req, res) => res.send(\"Change your password\"));\r\n```\r\n\r\n\r\n### 3. router를 호출할 파일에 import 및 use\r\n* 1) import : `import { userRouter } from \"./router\";`\r\n    * 여기서 `{}`로 되있는 이유는, 해당 파일을 모두 export시킨게 아니라 `{}`안의 변수만 export했기때문\r\n* 2) use : `app.use(\"/user\", userRouter)`\r\n* user 페이지가, router.js의 `/` 페이지가 된다.\r\n\r\n\r\n# [2.9] MVC Pattern part(1)\r\n\r\n### 1. 의미\r\n* `M`odel : data\r\n* `V`iew : how deose the data looks like\r\n* `C`ontrol : function that looks for data\r\n\r\n* 위 세개를 코드에서 다 분리시켜야한다!\r\n\r\n### 2. 일단, function과 url이 섞이지 않게 다 나눈다.\r\n* 페이지(url)별로 router를 만들어서, 해당 router로 페이지 호출하게 만듬\r\n* 예 - glolbalRouter.js : \"/\"에 접속했을 때 호출되는 라우터\r\n* 예 - userRouter.js : \"/user\"에 접속했을 때 호출되는 라우터\r\n* 예 - videoRouter.js : \"/vidoe\"에 접속했을떄 호출되는 라우터\r\n\r\n","excerpt":"2.8 Express Core : Routing js 파일을 다른 js파일에서 가져오기 import 들은 node_modules에서 코드들을 가져옴 내가 js파일을 만들어서, js파일의 코드를 불러올 수도 있음 1. export하려는 파일에 expo…","fields":{"slug":"/TIL_21_210121/"},"frontmatter":{"date":"Jan 21, 2021","title":"TIL-210121","tags":["JS","nodejs","youtubeclone"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [2.6] Express Core: Middlewares\r\n\r\n### Middleware 의미\r\n* 유저의 요청, 액션과 서버/브라우저의 액션 사이의 무언가\r\n* express에서 모든 함수는 middleware가 될 수 있음\r\n* 서버-유저 간의 플로우 예시\r\n    * 1) 유저의 브라우저 접속, 요청\r\n    * 2) index.js로 와서 서버 실행(express)\r\n    * 3) app 라우터를 보고 함수 실행 \r\n    * 4) 최종 response\r\n* middleware 예시\r\n```\r\nconst handleHome = (req, res) => res.send(\"Hi from home! dobedh\");\r\nconst betweenHome = () => console.log(\"I'm in between\")\r\napp.get(\"/\", betweenHome, handleHome) \r\n```\r\n\r\n### 2. Middleware의 형태\r\n* Middleware가 되는 function 들은 `next`를 갖는다\r\n* function의 parameter로 `req`, `res`, `next`를 갖는것\r\n* 최종 response가 되는 것들(즉, middleware가 아닌 것들)은 next를 안줌\r\n```\r\nconst handleHome = (req, res) => res.send(\"Hi from home! dobedh\");\r\nconst handleProfile = (req, res, next) => {\r\n        console.log(\"in Between\")\r\n        next()\r\n}\r\napp.get(\"/\", betweenHome, handleHome) \r\n```\r\n\r\n### 2.1 Middleware를 모든 라우터에 추가(globally)\r\n* 위 예시에서는, \"/\" 경로(라우터)에만 middleware추가한것\r\n* 웹의 모든 경로에 추가하려면 아래 코드 사용\r\n* `app.use(betweeHome)`\r\n* 위치는, router들 작성 전. 그래야 모든 router들에 적용됨\r\n\r\n### 3. Middleware의 기능\r\n* 중간에서 일어나는 모든 작업들 가능\r\n* 유저가 로그인할때 로그인 정보 확인\r\n* 웹에서 발생하는 모든 로그를 중간에서 남기는 일\r\n* 데이터, 정보를 중간에서 가져와서 확인하는 일\r\n\r\n\r\n# [2.7] Express core : Middlewares -part(2)\r\n\r\n### 1. Middleware 예시 : morgan\r\n* 유저의 log를 남겨줌\r\n* http://expressjs.com/en/resources/middleware/morgan.html\r\n\r\n#### 2. middleware 예시 : helmet\r\n* 보안을 위한 미들웨어\r\n* https://github.com/helmetjs/helmet\r\n\r\n### 3. middleware로 연결을 끊을 수 있음\r\n* next 함수를 실행하지 않고, res.send를 통해서 \r\n```\r\n    const notHappening = (req, res, next) => {\r\n        res.send(\"not happening\")\r\n    }\r\n\r\n    app.get(\"/\", notHappening, handdleHome)\r\n```\r\n\r\n### 4. 예시 : body parser\r\n* 유저가 보낸 정보(form)를 서버가 이해하도록 돕는 것\r\n* 이건 텍스트 정보, 이건 html 정보, 이건 이런 형태의 정보라고 서버에게 알려주는 것\r\n* json과 html 파일 읽을 수 있게 middleware로 추가\r\n```\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({extended:true}));\r\n```\r\n* http://expressjs.com/en/resources/middleware/body-parser.html\r\n\r\n### 5. 예시 : cookie parser\r\n* 유저로 부터 받은 cookie 정보를 서버가 이해하도록 돕는 것\r\n```\r\napp.use(cookieParser());\r\n```\r\n* https://www.npmjs.com/package/cookie-parser\r\n\r\n\r\n# Challenge \r\nhttps://codesandbox.io/s/empty-blueprint-forked-8zuni?file=/index.html\r\n\r\n","excerpt":"2.6 Express Core: Middlewares Middleware 의미 유저의 요청, 액션과 서버/브라우저의 액션 사이의 무언가 express에서 모든 함수는 middleware가 될 수 있음 서버-유저 간의 플로우 예시 유저의 브라우저 접속…","fields":{"slug":"/TIL_20_210120/"},"frontmatter":{"date":"Jan 20, 2021","title":"TIL-210120","tags":["JS","nodejs","youtubeclone"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Handling Routes with Express\r\n\r\n### 1. 전체적인 서버 작동 flow 요약\r\n* 1) 서버 생성\r\n    * express로 \r\n```\r\nconst express = require('express') // 1. import express \r\nconst app = express() // 2. excecute express\r\nconst PORT = 4000\r\n```\r\n* 2) Router 생성\r\n    * get, request 할수 있게, 접속시 반응하는 라우터\r\n```\r\napp.get(\"/\", handleHome)\r\napp.get(\"/profile\", handleProfile)\r\n```\r\n* 3) response \r\n    * Router에서 실행한 response를 실행\r\n    * 이 response에 html, css 등을 담아서 response로 보내면 웹사이트가 됨!\r\n\r\n### 2. 중요한 두개의 인터넷 작동 개념(브라우저에서?)\r\n* 1) `GET` \r\n    * 웹사이트 접속시, 브라우저가 GET method를 실행함.  \r\n    * 정보를 받아옴\r\n* 2) `POST` \r\n    * 웹사이트 로그인 등등하게 되면, POSt method를 실행함. \r\n    * 브라우저가 정보를 전달함\r\n \r\n* 요런게 웹사이트, 브라우저, http가 작동하는 방식\r\n\r\n### 3. request object vs response object\r\n* app(브라우저)에 접속할떄, 정보를 request 하게 되고\r\n* 브라우저는 이에 대해 response를 주게 된다. (뇌피셜)\r\n\r\n### 4. Get 코드 예시\r\n* `app.get()`사용\r\n* `app.get(접근경로, 실행함수)` 형태\r\n* 아래 코드에서는, \"/\"경로에 접속했을때 handleHome 실행\r\n\r\n```\r\n    function handleHome(req, res) {\r\n        console.log(req)\r\n        res.send(\"Hi from home!\")\r\n    }\r\n\r\n    app.get(\"/\", handleHome)\r\n```\r\n\r\n### 위 예제 풀 코드 \r\n```\r\n    const express = require('express') // 1. import express \r\n    const app = express() // 2. excecute express\r\n\r\n    const PORT = 4000\r\n\r\n    const handleListening = () => {\r\n    console.log(`Listening on : http://localhost:${PORT}`)\r\n    }\r\n\r\n    function handleHome(req, res) {\r\n        console.log(req)\r\n        res.send(\"Hi from home!\")\r\n    }\r\n\r\n    function handleProfile(req, res) {\r\n        res.send(\"You are seeing my profile\")\r\n    }\r\n\r\n    app.get(\"/\", handleHome) // app에 접근하려고 정보를 req할때 실행되는구나\r\n    app.get(\"/profile\", handleProfile)\r\n\r\n    app.listen(PORT, handleListening);\r\n```\r\n\r\n\r\n----\r\n\r\n## [2.5] ES6 on NodeJS using Babel\r\n\r\n### 1. Babel 뜻\r\n* 최신 js를 쓸 수 있게 해주는 툴\r\n* 최신의 js를 예전 버전의 js 코드로 변환해줌\r\n\r\n\r\n### 2. Babel node install\r\n* 1) 프로젝트 디렉토리에서 babel 설치\r\n    * npm install @babel/node\r\n* 2) babel홈피에서 babel env 버전 설치(최신이지만 실험버전 아)\r\n\r\n### 3. `.babelrc` 생성\r\n* 1) babel 실행되기 전에, babel은 우선 .babelrc를 훑는다\r\n* 2) 거기 우리가 설정해둔 preset들을 읽는다\r\n* 3) 가이드대로 bablerc내 코드 설정\r\n\r\n### 4. import 코드로 변환\r\n* index.js에서, 예전 방식으로 되어있던 코드를 변환\r\n    * 새코드 : import express from \"express\";\r\n    * 기존 코드 : const express = require('express')\r\n\r\n### 4. npm install @babel/core \r\n\r\n### 5. package.json 수정\r\n* 기존 \"start\"를 `babel-node index.js`로 수정\r\n* babel이 우리 코드를 읽어주도록 설정하는 것(그래야 import를 읽지!)\r\n\r\n\r\n### Arrow function \r\n\r\n* function의 ES6방식 : const로 함수 생성 가능\r\n* 기존\r\n```\r\nfunction handleProfile(req, res) {\r\n    res.send(\"You are seeing my profile\")\r\n}\r\n```\r\n* ES6\r\n```\r\nconst handleProfile = (req, res) => res.send(\"You are seeing my profile\");\r\n```\r\n\r\n\r\n### devDependency로 pacakage 설치하는 법\r\n* `devDependency`란? \r\n    * 프로젝트 실행할떄 필요한게 아니라, 개발자가 개발할떄 편하도록 하는걸 설치 하는 것!\r\n* `dependency`\r\n    * 내 프로젝트 실행과 관련하여 설치되는것 \r\n* 설치방법 : npm install 끝에 `-D`를 붙여준다\r\n```\r\nnpm install nodemon -D\r\n```\r\n* 설치하면, package.json에 devDependecy object가 생긴다\r\n\r\n\r\n\r\n\r\n### nodemon 으로 서버 자동 갱신\r\n* `nodemon` : 서버에 업데이트 사항이 자동 반영되도록 하는것(계속 껐다 킬 필요 없이)\r\n    * 1) npm install nodemon -D\r\n    * 2) package.json에 devDependency 생성 확인\r\n    * 3) scrpit의 start 앞에 nodemon 넣어주기\r\n        ```\r\n        \"start\" : \"nodemon --exec bable-node index.js\"\r\n        ```\r\n","excerpt":"Handling Routes with Express 1. 전체적인 서버 작동 flow 요약 서버 생성 express로  Router 생성 get, request 할수 있게, 접속시 반응하는 라우터 response  Router에서 실행한 respon…","fields":{"slug":"/TIL_19_210119/"},"frontmatter":{"date":"Jan 19, 2021","title":"TIL-210119","tags":["JS","nodejs","youtubeclone"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# NodeJS Theory\r\n\r\n## Who uses NodeJS\r\n\r\n* Paypal\r\n* Uber\r\n* Netflix\r\n\r\n## 1. installing NodeJS\r\n* mac일땐 brew였는데..\r\n* window는 사이트가서 직접 설치\r\n\r\n\r\n## 2. Express JS\r\n* NodeJS에서 작동하는 프레임워크\r\n    * `프레임워크`? : 이미 많은 코드로 만들어져있어서, 쉽게 서버 구축 등에 활용가능한 틀\r\n\r\n## 3. `npm` : Node Package Manager\r\n* 의미 : \r\n    * nodeJS와 관련된 모두가 각자의 pacakage를 올려둠.\r\n    * 그래서 우리가 다운로드 받아서 쓸 수 있음. 이걸 업데이트 하고. \r\n    * 여기서 우리가 직접 package를 만들수도 있고. \r\n    * 업데이트할 수 있다!!\r\n* 설치 : NodeJS 설치할때 자동으로 설치됨\r\n\r\n## 4. npm으로 프로젝트 시작하기\r\n* 1) `npm init`\r\n    * package name : 우리의 웹사이트가 package가 됨\r\n    * 나오는 정보들 넣음\r\n* 2) `package.json`이 생성됨\r\n* 3-1) `증요` package.json이 있는 디렉토리에서 npm을 실행해야함\r\n    * package.json 이 없는곳에서 실행하면, 이해를 못해서 package.json을 우리 프로젝트가 아닌 다른곳에 또 만들어버림\r\n* 3-2) `npm install express`\r\n    * `package-lock.json` 생성\r\n    * `node_modules` 생성 : npm으로 다운로드 된 것\r\n        * js파일에서 코드가 실행 될 때, 필요한 것들은 node_modules에서 찾아서 사용\r\n\r\n### 4.1 package.json 좋은점!\r\n* 협업할 때, 협업자에게 `package.json` 파일과 `index.js 파일만 넘기면됨\r\n* 협업자가 두 파일 받은 후, npm install 하면 package.json에 있는 정보를 읽어서 필요한 것들(node_modules) 자동 다운로드\r\n\r\n\r\n## 5. git init\r\n* 새로운 git repository를 만들고, git command를 활용하는데 필요한 메타데이터들을 받음..?\r\n* 상세 내용 : https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-init#:~:text=The%20git%20init%20command%20creates,run%20in%20a%20new%20project.\r\n\r\n\r\n## 6. github에서 repository 생성\r\n\r\n### 6.1 github에 commit 하지 않을 파일들 제외\r\n* 1) `.gitignore` 파일 생성\r\n* 2) 해당 파일에, commit 안할 파일들 리스트 작성 (내가 작성할 코드 외)\r\n    * node_modules\r\n    * package-lock.json (security를 위한 파일)\r\n    * .gitignore 검색해서 주로 제외하는 것들 copy-paste\r\n\r\n### 6.2 README.md 생성\r\n* 해당 프로젝트를 설명\r\n\r\n## 7. git repository와 local의 프로젝트 연결 - commit/push \r\n* 1) git remote add origin `git repository 주소(https://github.com/dobedh/wetube)`\r\n* 2) `git add .`\r\n* 3) `git commit -m \"commit message\"`\r\n* 4) `git push origin master`\r\n=> repository에 프로젝트가 commit 됨\r\n\r\n\r\n## 8. express 코드 삽입\r\n* 1) express에서 설치 코드를 index.js로 설치(express웹의 guide 참고)\r\n```\r\n    var express = require('express')\r\n    var app = express()\r\n```\r\n* 2) 위의 `require`는 다른 모듈을 어디선가 가져오는 것\r\n    * 위코드에서는, express라는 파일을 내 dir에서 찾으려고 함\r\n    * 만약 못찾으면 내 node_modules에서 찾으려고 함. (node module에 있음)\r\n* 3) express를 실행해서 app을 만듦\r\n* 4) `app.listen(4000)`로 4000포트 바라보도록 설정 \r\n* 5) 콘솔창에서 `node index.js` 입력하여 서버 실행\r\n\r\n## 9. package.json에 명령어 몰아넣기\r\n* `package.json`에 아래코드 넣어서, `node index.js`를 간소화 시킬 수 있음\r\n* `pacakage.json`에 우리가 필요한걸 다 넣는거네\r\n```\r\n  \"scripts\":{\r\n    \"start\" : \"node index.js\"\r\n  }\r\n```\r\n* 와우...그래서 매번 `npm start`를 했던거구나..\r\n\r\n## 10. callback 넣기\r\n* 아래와 같이 listen에 함수 추가하여 `callback 함수` 실행\r\n```\r\n    const handleListening = () => {\r\n    console.log('Listening on : http://localhost:4000')\r\n    }\r\n\r\n    app.listen(4000, handleListening);\r\n```\r\n\r\n\r\n## 기타\r\n* node 명령어로 프로젝트 내 파일을 실행","excerpt":"NodeJS Theory Who uses NodeJS Paypal Uber Netflix 1. installing NodeJS mac일땐 brew였는데.. window는 사이트가서 직접 설치 2. Express JS NodeJS에서 작동하는 프레임워…","fields":{"slug":"/TIL_18_210118/"},"frontmatter":{"date":"Jan 18, 2021","title":"TIL-210118","tags":["JS","nodejs","youtubeclone"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n## nomad Coder - challenge(8)\r\n\r\n\r\n### appendChild()\r\n* 동일한 node를 두번 appendChild하면, 해당 node가 두개가 생성되는 것이 아니라, 처음 append한 node의 위치가 두번째 append한 위치로 업데이트 된다.\r\n* 두번 이상 반복해서 같은 node를 넣을 수 없다!\r\n```\r\n    const body = document.querySelector(\"body\");\r\n\r\n    const titleText = [\"Pending\", \"Finished\"];\r\n\r\n    function boardAdd() {\r\n    const pending = document.createElement(\"h2\");\r\n    const finished = document.createElement(\"h2\");\r\n    pending.innerText = titleText[0];\r\n    finished.innerText = titleText[1];\r\n    body.appendChild(pending);\r\n    body.appendChild(finished);\r\n    }\r\n\r\n    function init() {\r\n    boardAdd();\r\n    }\r\n\r\n    init();\r\n```\r\n\r\n","excerpt":"nomad Coder - challenge(8) appendChild() 동일한 node를 두번 appendChild하면, 해당 node가 두개가 생성되는 것이 아니라, 처음 append한 node의 위치가 두번째 append한 위치로 업데이트 된다…","fields":{"slug":"/TIL_18_210118_2/"},"frontmatter":{"date":"Jan 18, 2021","title":"TIL-210118-part(2)","tags":["JS","appendchild"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Youtube Clone Coding - start!\r\n\r\n## Website vs Web app\r\n* `website` : 콘텐츠를 소비할 수 있고, 정적임. interaction 없음.\r\n* `webapp` : interaction 가능. 검색, 좋아요, 태그, 재생 등 많은 기능\r\n\r\n## What is NodeJS\r\n\r\n* `javascript`\r\n    * 웹에 내장되어있음. 웹/브라우저를 위해 주로 만들어진 언어.\r\n* `nodeJS`\r\n    * js를 브라우저 밖으로 가져와서, 유저가 local에서 사용할 수 있도록 한 것.\r\n    * 브라우저 밖의 javascript\r\n    * js를 이용해서 서버도 만들고, web scrapping도 하고..\r\n\r\n\r\n## Use cases for NodeJS\r\n* NodeJS vs DJango, Python\r\n    * `nodejs` : 무에서 유를 만들어내는 것 같은 자유도. 작은 블럭으로 성을 쌓는 것 같음\r\n    * `DJango`, `Python` : 매우 큰 성같은 도구를 사용하는 것. 먼저 이 도구에 대해 공부하고 쓸 줄 알아야 사용 가능\r\n\r\n* nodeJS가 적합한 때\r\n    * 많은 data를 handle 해야할때\r\n    * 실시간으로 데이터를 다루는 app (채팅, 우버)\r\n\r\n* nodeJS가 적합하지 않은 떄\r\n    * 컴퓨터의 하드웨어, 메모리 등에 acceess해서 hardcore한 작업을 해야 할 때\r\n    * 예 : 유튜브 같은 동영상 처리 서버 등","excerpt":"Youtube Clone Coding - start! Website vs Web app  : 콘텐츠를 소비할 수 있고, 정적임. interaction 없음.  : interaction 가능. 검색, 좋아요, 태그, 재생 등 많은 기능 What is …","fields":{"slug":"/TIL_17_210117_2/"},"frontmatter":{"date":"Jan 17, 2021","title":"TIL-210117-part2","tags":["JS","youtube_clone_coding","webapp"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n\r\n## Getting the Weather - part2 : API\r\n\r\n\r\n### 1. API\r\n* 특정 웹사이트로부터 데이터 얻거나, 저장된 것들 서로 주고받기위함\r\n* API에 있는 unit을 바꾸려면, 해당 API 문서에 방법 설명되어 있음\r\n    * 예 : weather API에서 섭씨로 바꾸는 방법은 \"units = metric\" 설정\r\n\r\n\r\n### 2. fetch\r\n* 데이터를 가져오게 하는 function\r\n* `.then()` :  fetch가 데이터를 다가지고 오면, 다음 함수를 실행시킴\r\n* fetch 밑 json 활용은 다음 코스에서....아래는 완성 코드\r\n\r\n```\r\nfunction getWeather(lat, lng) {\r\n    fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${API_KEY}&units=metric`\r\n    )\r\n    .then(function(response){\r\n        return response.json()\r\n    })\r\n    .then(function(json){\r\n        const temp = json.main.temp;\r\n        const place = json.name;\r\n        weather.innerText = `${temp} @ ${place}`\r\n    });\r\n}\r\n```","excerpt":"Getting the Weather - part2 : API 1. API 특정 웹사이트로부터 데이터 얻거나, 저장된 것들 서로 주고받기위함 API에 있는 unit을 바꾸려면, 해당 API 문서에 방법 설명되어 있음 예 : weather API에서 섭…","fields":{"slug":"/TIL_17_210117/"},"frontmatter":{"date":"Jan 17, 2021","title":"TIL-210117","tags":["JS","weather API","API"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n## Getting the Weather  - part1 : Geolocation\r\n\r\n\r\n### 1. navigator\r\n* 뜻 : 위치 값을 얻는 object. 안에 API들이 있어 사용.\r\n\r\n### (1) navigator.geolocation.getCurrentPosition()\r\n* 현재 위치의 위도, 경도, 고도 등의 정보값을 가져올 수 있음\r\n* ()안에 succes시 호출 함수, error시 호출 함수를 넣음\r\n```\r\nfunction askForCoords() {\r\n       navigator.geolocation.getCurrentPosition(handleGeoSuccess, handleGeoError);\r\n}\r\n```\r\n<br>\r\n\r\n### 2. 가져온 위치 값 localStorage에 저장\r\n* JSON.stringify() : 위치 obj를 string으로 바꿔서 locastorage에wjwkd\r\n```\r\nfunction saveCoords(coordsObj) {\r\n        const coordsInfo = JSON.stringify(coordsObj)\r\n        localStorage.setItem(COORDS, coordsInfo)\r\n}\r\n```\r\n\r\n### 3. self coding\r\n\r\n* `navigator.geolocation.getCurrentLocation()`\r\n    * 현재 device의 위도, 경도를 알려준다?!\r\n\r\n```\r\nnavigator.geolocation.getCurrentPosition(호출할 함수);\r\n```\r\n\r\n\r\n### 4. Nomad Coders - Challenge \r\n* 구현할 기능\r\n    * 국가정보 선택\r\n    * 선택한 정보를 local storage에 저장\r\n    * local storage에 저장된 국가 정보 있는지 확인\r\n    * 있다면, 해당 정보를 drop down의 default 값으로 표시\r\n* 완성 코드 : https://codesandbox.io/s/day-six-blueprint-forked-hnyd8?file=/src/index.js\r\n\r\n\r\n### 5. 기타\r\n* 꿀팁 : js에서 object에 key값과 value값이 같을때는, key 값 하나만 적으면 됨\r\n```\r\nconst coordsObj = {\r\n        latitude,\r\n        longitude\r\n    }\r\n```\r\n","excerpt":"Getting the Weather  - part1 : Geolocation 1. navigator 뜻 : 위치 값을 얻는 object. 안에 API들이 있어 사용. (1) navigator.geolocation.getCurrentPosition()…","fields":{"slug":"/TIL_16_210116/"},"frontmatter":{"date":"Jan 16, 2021","title":"TIL-210116","tags":["JS","TIL"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n## Image Background\r\n\r\n### 1. Math : random number생성하기\r\n* `Math.random()` : 랜덤 숫자를 생성\r\n* `Math.floor` : 숫자 반올림\r\n* `Math.ceil` : 숫자 내림\r\n```\r\nMath.floor(Math.random()*4)+1\r\n```\r\n\r\n### 2. background 이미지 추가하기\r\n* 아래 코드 보고 추가 공부 필요\r\n    * `image = new image()` : 요건 무슨 기능?\r\n    * `image.src = \"\"` : 요것도 공부\r\n    * body에 appendChild로 결국 `<image src>` 요걸 넣은건가?\r\n```\r\nfunction paintImage(imgNumber) {\r\n    const image = new Image()\r\n    image.src = `./images/${imgNumber + 1}.jpg`;\r\n    image.classList.add('bgImage')\r\n    body.appendChild(image)\r\n}\r\n```\r\n\r\n### 3. classList.add\r\n* 의미 : 특정 element에 class 명을 추가함\r\n```\r\nimage.classList.add('bgImage')\r\n```\r\n\r\n## Self study\r\n\r\n### 1. background image 넣는법\r\n* object.style.backgroundImage = \"url('경로')\"\r\n```\r\nbody.style.backgroundImage = \"url('./images/image1.jpg')\";\r\n```\r\n\r\n### 2. background image 꽉차게 하는법\r\n* object.style.backgroundSize = \"100%\"\r\n```\r\nbody.style.backgroundSize = \"100%\";\r\n```\r\n\r\n\r\n### 3. background image를 fix 시키기(스크롤해서 더 보기 x)\r\n* object.style.backgroundAttachment = \"fixed\"\r\n\r\n<br>\r\n\r\n## 기타 \r\n* 항상 코드를 최대한 분절.\r\n* 나중에 바뀔 수 있는 것들은 변수화 시켜서 따로 빼누는 것이 좋다.","excerpt":"Image Background 1. Math : random number생성하기  : 랜덤 숫자를 생성  : 숫자 반올림  : 숫자 내림 2. background 이미지 추가하기 아래 코드 보고 추가 공부 필요  : 요건 무슨 기능?  : 요것도 공…","fields":{"slug":"/TIL_15_210115/"},"frontmatter":{"date":"Jan 15, 2021","title":"TIL_210115","tags":["TIL","js","Math","image"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Making a To Do List part3 - (3)\r\n\r\n### 1. target\r\n* 의미 : event 발생시, 어떤 코드에서 event가 발생했는지 확인 가능\r\n\r\n\r\n### 1.1 target.parentNode\r\n* 해당 target의 parent가 누군지 확인 가능\r\n\r\n### 2. removeChild()\r\n* 해당 parentnode의 child를 삭제하는 코드\r\n```\r\n    const toDoList = document.querySelector(\".js-toDoList\");\r\n\r\n    function deleteToDo(event) {\r\n        const btn = event.target;\r\n        const li = btn.parentNode;\r\n        toDoList.removeChild(li);\r\n    }\r\n```\r\n\r\n### 3. .filter()\r\n* 의미 : array의 모든 item에 filter()안의 함수를 실행시키고, 함수 조건에 맞는 값만으로 다시 array를 만드는 기능\r\n    * forEach()와 함께 기억!\r\n    * 둘다 ()안의 function을 순차적으로 array에 모두 실행시킨다.\r\n```\r\nfunction deleteToDo(event) {\r\n    const btn = event.target;\r\n    const li = btn.parentNode;\r\n    toDoList.removeChild(li);\r\n    const cleanToDos = toDos.filter(function(toDo){\r\n        return toDo.id !== parseInt(li.id)\r\n    });\r\n    toDos = cleanToDos;\r\n    saveToDo();\r\n}\r\n```\r\n\r\n### 3.1 parseInt\r\n* string을 int(숫자)로 바꿔줌\r\n```\r\nparseInt(li.id)\r\n```\r\n\r\n<br>\r\n\r\n\r\n# Nomad Coder - Challenge\r\n\r\n* window의 사이즈가 바뀔때마다 window의 배경색이 바뀌게 만들기 \r\n```\r\n    // <⚠️ DONT DELETE THIS ⚠️>\r\n    import \"./styles.css\";\r\n    // <⚠️ /DONT DELETE THIS ⚠️>\r\n\r\n    const body = document.querySelector(\"body\"),\r\n    h2 = document.createElement(\"h2\");\r\n\r\n    const greeting = \"hello World\";\r\n\r\n    function bodyText() {\r\n    h2.innerText = greeting;\r\n    h2.style.color = \"white\";\r\n    body.appendChild(h2);\r\n    body.style.backgroundColor = \"blue\";\r\n    }\r\n\r\n    function windowMove() {\r\n    const windowSize = window.innerWidth;\r\n    if (windowSize < 1000) {\r\n        body.style.backgroundColor = \"red\";\r\n    } else if (windowSize < 1250) {\r\n        body.style.backgroundColor = \"green\";\r\n    } else {\r\n        body.style.backgroundColor = \"blue\";\r\n    }\r\n    }\r\n\r\n    function init() {\r\n    bodyText();\r\n    window.addEventListener(\"resize\", windowMove);\r\n    }\r\n    init();\r\n\r\n```","excerpt":"Making a To Do List part3 - (3) 1. target 의미 : event 발생시, 어떤 코드에서 event가 발생했는지 확인 가능 1.1 target.parentNode 해당 target의 parent가 누군지 확인 가능 2. …","fields":{"slug":"/TIL_14_210114/"},"frontmatter":{"date":"Jan 14, 2021","title":"TIL_210114","tags":["TIL","js","filter()","forEach()","target"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Nomad Coder Vanila JS challenge code - 1\r\n\r\n### 구현해야 하는 기능\r\n* 마우스 enter시 문자, 색깔 변경\r\n* 마우스 leave시 문자, 색깔 변경\r\n* 윈도우 창 resize시 문자, 색깔 변경\r\n* 마우스 우클릭시, 문자, 색깔 변경\r\n\r\n```\r\n    // <⚠️ DONT DELETE THIS ⚠️>\r\n    import \"./styles.css\";\r\n    const colors = [\"#1abc9c\", \"#3498db\", \"#9b59b6\", \"#f39c12\", \"#e74c3c\"];\r\n    // <⚠️ /DONT DELETE THIS ⚠️>\r\n\r\n    const h2 = document.querySelector(\"h2\"),\r\n    html = document.querySelector(\"html\");\r\n\r\n    const superEventHandler = {\r\n    mouseEnter: function () {\r\n        h2.innerHTML = \"Mouse Entered :)\";\r\n        h2.style.color = colors[0];\r\n    },\r\n    mouseLeave: function () {\r\n        h2.innerHTML = \"Mouse Leaved :(\";\r\n        h2.style.color = colors[1];\r\n    },\r\n    rightClick: function () {\r\n        h2.innerText = \"Mouse right clicked!\";\r\n        h2.style.color = colors[2];\r\n    },\r\n    resize: function () {\r\n        h2.innerText = \"window resized <>\";\r\n        h2.style.color = colors[3];\r\n    }\r\n    };\r\n\r\n    function init() {\r\n    h2.addEventListener(\"mouseenter\", superEventHandler.mouseEnter);\r\n    h2.addEventListener(\"mouseleave\", superEventHandler.mouseLeave);\r\n    html.addEventListener(\"contextmenu\", superEventHandler.rightClick);\r\n    window.addEventListener(\"resize\", superEventHandler.resize);\r\n    }\r\n    init();\r\n\r\n```","excerpt":"Nomad Coder Vanila JS challenge code - 1 구현해야 하는 기능 마우스 enter시 문자, 색깔 변경 마우스 leave시 문자, 색깔 변경 윈도우 창 resize시 문자, 색깔 변경 마우스 우클릭시, 문자, 색깔 변경","fields":{"slug":"/TIL_13_210113/"},"frontmatter":{"date":"Jan 13, 2021","title":"TIL_210113","tags":["TIL","eventListener","js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Making a To Do List part Three\r\n\r\n\r\n### 1. remove by id\r\n* 방법 : id 기준으로 해당 태그를 호출한 후, `.remove()` 사용\r\n```\r\nconst clickedId = event.path[1].id;\r\nconst clickedList = document.getElementById(clickedId);\r\nclickedList.remove();\r\n```\r\n\r\n\r\n### 2. remove in locaStorage\r\n* 방법 : `.splice` 사용? (배열에서 배열 내 값 삭제)\r\n```\r\nconst loadedToDos = localStorage.getItem(TODOS_LS);\r\nconst parsedToDos = JSON.parse(loadedToDos);\r\nparsedToDos.splice(clickedId-1, 1);\r\n```\r\n\r\n\r\n### self code\r\n```\r\n    const toDoForm = document.querySelector(\".js-toDoForm\"),\r\n        toDoInput = toDoForm.querySelector(\"input\"),\r\n        toDoList = document.querySelector(\".js-toDoList\");\r\n\r\n    const TODOS_LS = \"toDos\";\r\n\r\n    let toDos = [];\r\n\r\n    function handleClick(event) {\r\n        const clickedId = event.path[1].id;\r\n        const clickedList = document.getElementById(clickedId);\r\n        clickedList.remove();\r\n        const loadedToDos = localStorage.getItem(TODOS_LS);\r\n        const parsedToDos = JSON.parse(loadedToDos);\r\n        parsedToDos.splice(clickedId-1, 1);\r\n        toDos = parsedToDos;\r\n        saveToDo();\r\n    }\r\n\r\n    function saveToDo() {\r\n        localStorage.setItem(TODOS_LS, JSON.stringify(toDos))\r\n    }\r\n\r\n    function paintToDo(text) {\r\n        const li = document.createElement(\"li\");\r\n        const delBtn = document.createElement(\"button\");\r\n        const span = document.createElement(\"span\");\r\n        const newId = toDos.length + 1;\r\n        delBtn.innerText = \"✔\";\r\n        span.innerText = text;\r\n        li.appendChild(span);\r\n        li.appendChild(delBtn);\r\n        li.id = newId;\r\n        toDoList.appendChild(li);\r\n        const toDoObj = {\r\n            text : text,\r\n            id : newId\r\n        };\r\n        toDos.push(toDoObj);\r\n        saveToDo()\r\n    }   \r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        const currentValue = toDoInput.value;\r\n        paintToDo(currentValue);\r\n        toDoInput.value = \"\";\r\n    }\r\n\r\n    function loadToDos(){\r\n        const loadedToDos = localStorage.getItem(TODOS_LS);\r\n        if ( loadedToDos !== null) {\r\n            const parsedToDos = JSON.parse(loadedToDos);\r\n            parsedToDos.forEach(function(toDo){\r\n                paintToDo(toDo.text)\r\n            })\r\n        }\r\n    }\r\n\r\n    function init() {\r\n        loadToDos();\r\n        toDoForm.addEventListener(\"submit\", handleSubmit);\r\n        toDoList.addEventListener(\"click\", handleClick)\r\n    }\r\n\r\n    init();\r\n```\r\n","excerpt":"Making a To Do List part Three 1. remove by id 방법 : id 기준으로 해당 태그를 호출한 후,  사용 2. remove in locaStorage 방법 :  사용? (배열에서 배열 내 값 삭제) self code","fields":{"slug":"/TIL_12_210112/"},"frontmatter":{"date":"Jan 12, 2021","title":"TIL_210112","tags":["TIL","data","js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Making a To Do List Par two\r\n\r\n### 1. localStorage에 object로 저장 \r\n* (1) `JSON.stringify()` 필요\r\n    * 의미 : JS object를 string으로 변환해줌\r\n    * localStorage는 string만을 저장하기 때문에, 변환필요\r\n* (2) `JSON.parse()`\r\n    * 의미 : String으로 저장된 값을 다시 JS Object로 변환\r\n```\r\nlocalStorage.setItem(\"toDoItem\", JSON.stringify(toDoArray))\r\n```\r\n<br>\r\n\r\n### 2. array 추가하기\r\n* `.push()` 사용\r\n```\r\nconst toDoArray = []\r\nconst addToDoArray = toDoArray.push()\r\n```\r\n<br>\r\n\r\n### 3.forEach\r\n* sum : array를 위한 function. array속 하나하나에 대하여 function을 실행함\r\n* 예 : parsedToDos.`forEach(sth)` => parsedToDos array안의 값들에게 하나씩 sth이라는 function 을 실행함\r\n```\r\nfunction loadToDos(){\r\n    const loadedToDos  = localStorage.getItem(TODOS_LS);\r\n    if ( loadedToDos !== null) {\r\n        const parsedToDos = JSON.parse(loadedToDos);\r\n        parsedToDos.forEach(function(toDo){\r\n            paintToDo(toDo.text)\r\n        })\r\n    }\r\n}\r\n```\r\n<br>\r\n\r\n\r\n### 기타\r\n\r\n* dobe-blog\r\n    * disqus 댓글 달기 : disqus 사이트에서 shortname 생성하여 코드 넣기\r\n    * tsx 파일의 주석 처리 {/* */} 로 주석 처리 가능","excerpt":"Making a To Do List Par two 1. localStorage에 object로 저장 (1)  필요 의미 : JS object를 string으로 변환해줌 localStorage는 string만을 저장하기 때문에, 변환필요 (2)  의미…","fields":{"slug":"/TIL_11_210111/"},"frontmatter":{"date":"Jan 11, 2021","title":"TIL_210111","tags":["TIL","data","js","forEach",".push","array","JSON"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n## Making a TO-DO List\r\n\r\n### appendChild, innerText\r\n* `appendChild` : tag 안/밑에 또다른 tag를 넣을 수 있음\r\n* `innerText` : 태그가 표시하는 text 값을 넣을 수 있음\r\n    * innerText 적용 대상이 혼동 되는 듯\r\n```\r\nfunction paintToDo(text) {\r\n    const li = document.createElement(\"li\")\r\n    const delBtn = document.createElement(\"button\")\r\n    delBtn.innerText = \"✔\"\r\n    li.innerText = text\r\n    li.appendChild(delBtn)\r\n    toDoList.appendChild(li)\r\n}   \r\n```\r\n\r\n### Eliment 만들기\r\n* document.createElement(\"li\")\r\n\r\n\r\n\r\n\r\n\r\n### pre-self code\r\n```\r\n    const todo = document.querySelector(\".js-todo\"),\r\n        todoInput = todo.querySelector(\"input\"),\r\n        list = document.querySelector(\".js-list\")\r\n\r\n    const TODO_LIST = \"todoItem\",\r\n        addTodoList = document.createElement(\"li\");\r\n\r\n    function storageAdd() {\r\n        event.preventDefault();\r\n        const addedItem =  todoInput.value;\r\n        console.log(addedItem);\r\n        localStorage.setItem(TODO_LIST, addedItem);\r\n        listAdd(addedItem);\r\n    }\r\n\r\n    function listAdd(item) {\r\n        addTodoList.innerText(item);\r\n        list.appendChild(addTodoList);\r\n    }\r\n\r\n\r\n    function todoWrite() {\r\n        todo.addEventListener(\"submit\", storageAdd);\r\n    }\r\n\r\n    function init(){\r\n        todoWrite()\r\n    }\r\n\r\n    init()\r\n```\r\n\r\n\r\n### 기타\r\n* 헷갈리는 것\r\n    * `O` : innerHTML = \"text\" \r\n    * `X` : innerHTML(\"Text\")\r\n\r\n* html 태그내 meta charset\r\n    * 이모지 등 글꼴 표시하기 위해서는 html내 표기 필수\r\n    ```\r\n    <!DOCTYPE html>\r\n     <html>\r\n       <meta charset = \"utf-8\">\r\n     </html>\r\n    ```\r\n* window에서 이모지창 단축키 : 윈도우키 + . or ,","excerpt":"Making a TO-DO List appendChild, innerText  : tag 안/밑에 또다른 tag를 넣을 수 있음  : 태그가 표시하는 text 값을 넣을 수 있음 innerText 적용 대상이 혼동 되는 듯 Eliment 만들기 do…","fields":{"slug":"/TIL_10_210110/"},"frontmatter":{"date":"Jan 10, 2021","title":"TIL_210110","tags":["TIL","data","js","list","ul"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Saving the User Name part1-1\r\n<br>\r\n\r\n### FORM - 데이터 submit, 가져오기\r\n\r\n<br>\r\n\r\n* Summary\r\n    1. form에 eventListener로 submit 추가\r\n    2. input의 value값(입력된 데이터)를 .value로 가져옴\r\n\r\n<br>\r\n\r\n* 1. form에 eventListener 추가\r\n        * 형태 : .addEventListener\r\n        * 기능 : 특정 이벤트가 발생하면, 특정 액션을 하도록 tag에 eventListener 추가\r\n        ```\r\n            function askForName() {\r\n                form.classList.add(SHOWING_DS);\r\n                form.addEventListener(\"submit\", handleSubmit)\r\n            }\r\n\r\n            function handleSubmit() {\r\n                const addUser = input.value\r\n                localStorage.setItem(USER_LS, addUser);\r\n                loadName();\r\n            }\r\n        ```\r\n<br>\r\n\r\n* 2. input의 value 값 가져오기\r\n```\r\nconst addUser = input.value\r\n```\r\n\r\n<br><br>\r\n    \r\n\r\n### 기타\r\n\r\n\r\n<br>\r\n* classList.add / classList.remove\r\n    * class명 추가 / 삭제\r\n    * 예시\r\n    ```\r\n    form.classList.add(SHOWING_DS)\r\n    form.classList.remove(SHOWING_DS)\r\n    ```\r\n<br>\r\n\r\n* event.preventDefault()\r\n    * 특정 이벤트가 발생했을 때, 기본적으로 브라우저가 하는 행동을 막음(예 : 페이지 새로고침, document레벨 전체)\r\n<br>\r\n\r\n* 최대한 모든 것을 분절해서, 클래스명이든 기능이든 다 분절해서 코드화 \r\n","excerpt":"Saving the User Name part1-1 FORM - 데이터 submit, 가져오기 Summary form에 eventListener로 submit 추가 input의 value값(입력된 데이터)를 .value로 가져옴 form에 event…","fields":{"slug":"/TIL_9_210109/"},"frontmatter":{"date":"Jan 09, 2021","title":"TIL_210109","tags":["TIL","data","js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n # Saving the User Name - part1\r\n\r\n\r\n### Local Storage\r\n* sum. : 작은 정보들을 client단에서 저장하고 있는 것\r\n\r\n\r\n### 기타\r\n* JS에서, HTML의 class를 가져오는 법 : `.className`\r\n```\r\nconst form= document.querySelector(\".js-form\")\r\n```\r\n\r\n* form \r\n```\r\n<form class=\"js-form\">\r\n <input type=\"text\" placeholder=\"what is your name\">\r\n</form>\r\n```\r\n\r\n* html에서  class명을 하나에 두개 넣는 법\r\n    * 띄어쓰기로 추가 한다\r\n```\r\n<form class=\"js-form newClass1 newClass2></form>\r\n```\r\n\r\n* css에서 두개의 클래스에 동시 속성을 넣는법 : `,`로 클래스명 구분\r\n```\r\n.form,\r\n.text {\r\n    color : red\r\n}\r\n```","excerpt":"Saving the User Name - part1 Local Storage sum. : 작은 정보들을 client단에서 저장하고 있는 것 기타 JS에서, HTML의 class를 가져오는 법 :  form  html에서  class명을 하나에 두개 …","fields":{"slug":"/TIL_8_210108/"},"frontmatter":{"date":"Jan 08, 2021","title":"TIL_210108","tags":["JS","data","til"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### views\r\n* 뜻 : 화면에 표시되는 모든 것이 view \r\n* 예시\r\n    * 텍스트\r\n    * 슬라이더\r\n    * 버튼\r\n    * VStack(Vertical Stack)\r\n        * view의 일종으로, 다른 view들을 담는 container 역할\r\n        * Vertically 담음\r\n    * HStack\r\n        * Horizontally 담음\r\n\r\n### Swift View Modifiers\r\n* 뜻 : CSS같은 개념. UI적 요소들을 바꿀 수 있음\r\n* 규칙 : View modifier가 적힌 순서대로 코드가 적용된다.\r\n* 예시 : 아래 예시에서, border에는 opacity가 적용 안됨\r\n```\r\nText(\"100\")\r\n    .opacity(0.5)\r\n    .border(color.red, width: 2)\r\n```\r\n### Modifers 유의사항\r\n* 각 modifer가 return하는 view 종류가 다르다\r\n    * 예를 들어, .bold() -> Text view를 리턴\r\n    * 하지만 lineSpacing()은 그냥 view를 리턴\r\n* 때문에 modifier를 놓는 순서를 잘 고려해야 함. \r\n    * bold를 lineSpacing에 놓으면, 안됨. bold는 text view에 적용해야하는 것이라\r\n\r\n#### Modifier(1) - font()\r\n* font size를 하드코딩 하는게 아니라, title, footnote 등의 속성으로 해두면 화면 크기에 따라 size를 조정해줌\r\n\r\n#### Modifier(1) - kerning()\r\n* 기능 : letter spacing\r\n\r\n\r\n\r\n### 기타\r\n* ctrl + cmmd + space : 이모지 창\r\n        ","excerpt":"views 뜻 : 화면에 표시되는 모든 것이 view  예시 텍스트 슬라이더 버튼 VStack(Vertical Stack) view의 일종으로, 다른 view들을 담는 container 역할 Vertically 담음 HStack Horizontall…","fields":{"slug":"/TIL_7_210107/"},"frontmatter":{"date":"Jan 07, 2021","title":"TIL_210107","tags":["TIL","swift"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Making a JS Clock - part1\r\n\r\n### 1. ternary operation\r\n* summary : if문을 간단히 표현. 미니 if문\r\n* 형태 : condition ? true result : false result\r\n* 예시 :\r\n```\r\nconst time = `${hours < 10 ? `0${hours}` : hours} : ${\r\nminutes < 10 ? `0${minutes}` : minutes} : ${\r\nseconds < 10 ? `0${seconds}` : seconds}`;\r\n``` \r\n\r\n### 2. 연습(1)\r\n```\r\n    const clockContainer = document.querySelector(\".js-clock\");\r\n    const clockTitle = clockContainer.querySelector(\"h1\");\r\n\r\n    var reset =  setInterval(getTime, 100);\r\n\r\n    function getTime() {\r\n        const date = new Date();\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        const seconds = date.getSeconds();\r\n        const time = `${hours} : ${minutes} : ${seconds}`;\r\n        clockTitle.innerText = time;\r\n    }\r\n\r\n    function init(){\r\n        getTime();\r\n    \r\n    }\r\n    init();\r\n```\r\n\r\n#### 2.1 코드(1) : 시간 object\r\n * Date() 현재 시간을 가져온다\r\n    * Date().getHours()\r\n    * Date().getMinutes() ...\r\n\r\n#### 2.2 코드(2) : 시간 reset\r\n * setInterval(function, ms) : 기입한 ms 단위로 function 재실행\r\n * setTimeout(function, ms) : 한번만 실행? 여튼 차이가 있음 인터벌과\r\n\r\n\r\n### 3. 연습(2)\r\n* summary : 연습1에서 구현한 코드에, 시간 형태를 00 단위로 수정\r\n* 사용한 코드 : ternary operator. 미니 if 문\r\n```\r\n    const clockContainer = document.querySelector(\".js-clock\");\r\n    const clockTitle = clockContainer.querySelector(\"h1\");\r\n\r\n\r\n\r\n    function getTime() {\r\n        const date = new Date();\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        const seconds = date.getSeconds();\r\n        const time = `${hours < 10 ? `0${hours}` : hours} : ${\r\n            minutes < 10 ? `0${minutes}` : minutes} : ${\r\n            seconds < 10 ? `0${seconds}` : seconds}`;\r\n        clockTitle.innerText = time;\r\n    }\r\n\r\n    function init(){\r\n        getTime();\r\n        setInterval(getTime, 1000);\r\n    }\r\n    init();\r\n```\r\n\r\n### 기타\r\n* 프로그래밍 시, 항상 분리해서 생각!\r\n    * 코드도, 파일도, 최대한 분리해서 깔끔하게. 정리되게. ","excerpt":"Making a JS Clock - part1 1. ternary operation summary : if문을 간단히 표현. 미니 if문 형태 : condition ? true result : false result 예시 : 2. 연습(1) 2.1 …","fields":{"slug":"/TIL_6_210106/"},"frontmatter":{"date":"Jan 06, 2021","title":"TIL_210106","tags":["TIL","JS","tip"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# DOM\r\n\r\n### DOM(1) - if else Function practice_3\r\n* summary\r\n    * 문장 클릭시 색깔이 바뀌는 코드 짜기\r\n    * class를 추가해, pointer 기능과 색 변화 기능 두가지 모두를 구현하기 \r\n\r\n<br>\r\n\r\n* 1차 코드 : `clssList` 사용\r\n    * classList 기능 : 많은 function들 사용 가능(add, remove, contains..)\r\n```\r\n        const title = document.querySelector(\"#title\");\r\n        const CLASS_CLICKED = \"clicked\"\r\n        const CLASS_BTN = \"btn\"\r\n\r\n        function handleClick(){\r\n            const classList = title.classList\r\n            if (classList.contains(CLASS_CLICKED)) {\r\n                classList.remove(\"clicked\")\r\n            } else {\r\n                classList.add(\"clicked\")\r\n            }\r\n        }\r\n\r\n        function init() {\r\n            title.addEventListener(\"click\", handleClick);\r\n        }\r\n        init();\r\n```\r\n<br>\r\n\r\n* 2차 코드 : `toggle` 사용\r\n    * toggle의 기능 : if visible is set remove it, otherwise add it (코드 훨씬 짧아짐!)\r\n```\r\n        const title = document.querySelector(\"#title\");\r\n        const CLASS_CLICKED = \"clicked\"\r\n\r\n        function handleClick(){\r\n            title.classList.toggle(CLASS_CLICKED)\r\n        }\r\n\r\n        function init() {\r\n            title.addEventListener(\"click\", handleClick);\r\n        }\r\n        init();\r\n```\r\n\r\n### 기타\r\n* const 로 정의하더라도, HTML에 바로 반영이 되네. \r\n* JS에서는 css의 값들을 직접 건드리기보다 로직만 짜는 것이 좋다. \r\n    * 그래야 jS폴더내에서 색이 뭔지, 크기가 어떤지 등 세부 값들에 대해 신경안쓰고 로직만 신경 쓸 수 있기때문\r\n* html 태그에 2개 이상의 class 할당 가능. class=\"\" 안에서 띄어쓰기로 클래스 명 추가, 구분","excerpt":"DOM DOM(1) - if else Function practice_3 summary 문장 클릭시 색깔이 바뀌는 코드 짜기 class를 추가해, pointer 기능과 색 변화 기능 두가지 모두를 구현하기  1차 코드 :  사용 classList 기…","fields":{"slug":"/TIL_5_210105/"},"frontmatter":{"date":"Jan 05, 2021","title":"TIL_210105","tags":["TIL","js","ifelse"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Function\r\n\r\n### Function(1) - basic\r\n* 형태 : `function nameHere(parameter1, parameter2) {}\r\n* why use? : 반복 작업 제거. 한번에 특정 기능 호출\r\n* parameter는 1개 이상 올 수 있다. parameter를 입력하면 function 내에 전달한다. \r\n* 예시\r\n```\r\n  function myInfo(name, age) {\r\n      console.log(\"hello\", name, \", you are \", age, \"years old.\")\r\n  }\r\n\r\n  myInfo(\"Donghyun\", 29)\r\n```\r\n\r\n### Function(2) - 다른 방식\r\n* '+' 사용 (, 대신)\r\n```\r\nfunction myInfo(name, age) {\r\n    console.log(\"hello\" + name + \"you are \" + age + \"years old.\")\r\n}\r\n```\r\n\r\n* '`' 사용\r\n  * 형태 : '`'로 전체를 감싸고, 변수는 ${}로 감싼다.\r\n  * 훨씬더 코드 깔끔  \r\n```\r\nfunction myInfo(name, age) {\r\n    console.log(`hello ${name}, you are ${age} years old`)\r\n}\r\nmyInfo(\"Donghyun\", 29)\r\n```\r\n\r\n### Fucntion(3) - return\r\n* function은 return 값을 보내준다. \r\n\r\n### function(4) - math 연습\r\n* object 안에 function을 담고, 호출한다\r\n* function에 꼭 이름을 할당해줄 필요는 없네. 바로 parameter값 넣는다.\r\n```\r\n  const calculator = {\r\n      plus : function(a, b){\r\n          return a + b;\r\n      },\r\n      minus : function(a, b){\r\n          return a - b;\r\n      },\r\n      divide : function(a, b){\r\n          return a / b\r\n      },\r\n      powerOf : function(a, b){\r\n          return a ** b\r\n      }\r\n  }\r\n\r\n  const doMath = {\r\n      plusResult : calculator.plus(2,3),\r\n      minusResult : calculator.minus(10,2),\r\n      divideResult : calculator.divide(8,4),\r\n      powerOfResult : calculator.powerOf(1, 3)\r\n  }\r\n\r\n  console.log(doMath)\r\n```\r\n","excerpt":"Function Function(1) - basic 형태 : `function nameHere(parameter1, parameter2) {} why use? : 반복 작업 제거. 한번에 특정 기능 호출 parameter는 1개 이상 올 수 있다. …","fields":{"slug":"/TIL_4_210104/"},"frontmatter":{"date":"Jan 04, 2021","title":"TIL_210104_(1)","tags":["TIL","js","nomadcoder","function"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# DOM\r\n\r\n### DOM(1) - document (JS - HTML)\r\n* summary\r\n  * 의미 : document는 js 파일에 연결된 `html 파일 전체에 접근`할 수 있도록 해준다\r\n  * 형태 : document.blahblah\r\n* 예시 : document.getElementById\r\n\r\n### DOM(2) - 의미, 형태\r\n* summary\r\n  * 의미\r\n    * Document Object Module.\r\n    * HTML내의 모든 것들을 객체 내의 값들로 변환해준다. \r\n* 기능 : JS를 통해 객체화된 HTML 파일들을 조정 가능\r\n* 예시 : \r\n```\r\nconst title = document.getElementById(\"title\")\r\ntitle.innerHTML(\"Hi! From JS!\")\r\n```\r\n\r\n### DOM(3) - DOM안에 있는 key들 예시\r\n* summary : 어떤 key값으로 html을 바꿀 수 있는지 예시를 살핀다.\r\n* how : console.dir(document)를 통해서 document ojbect내의 key값들을 살핀다.\r\n* 예시 \r\n```\r\n  const title = document.querySelector(\"#title\")\r\n\r\n  title.innerHTML = \"Hi! From JS!\"\r\n  title.style.color = \"green\"\r\n  document.title = \"기발자 :)\"\r\n\r\n  console.dir(document)\r\n```\r\n* 참고 - `querySelector` : The Document method querySelector() returns the `first Element` within the document that matches the specified selector, or group of selectors. If no matches are found, null is returned. \r\n\r\n### DOM(4) - Event Handler\r\n* summary \r\n  * 특정 이벤트 발생시, 그에 따른 action 실행(function 등) \r\n  * 형태 : `addEventListener`\r\n<br>\r\n\r\n* 예시1 : 윈도우 사이즈를 옮기는 event시, console에 표시\r\n```\r\n  function handleSize(event){\r\n      console.log(event)\r\n  };\r\n\r\n  window.addEventListener(\"resize\", handleSize);\r\n```\r\n<br>\r\n\r\n* 예시2 : title의 문장 클릭시 색깔을 변경\r\n```\r\n    const title = document.querySelector(\"#title\");\r\n\r\n    function handleClick(){\r\n        title.style.color = \"blue\"\r\n    };\r\n    title.addEventListener(\"click\", handleClick);\r\n```\r\n<br>\r\n\r\n### DOM(5) - if else - function practice(2)\r\n\r\n* 중요 : 함수 func() vs func\r\n  * func() : 해당 함수를 바로 호출해라\r\n  * func : 해당 함수를 필요할 때 호출해라\r\n```\r\n  const title = document.querySelector(\"#title\");\r\n\r\n  const BASE_COLOR = \"white\";\r\n  const NEW_COLOR = \"red\";\r\n\r\n  function handleClick(){\r\n      console.log(title.style.color)\r\n      if (title.style.color === BASE_COLOR) {\r\n          title.style.color = NEW_COLOR;\r\n      } else {\r\n          title.style.color = BASE_COLOR;\r\n      }\r\n  }\r\n\r\n  function init() {\r\n      title.style.color = BASE_COLOR;\r\n      title.addEventListener(\"click\", handleClick);\r\n  }\r\n\r\n  init();\r\n```\r\n\r\n### 복습1\r\n* Object의 형태 - key값을 `:`로 담는다. `=`이 아니라.\r\n  ```\r\n  const objectExample = {\r\n    key1 : \"value\",\r\n    key2 : \"value2\"\r\n  }\r\n  ```\r\n\r\n### AND, OR\r\n* summary \r\n  * and : &&\r\n  * or : ||\r\n\r\n### 기타\r\n* console.log도 Object의 일종\r\n  * console 이라는 object\r\n  * log라는 key 값을 불러 오는 것\r\n* id값을 css에서 가져올때는 #id_name 형태 (#을 사용)\r\n  ```\r\n  #title {\r\n  }\r\n  ```\r\n* JS event 목록을 찾을때는 항상 `MDM`을 검색할 것","excerpt":"DOM DOM(1) - document (JS - HTML) summary 의미 : document는 js 파일에 연결된 할 수 있도록 해준다 형태 : document.blahblah 예시 : document.getElementById DOM(2) …","fields":{"slug":"/TIL_5_210104/"},"frontmatter":{"date":"Jan 04, 2021","title":"TIL_210104_(2)","tags":["TIL","js","nomadcoder","DOM","document","addEventListener","if","and(&&)","or(||)","MDM"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# 초보자를 위한 바닐라 JS\r\n\r\n### JS로 할 수 있는 것\r\n\r\n* 웹, 앱을 만들 수 있음\r\n* 게임도 제작 가능\r\n* 꽤 파워풀한 툴인 듯\r\n* 접근성이 높은 서비스를 만들 때 유용함\r\n\r\n### 바닐라 JS\r\n* 뜻 : 라이브러리가 없는 JS\r\n\r\n\r\n### ES5, ES6?\r\n* 뜻 : ECMAScript의 줄임말\r\n* why does it matter?\r\n    * JS의 코어 script\r\n    * JS의 버전을 의미하기도? \r\n    * 지금은 중요하지 않으니, JS와 유사하고, 그 버전을 의미하는 정도로만 이해하고 넘어가자\r\n\r\n\r\n### JS 구조\r\n* index.js 와 같이 별도 폴더로 구성\r\n* html 폴더 내에, script 문으로 .js 파일을 연결\r\n \r\n  * index.html\r\n  ```\r\n  <!DOCTYPE html>\r\n  <html>\r\n      <head>\r\n          <title>기발자</title>\r\n          <link rel=\"stylesheet\" href=\"index.css\">\r\n      </head>\r\n      <body>\r\n          <h1>this works!</h1>\r\n          <script src=\"index.js\"></script>\r\n      </body>\r\n  </html>\r\n  ```\r\n\r\n  * index.js\r\n  ```\r\n  console.log('Im working!');\r\n  alert('hello world')\r\n  ```\r\n\r\n### Variable, Constant\r\n* Variable : `var`, `let`\r\n* Constant : `const`\r\n* 실제 tip\r\n  * default로는 constant를 사용하는 것이 좋다.\r\n  * 왜? variable은 나중에 바뀔 위험이 있어서일까. 여튼 팁.\r\n\r\n1. create\r\n2. initialize\r\n3. using\r\n```\r\n    let a = 221\r\n    let b = a - 5\r\n    a - 4;\r\n    console.log(b, a)\r\n\r\n    const a = 221\r\n```\r\n\r\n\r\n### Data type on JS\r\n* `String` : \"text\"\r\n* `Boolean` : true, false\r\n* `Number` : 1,2,3 ... \r\n* `Float` : 55.1 (.을 가진 number)\r\n\r\n  ```\r\n  const string = \"dobedh\";\r\n  const boolean = true;\r\n  const number = 1\r\n  const float = 55.1\r\n  ```\r\n\r\n### 데이터를 담는 방식(1) - Array\r\n* 형태 : \r\n  * `[]` 안에 데이터를 담음\r\n  * Array 명은 `camel case` 사용 (예 : dobeNameIs)\r\n* 순서 : Array 내의 순서는 0,1,2....순으로 카운트\r\n* 단점 :\r\n  * Array는 단지 리스트만을 준다.\r\n  * 특정 속성의 값이 무엇지는 담을 수 없다. \r\n  * 그래서 뒤 이어 나올 `Object`가 나옴.\r\n* 기타 : 앞서 다룬 데이터 타입들을 넣을 수 있음 (변수 포함)\r\n```\r\n  const sth = \"something\"\r\n  const daysOfWeek = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", true, 90, sth]\r\n\r\n  console.log(daysOfWeek[2])\r\n  console.log(daysOfWeek)\r\n```\r\n\r\n### 데이터를 담는 방식(2) - Object\r\n* 형태 \r\n  * `{}` 안에 담음\r\n  * 변수와 그에 해당하는 값을 할당할 수 있음\r\n  * `.`을 사용하여 object 내의 변수 값 호출 가능\r\n* Array와의 중첩\r\n  * Array 안에 object를 넣을 수 있다\r\n  * Object 안에 Array를 넣을 수도 있다. \r\n  * Object 안에 Array를 넣고, 그 Array안에 다시 Object 넣는 것도 가능\r\n\r\n```\r\n  const dobeInfo = {\r\n      name : \"Donghyun\",\r\n      age : 29,\r\n      gender : \"Male\",\r\n      city : \"Seoul\",\r\n      favMovie : [\"Harry Potter\", \"Lord of the ring\"],\r\n      favFood : [\r\n          {\r\n              name: \"pizza\", \r\n              fatty : true\r\n          }, \r\n          {\r\n              name:\"salad\", \r\n              fatty : false\r\n          }\r\n      ]\r\n  }\r\n\r\n  dobeInfo.age = 32\r\n\r\n  console.log(dobeInfo)\r\n  console.log(dobeInfo.name)\r\n  console.log(dobeInfo.age)\r\n  console.log(dobeInfo)\r\n  console.log(dobeInfo.favMovie[0])\r\n  console.log(dobeInfo.favFood[1].name)\r\n```","excerpt":"초보자를 위한 바닐라 JS JS로 할 수 있는 것 웹, 앱을 만들 수 있음 게임도 제작 가능 꽤 파워풀한 툴인 듯 접근성이 높은 서비스를 만들 때 유용함 바닐라 JS 뜻 : 라이브러리가 없는 JS ES5, ES6? 뜻 : ECMAScript의 줄임말…","fields":{"slug":"/TIL_3_210103/"},"frontmatter":{"date":"Jan 03, 2021","title":"TIL_210103","tags":["TIL","dev","js","nomadcoder","ES","바닐라JS","datatype"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# logical operation\r\n\r\n### 1. opposite operation\r\n - summary : !를 수식 앞에 붙여서, 반대 로직을 만든다\r\n```\r\nlet passingGrade = 50\r\nlet studentGrade = 50\r\nlet chrisGrade = 49 \r\nlet samGrade = 99\r\n\r\n    let samPassed = samGrade >= passingGrade\r\n    let chrisPassed = chrisGrade >= passingGrade\r\n\r\n    !samPassed\r\n    !chrisPassed\r\n```\r\n\r\n### 2. AND, OR operation\r\n- summary : 조건문에서 또는, 그리고\r\n- 형태 : AND : &&, OR : ||\r\n```\r\n    let bothPassed = samPassed && chrisPassed\r\n\r\n    let eitherPassed = samPassed || chrisPassed\r\n    let anyonePassed = samPassed || chrisPassed || studentPassed\r\n    let everyonePassed = samPassed && chrisPassed && studentPassed\r\n    \r\n    let meritAwardGrade = 90\r\n    let samHasPerfectAttendace = true\r\n    let chrisHasPefectAttendace = true\r\n    \r\n    let samIsMeritStudent = samHasPerfectAttendace && samGrade >= meritAwardGrade\r\n    let chrisIsMeritStudent = chrisHasPefectAttendace && chrisGrade >= meritAwardGrade\r\n```\r\n\r\n\r\n### 3. Ternary conditional operator\r\n - summary : if문을 간단하게 표현하는 operation\r\n - 형태 : exepression ? true-value : false-value\r\n```\r\n    var betterStudent : String\r\n    \r\n    if samGrade > chrisGrade {\r\n        betterStudent = \"Sam\"\r\n    } else {\r\n        betterStudent = \"Chris\"\r\n    }\r\n    \r\n    betterStudent = samGrade > chrisGrade ? \"Sam\" : \"Chris\"\r\n```\r\n\r\n### 4. 오늘의 질문\r\n - 마크다운 안의 박스(``)에서, 한 줄을 띄우면 박스에서 벗어나는데 어떻게 처리?\r\n - 해결책 : 띄우고자 하는 문장의 제일 앞에, 스페이스 4개를 add.\r\n","excerpt":"logical operation 1. opposite operation summary : !를 수식 앞에 붙여서, 반대 로직을 만든다 2. AND, OR operation summary : 조건문에서 또는, 그리고 형태 : AND : &&, OR :…","fields":{"slug":"/TIL_2_210102/"},"frontmatter":{"date":"Jan 02, 2021","title":"TIL_210102","tags":["TIL","dev","ios","swift","operator","?","ternary operator","ifelse"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### 1. iOS 배운 것\r\n\r\n```\r\n배운 것을 씁니다.\r\n```\r\n\r\n### 2. Gatsby 배운 것\r\n\r\n1) git 사용법\r\n\r\n2) gatsby를 위한 install\r\n\r\n3) 기타\r\n - origin developer의 developer documents를 보는 것이 가장 정확하다.\r\n - 다른 사람들이 2차 가공한 문서를 보면, 빠르게 학습되지 않는다. ","excerpt":"1. iOS 배운 것 2. Gatsby 배운 것 git 사용법 gatsby를 위한 install 기타 origin developer의 developer documents를 보는 것이 가장 정확하다. 다른 사람들이 2차 가공한 문서를 보면, 빠르게 학…","fields":{"slug":"/TIL_1_210101/"},"frontmatter":{"date":"Jan 01, 2021","title":"TIL_210101","tags":["TIL","dev","ios"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}