{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n### views\n* 뜻 : 화면에 표시되는 모든 것이 view \n* 예시\n    * 텍스트\n    * 슬라이더\n    * 버튼\n    * VStack(Vertical Stack)\n        * view의 일종으로, 다른 view들을 담는 container 역할\n        * Vertically 담음\n    * HStack\n        * Horizontally 담음\n\n### Swift View Modifiers\n* 뜻 : CSS같은 개념. UI적 요소들을 바꿀 수 있음\n* 규칙 : View modifier가 적힌 순서대로 코드가 적용된다.\n* 예시 : 아래 예시에서, border에는 opacity가 적용 안됨\n```\nText(\"100\")\n    .opacity(0.5)\n    .border(color.red, width: 2)\n```\n#### Modifier(1) - font(.title)\n* font size를 하드코딩 하는게 아니라, title로 해두면 화면 크기에 따라 조정해줌\n\n\n\n### 기타\n* ctrl + cmmd + space : 이모지 창\n        ","excerpt":"views 뜻 : 화면에 표시되는 모든 것이 view  예시 텍스트 슬라이더 버튼 VStack(Vertical Stack) view의 일종으로, 다른 view들을 담는 container 역할 Vertically 담음 HStack Horizontall…","fields":{"slug":"/TIL_7_210107/"},"frontmatter":{"date":"Jan 07, 2021","title":"TIL_210107","tags":["TIL","swift"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n# Making a JS Clock - part1\n\n### 1. ternary operation\n* summary : if문을 간단히 표현. 미니 if문\n* 형태 : condition ? true result : false result\n* 예시 :\n```\nconst time = `${hours < 10 ? `0${hours}` : hours} : ${\nminutes < 10 ? `0${minutes}` : minutes} : ${\nseconds < 10 ? `0${seconds}` : seconds}`;\n``` \n\n### 2. 연습(1)\n```\n    const clockContainer = document.querySelector(\".js-clock\");\n    const clockTitle = clockContainer.querySelector(\"h1\");\n\n    var reset =  setInterval(getTime, 100);\n\n    function getTime() {\n        const date = new Date();\n        const hours = date.getHours();\n        const minutes = date.getMinutes();\n        const seconds = date.getSeconds();\n        const time = `${hours} : ${minutes} : ${seconds}`;\n        clockTitle.innerText = time;\n    }\n\n    function init(){\n        getTime();\n    \n    }\n    init();\n```\n\n#### 2.1 코드(1) : 시간 object\n * Date() 현재 시간을 가져온다\n    * Date().getHours()\n    * Date().getMinutes() ...\n\n#### 2.2 코드(2) : 시간 reset\n * setInterval(function, ms) : 기입한 ms 단위로 function 재실행\n * setTimeout(function, ms) : 한번만 실행? 여튼 차이가 있음 인터벌과\n\n\n### 3. 연습(2)\n* summary : 연습1에서 구현한 코드에, 시간 형태를 00 단위로 수정\n* 사용한 코드 : ternary operator. 미니 if 문\n```\n    const clockContainer = document.querySelector(\".js-clock\");\n    const clockTitle = clockContainer.querySelector(\"h1\");\n\n\n\n    function getTime() {\n        const date = new Date();\n        const hours = date.getHours();\n        const minutes = date.getMinutes();\n        const seconds = date.getSeconds();\n        const time = `${hours < 10 ? `0${hours}` : hours} : ${\n            minutes < 10 ? `0${minutes}` : minutes} : ${\n            seconds < 10 ? `0${seconds}` : seconds}`;\n        clockTitle.innerText = time;\n    }\n\n    function init(){\n        getTime();\n        setInterval(getTime, 1000);\n    }\n    init();\n```\n\n### 기타\n* 프로그래밍 시, 항상 분리해서 생각!\n    * 코드도, 파일도, 최대한 분리해서 깔끔하게. 정리되게. ","excerpt":"Making a JS Clock - part1 1. ternary operation summary : if문을 간단히 표현. 미니 if문 형태 : condition ? true result : false result 예시 : 2. 연습(1) 2.1 …","fields":{"slug":"/TIL_6_210106/"},"frontmatter":{"date":"Jan 06, 2021","title":"TIL_210106","tags":["TIL","JS","tip"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n# DOM\n\n### DOM(1) - if else Function practice_3\n* summary\n    * 문장 클릭시 색깔이 바뀌는 코드 짜기\n    * class를 추가해, pointer 기능과 색 변화 기능 두가지 모두를 구현하기 \n\n<br>\n\n* 1차 코드 : `clssList` 사용\n    * classList 기능 : 많은 function들 사용 가능(add, remove, contains..)\n```\n        const title = document.querySelector(\"#title\");\n        const CLASS_CLICKED = \"clicked\"\n        const CLASS_BTN = \"btn\"\n\n        function handleClick(){\n            const classList = title.classList\n            if (classList.contains(CLASS_CLICKED)) {\n                classList.remove(\"clicked\")\n            } else {\n                classList.add(\"clicked\")\n            }\n        }\n\n        function init() {\n            title.addEventListener(\"click\", handleClick);\n        }\n        init();\n```\n<br>\n\n* 2차 코드 : `toggle` 사용\n    * toggle의 기능 : if visible is set remove it, otherwise add it (코드 훨씬 짧아짐!)\n```\n        const title = document.querySelector(\"#title\");\n        const CLASS_CLICKED = \"clicked\"\n\n        function handleClick(){\n            title.classList.toggle(CLASS_CLICKED)\n        }\n\n        function init() {\n            title.addEventListener(\"click\", handleClick);\n        }\n        init();\n```\n\n### 기타\n* const 로 정의하더라도, HTML에 바로 반영이 되네. \n* JS에서는 css의 값들을 직접 건드리기보다 로직만 짜는 것이 좋다. \n    * 그래야 jS폴더내에서 색이 뭔지, 크기가 어떤지 등 세부 값들에 대해 신경안쓰고 로직만 신경 쓸 수 있기때문\n* html 태그에 2개 이상의 class 할당 가능. class=\"\" 안에서 띄어쓰기로 클래스 명 추가, 구분","excerpt":"DOM DOM(1) - if else Function practice_3 summary 문장 클릭시 색깔이 바뀌는 코드 짜기 class를 추가해, pointer 기능과 색 변화 기능 두가지 모두를 구현하기  1차 코드 :  사용 classList 기…","fields":{"slug":"/TIL_5_210105/"},"frontmatter":{"date":"Jan 05, 2021","title":"TIL_210105","tags":["TIL","js","ifelse"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n# Function\n\n### Function(1) - basic\n* 형태 : `function nameHere(parameter1, parameter2) {}\n* why use? : 반복 작업 제거. 한번에 특정 기능 호출\n* parameter는 1개 이상 올 수 있다. parameter를 입력하면 function 내에 전달한다. \n* 예시\n```\n  function myInfo(name, age) {\n      console.log(\"hello\", name, \", you are \", age, \"years old.\")\n  }\n\n  myInfo(\"Donghyun\", 29)\n```\n\n### Function(2) - 다른 방식\n* '+' 사용 (, 대신)\n```\nfunction myInfo(name, age) {\n    console.log(\"hello\" + name + \"you are \" + age + \"years old.\")\n}\n```\n\n* '`' 사용\n  * 형태 : '`'로 전체를 감싸고, 변수는 ${}로 감싼다.\n  * 훨씬더 코드 깔끔  \n```\nfunction myInfo(name, age) {\n    console.log(`hello ${name}, you are ${age} years old`)\n}\nmyInfo(\"Donghyun\", 29)\n```\n\n### Fucntion(3) - return\n* function은 return 값을 보내준다. \n\n### function(4) - math 연습\n* object 안에 function을 담고, 호출한다\n* function에 꼭 이름을 할당해줄 필요는 없네. 바로 parameter값 넣는다.\n```\n  const calculator = {\n      plus : function(a, b){\n          return a + b;\n      },\n      minus : function(a, b){\n          return a - b;\n      },\n      divide : function(a, b){\n          return a / b\n      },\n      powerOf : function(a, b){\n          return a ** b\n      }\n  }\n\n  const doMath = {\n      plusResult : calculator.plus(2,3),\n      minusResult : calculator.minus(10,2),\n      divideResult : calculator.divide(8,4),\n      powerOfResult : calculator.powerOf(1, 3)\n  }\n\n  console.log(doMath)\n```\n","excerpt":"Function Function(1) - basic 형태 : `function nameHere(parameter1, parameter2) {} why use? : 반복 작업 제거. 한번에 특정 기능 호출 parameter는 1개 이상 올 수 있다. …","fields":{"slug":"/TIL_4_210104/"},"frontmatter":{"date":"Jan 04, 2021","title":"TIL_210104_(1)","tags":["TIL","js","nomadcoder","function"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n# DOM\n\n### DOM(1) - document (JS - HTML)\n* summary\n  * 의미 : document는 js 파일에 연결된 `html 파일 전체에 접근`할 수 있도록 해준다\n  * 형태 : document.blahblah\n* 예시 : document.getElementById\n\n### DOM(2) - 의미, 형태\n* summary\n  * 의미\n    * Document Object Module.\n    * HTML내의 모든 것들을 객체 내의 값들로 변환해준다. \n* 기능 : JS를 통해 객체화된 HTML 파일들을 조정 가능\n* 예시 : \n```\nconst title = document.getElementById(\"title\")\ntitle.innerHTML(\"Hi! From JS!\")\n```\n\n### DOM(3) - DOM안에 있는 key들 예시\n* summary : 어떤 key값으로 html을 바꿀 수 있는지 예시를 살핀다.\n* how : console.dir(document)를 통해서 document ojbect내의 key값들을 살핀다.\n* 예시 \n```\n  const title = document.querySelector(\"#title\")\n\n  title.innerHTML = \"Hi! From JS!\"\n  title.style.color = \"green\"\n  document.title = \"기발자 :)\"\n\n  console.dir(document)\n```\n* 참고 - `querySelector` : The Document method querySelector() returns the `first Element` within the document that matches the specified selector, or group of selectors. If no matches are found, null is returned. \n\n### DOM(4) - Event Handler\n* summary \n  * 특정 이벤트 발생시, 그에 따른 action 실행(function 등) \n  * 형태 : `addEventListener`\n<br>\n\n* 예시1 : 윈도우 사이즈를 옮기는 event시, console에 표시\n```\n  function handleSize(event){\n      console.log(event)\n  };\n\n  window.addEventListener(\"resize\", handleSize);\n```\n<br>\n\n* 예시2 : title의 문장 클릭시 색깔을 변경\n```\n    const title = document.querySelector(\"#title\");\n\n    function handleClick(){\n        title.style.color = \"blue\"\n    };\n    title.addEventListener(\"click\", handleClick);\n```\n<br>\n\n### DOM(5) - if else - function practice(2)\n\n* 중요 : 함수 func() vs func\n  * func() : 해당 함수를 바로 호출해라\n  * func : 해당 함수를 필요할 때 호출해라\n```\n  const title = document.querySelector(\"#title\");\n\n  const BASE_COLOR = \"white\";\n  const NEW_COLOR = \"red\";\n\n  function handleClick(){\n      console.log(title.style.color)\n      if (title.style.color === BASE_COLOR) {\n          title.style.color = NEW_COLOR;\n      } else {\n          title.style.color = BASE_COLOR;\n      }\n  }\n\n  function init() {\n      title.style.color = BASE_COLOR;\n      title.addEventListener(\"click\", handleClick);\n  }\n\n  init();\n```\n\n### 복습1\n* Object의 형태 - key값을 `:`로 담는다. `=`이 아니라.\n  ```\n  const objectExample = {\n    key1 : \"value\",\n    key2 : \"value2\"\n  }\n  ```\n\n### AND, OR\n* summary \n  * and : &&\n  * or : ||\n\n### 기타\n* console.log도 Object의 일종\n  * console 이라는 object\n  * log라는 key 값을 불러 오는 것\n* id값을 css에서 가져올때는 #id_name 형태 (#을 사용)\n  ```\n  #title {\n  }\n  ```\n* JS event 목록을 찾을때는 항상 `MDM`을 검색할 것","excerpt":"DOM DOM(1) - document (JS - HTML) summary 의미 : document는 js 파일에 연결된 할 수 있도록 해준다 형태 : document.blahblah 예시 : document.getElementById DOM(2) …","fields":{"slug":"/TIL_5_210104/"},"frontmatter":{"date":"Jan 04, 2021","title":"TIL_210104_(2)","tags":["TIL","js","nomadcoder","DOM","document","addEventListener","if","and(&&)","or(||)","MDM"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n# 초보자를 위한 바닐라 JS\n\n### JS로 할 수 있는 것\n\n* 웹, 앱을 만들 수 있음\n* 게임도 제작 가능\n* 꽤 파워풀한 툴인 듯\n* 접근성이 높은 서비스를 만들 때 유용함\n\n### 바닐라 JS\n* 뜻 : 라이브러리가 없는 JS\n\n\n### ES5, ES6?\n* 뜻 : ECMAScript의 줄임말\n* why does it matter?\n    * JS의 코어 script\n    * JS의 버전을 의미하기도? \n    * 지금은 중요하지 않으니, JS와 유사하고, 그 버전을 의미하는 정도로만 이해하고 넘어가자\n\n\n### JS 구조\n* index.js 와 같이 별도 폴더로 구성\n* html 폴더 내에, script 문으로 .js 파일을 연결\n \n  * index.html\n  ```\n  <!DOCTYPE html>\n  <html>\n      <head>\n          <title>기발자</title>\n          <link rel=\"stylesheet\" href=\"index.css\">\n      </head>\n      <body>\n          <h1>this works!</h1>\n          <script src=\"index.js\"></script>\n      </body>\n  </html>\n  ```\n\n  * index.js\n  ```\n  console.log('Im working!');\n  alert('hello world')\n  ```\n\n### Variable, Constant\n* Variable : `var`, `let`\n* Constant : `const`\n* 실제 tip\n  * default로는 constant를 사용하는 것이 좋다.\n  * 왜? variable은 나중에 바뀔 위험이 있어서일까. 여튼 팁.\n\n1. create\n2. initialize\n3. using\n```\n    let a = 221\n    let b = a - 5\n    a - 4;\n    console.log(b, a)\n\n    const a = 221\n```\n\n\n### Data type on JS\n* `String` : \"text\"\n* `Boolean` : true, false\n* `Number` : 1,2,3 ... \n* `Float` : 55.1 (.을 가진 number)\n\n  ```\n  const string = \"dobedh\";\n  const boolean = true;\n  const number = 1\n  const float = 55.1\n  ```\n\n### 데이터를 담는 방식(1) - Array\n* 형태 : \n  * `[]` 안에 데이터를 담음\n  * Array 명은 `camel case` 사용 (예 : dobeNameIs)\n* 순서 : Array 내의 순서는 0,1,2....순으로 카운트\n* 단점 :\n  * Array는 단지 리스트만을 준다.\n  * 특정 속성의 값이 무엇지는 담을 수 없다. \n  * 그래서 뒤 이어 나올 `Object`가 나옴.\n* 기타 : 앞서 다룬 데이터 타입들을 넣을 수 있음 (변수 포함)\n```\n  const sth = \"something\"\n  const daysOfWeek = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", true, 90, sth]\n\n  console.log(daysOfWeek[2])\n  console.log(daysOfWeek)\n```\n\n### 데이터를 담는 방식(2) - Object\n* 형태 \n  * `{}` 안에 담음\n  * 변수와 그에 해당하는 값을 할당할 수 있음\n  * `.`을 사용하여 object 내의 변수 값 호출 가능\n* Array와의 중첩\n  * Array 안에 object를 넣을 수 있다\n  * Object 안에 Array를 넣을 수도 있다. \n  * Object 안에 Array를 넣고, 그 Array안에 다시 Object 넣는 것도 가능\n\n```\n  const dobeInfo = {\n      name : \"Donghyun\",\n      age : 29,\n      gender : \"Male\",\n      city : \"Seoul\",\n      favMovie : [\"Harry Potter\", \"Lord of the ring\"],\n      favFood : [\n          {\n              name: \"pizza\", \n              fatty : true\n          }, \n          {\n              name:\"salad\", \n              fatty : false\n          }\n      ]\n  }\n\n  dobeInfo.age = 32\n\n  console.log(dobeInfo)\n  console.log(dobeInfo.name)\n  console.log(dobeInfo.age)\n  console.log(dobeInfo)\n  console.log(dobeInfo.favMovie[0])\n  console.log(dobeInfo.favFood[1].name)\n```","excerpt":"초보자를 위한 바닐라 JS JS로 할 수 있는 것 웹, 앱을 만들 수 있음 게임도 제작 가능 꽤 파워풀한 툴인 듯 접근성이 높은 서비스를 만들 때 유용함 바닐라 JS 뜻 : 라이브러리가 없는 JS ES5, ES6? 뜻 : ECMAScript의 줄임말…","fields":{"slug":"/TIL_3_210103/"},"frontmatter":{"date":"Jan 03, 2021","title":"TIL_210103","tags":["TIL","dev","js","nomadcoder","ES","바닐라JS","datatype"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n# logical operation\n\n### 1. opposite operation\n - summary : !를 수식 앞에 붙여서, 반대 로직을 만든다\n```\nlet passingGrade = 50\nlet studentGrade = 50\nlet chrisGrade = 49 \nlet samGrade = 99\n\n    let samPassed = samGrade >= passingGrade\n    let chrisPassed = chrisGrade >= passingGrade\n\n    !samPassed\n    !chrisPassed\n```\n\n### 2. AND, OR operation\n- summary : 조건문에서 또는, 그리고\n- 형태 : AND : &&, OR : ||\n```\n    let bothPassed = samPassed && chrisPassed\n\n    let eitherPassed = samPassed || chrisPassed\n    let anyonePassed = samPassed || chrisPassed || studentPassed\n    let everyonePassed = samPassed && chrisPassed && studentPassed\n    \n    let meritAwardGrade = 90\n    let samHasPerfectAttendace = true\n    let chrisHasPefectAttendace = true\n    \n    let samIsMeritStudent = samHasPerfectAttendace && samGrade >= meritAwardGrade\n    let chrisIsMeritStudent = chrisHasPefectAttendace && chrisGrade >= meritAwardGrade\n```\n\n\n### 3. Ternary conditional operator\n - summary : if문을 간단하게 표현하는 operation\n - 형태 : exepression ? true-value : false-value\n```\n    var betterStudent : String\n    \n    if samGrade > chrisGrade {\n        betterStudent = \"Sam\"\n    } else {\n        betterStudent = \"Chris\"\n    }\n    \n    betterStudent = samGrade > chrisGrade ? \"Sam\" : \"Chris\"\n```\n\n### 4. 오늘의 질문\n - 마크다운 안의 박스(``)에서, 한 줄을 띄우면 박스에서 벗어나는데 어떻게 처리?\n - 해결책 : 띄우고자 하는 문장의 제일 앞에, 스페이스 4개를 add.\n","excerpt":"logical operation 1. opposite operation summary : !를 수식 앞에 붙여서, 반대 로직을 만든다 2. AND, OR operation summary : 조건문에서 또는, 그리고 형태 : AND : &&, OR :…","fields":{"slug":"/TIL_2_210102/"},"frontmatter":{"date":"Jan 02, 2021","title":"TIL_210102","tags":["TIL","dev","ios","swift","operator","?","ternary operator","ifelse"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### 1. iOS 배운 것\n\n```\n배운 것을 씁니다.\n```\n\n### 2. Gatsby 배운 것\n\n1) git 사용법\n\n2) gatsby를 위한 install\n\n3) 기타\n - origin developer의 developer documents를 보는 것이 가장 정확하다.\n - 다른 사람들이 2차 가공한 문서를 보면, 빠르게 학습되지 않는다. ","excerpt":"1. iOS 배운 것 2. Gatsby 배운 것 git 사용법 gatsby를 위한 install 기타 origin developer의 developer documents를 보는 것이 가장 정확하다. 다른 사람들이 2차 가공한 문서를 보면, 빠르게 학…","fields":{"slug":"/TIL_1_210101/"},"frontmatter":{"date":"Jan 01, 2021","title":"TIL_210101","tags":["TIL","dev","ios"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}