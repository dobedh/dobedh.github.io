{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\r\n # Saving the User Name - part1\r\n\r\n\r\n### Local Storage\r\n* sum. : 작은 정보들을 client단에서 저장하고 있는 것\r\n\r\n\r\n### 기타\r\n* JS에서, HTML의 class를 가져오는 법 : `.className`\r\n```\r\nconst form= document.querySelector(\".js-form\")\r\n```\r\n\r\n* form \r\n```\r\n<form class=\"js-form\">\r\n <input type=\"text\" placeholder=\"what is your name\">\r\n</form>\r\n```\r\n\r\n* html에서  class명을 하나에 두개 넣는 법\r\n    * 띄어쓰기로 추가 한다\r\n```\r\n<form class=\"js-form newClass1 newClass2></form>\r\n```\r\n\r\n* css에서 두개의 클래스에 동시 속성을 넣는법 : `,`로 클래스명 구분\r\n```\r\n.form,\r\n.text {\r\n    color : red\r\n}\r\n```","excerpt":"Saving the User Name - part1 Local Storage sum. : 작은 정보들을 client단에서 저장하고 있는 것 기타 JS에서, HTML의 class를 가져오는 법 :  form  html에서  class명을 하나에 두개 …","fields":{"slug":"/TIL_8_210108/"},"frontmatter":{"date":"Jan 08, 2021","title":"TIL_210108","tags":["JS","data","til"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### views\r\n* 뜻 : 화면에 표시되는 모든 것이 view \r\n* 예시\r\n    * 텍스트\r\n    * 슬라이더\r\n    * 버튼\r\n    * VStack(Vertical Stack)\r\n        * view의 일종으로, 다른 view들을 담는 container 역할\r\n        * Vertically 담음\r\n    * HStack\r\n        * Horizontally 담음\r\n\r\n### Swift View Modifiers\r\n* 뜻 : CSS같은 개념. UI적 요소들을 바꿀 수 있음\r\n* 규칙 : View modifier가 적힌 순서대로 코드가 적용된다.\r\n* 예시 : 아래 예시에서, border에는 opacity가 적용 안됨\r\n```\r\nText(\"100\")\r\n    .opacity(0.5)\r\n    .border(color.red, width: 2)\r\n```\r\n### Modifers 유의사항\r\n* 각 modifer가 return하는 view 종류가 다르다\r\n    * 예를 들어, .bold() -> Text view를 리턴\r\n    * 하지만 lineSpacing()은 그냥 view를 리턴\r\n* 때문에 modifier를 놓는 순서를 잘 고려해야 함. \r\n    * bold를 lineSpacing에 놓으면, 안됨. bold는 text view에 적용해야하는 것이라\r\n\r\n#### Modifier(1) - font()\r\n* font size를 하드코딩 하는게 아니라, title, footnote 등의 속성으로 해두면 화면 크기에 따라 size를 조정해줌\r\n\r\n#### Modifier(1) - kerning()\r\n* 기능 : letter spacing\r\n\r\n\r\n\r\n### 기타\r\n* ctrl + cmmd + space : 이모지 창\r\n        ","excerpt":"views 뜻 : 화면에 표시되는 모든 것이 view  예시 텍스트 슬라이더 버튼 VStack(Vertical Stack) view의 일종으로, 다른 view들을 담는 container 역할 Vertically 담음 HStack Horizontall…","fields":{"slug":"/TIL_7_210107/"},"frontmatter":{"date":"Jan 07, 2021","title":"TIL_210107","tags":["TIL","swift"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Making a JS Clock - part1\r\n\r\n### 1. ternary operation\r\n* summary : if문을 간단히 표현. 미니 if문\r\n* 형태 : condition ? true result : false result\r\n* 예시 :\r\n```\r\nconst time = `${hours < 10 ? `0${hours}` : hours} : ${\r\nminutes < 10 ? `0${minutes}` : minutes} : ${\r\nseconds < 10 ? `0${seconds}` : seconds}`;\r\n``` \r\n\r\n### 2. 연습(1)\r\n```\r\n    const clockContainer = document.querySelector(\".js-clock\");\r\n    const clockTitle = clockContainer.querySelector(\"h1\");\r\n\r\n    var reset =  setInterval(getTime, 100);\r\n\r\n    function getTime() {\r\n        const date = new Date();\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        const seconds = date.getSeconds();\r\n        const time = `${hours} : ${minutes} : ${seconds}`;\r\n        clockTitle.innerText = time;\r\n    }\r\n\r\n    function init(){\r\n        getTime();\r\n    \r\n    }\r\n    init();\r\n```\r\n\r\n#### 2.1 코드(1) : 시간 object\r\n * Date() 현재 시간을 가져온다\r\n    * Date().getHours()\r\n    * Date().getMinutes() ...\r\n\r\n#### 2.2 코드(2) : 시간 reset\r\n * setInterval(function, ms) : 기입한 ms 단위로 function 재실행\r\n * setTimeout(function, ms) : 한번만 실행? 여튼 차이가 있음 인터벌과\r\n\r\n\r\n### 3. 연습(2)\r\n* summary : 연습1에서 구현한 코드에, 시간 형태를 00 단위로 수정\r\n* 사용한 코드 : ternary operator. 미니 if 문\r\n```\r\n    const clockContainer = document.querySelector(\".js-clock\");\r\n    const clockTitle = clockContainer.querySelector(\"h1\");\r\n\r\n\r\n\r\n    function getTime() {\r\n        const date = new Date();\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        const seconds = date.getSeconds();\r\n        const time = `${hours < 10 ? `0${hours}` : hours} : ${\r\n            minutes < 10 ? `0${minutes}` : minutes} : ${\r\n            seconds < 10 ? `0${seconds}` : seconds}`;\r\n        clockTitle.innerText = time;\r\n    }\r\n\r\n    function init(){\r\n        getTime();\r\n        setInterval(getTime, 1000);\r\n    }\r\n    init();\r\n```\r\n\r\n### 기타\r\n* 프로그래밍 시, 항상 분리해서 생각!\r\n    * 코드도, 파일도, 최대한 분리해서 깔끔하게. 정리되게. ","excerpt":"Making a JS Clock - part1 1. ternary operation summary : if문을 간단히 표현. 미니 if문 형태 : condition ? true result : false result 예시 : 2. 연습(1) 2.1 …","fields":{"slug":"/TIL_6_210106/"},"frontmatter":{"date":"Jan 06, 2021","title":"TIL_210106","tags":["TIL","JS","tip"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# DOM\r\n\r\n### DOM(1) - if else Function practice_3\r\n* summary\r\n    * 문장 클릭시 색깔이 바뀌는 코드 짜기\r\n    * class를 추가해, pointer 기능과 색 변화 기능 두가지 모두를 구현하기 \r\n\r\n<br>\r\n\r\n* 1차 코드 : `clssList` 사용\r\n    * classList 기능 : 많은 function들 사용 가능(add, remove, contains..)\r\n```\r\n        const title = document.querySelector(\"#title\");\r\n        const CLASS_CLICKED = \"clicked\"\r\n        const CLASS_BTN = \"btn\"\r\n\r\n        function handleClick(){\r\n            const classList = title.classList\r\n            if (classList.contains(CLASS_CLICKED)) {\r\n                classList.remove(\"clicked\")\r\n            } else {\r\n                classList.add(\"clicked\")\r\n            }\r\n        }\r\n\r\n        function init() {\r\n            title.addEventListener(\"click\", handleClick);\r\n        }\r\n        init();\r\n```\r\n<br>\r\n\r\n* 2차 코드 : `toggle` 사용\r\n    * toggle의 기능 : if visible is set remove it, otherwise add it (코드 훨씬 짧아짐!)\r\n```\r\n        const title = document.querySelector(\"#title\");\r\n        const CLASS_CLICKED = \"clicked\"\r\n\r\n        function handleClick(){\r\n            title.classList.toggle(CLASS_CLICKED)\r\n        }\r\n\r\n        function init() {\r\n            title.addEventListener(\"click\", handleClick);\r\n        }\r\n        init();\r\n```\r\n\r\n### 기타\r\n* const 로 정의하더라도, HTML에 바로 반영이 되네. \r\n* JS에서는 css의 값들을 직접 건드리기보다 로직만 짜는 것이 좋다. \r\n    * 그래야 jS폴더내에서 색이 뭔지, 크기가 어떤지 등 세부 값들에 대해 신경안쓰고 로직만 신경 쓸 수 있기때문\r\n* html 태그에 2개 이상의 class 할당 가능. class=\"\" 안에서 띄어쓰기로 클래스 명 추가, 구분","excerpt":"DOM DOM(1) - if else Function practice_3 summary 문장 클릭시 색깔이 바뀌는 코드 짜기 class를 추가해, pointer 기능과 색 변화 기능 두가지 모두를 구현하기  1차 코드 :  사용 classList 기…","fields":{"slug":"/TIL_5_210105/"},"frontmatter":{"date":"Jan 05, 2021","title":"TIL_210105","tags":["TIL","js","ifelse"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Function\r\n\r\n### Function(1) - basic\r\n* 형태 : `function nameHere(parameter1, parameter2) {}\r\n* why use? : 반복 작업 제거. 한번에 특정 기능 호출\r\n* parameter는 1개 이상 올 수 있다. parameter를 입력하면 function 내에 전달한다. \r\n* 예시\r\n```\r\n  function myInfo(name, age) {\r\n      console.log(\"hello\", name, \", you are \", age, \"years old.\")\r\n  }\r\n\r\n  myInfo(\"Donghyun\", 29)\r\n```\r\n\r\n### Function(2) - 다른 방식\r\n* '+' 사용 (, 대신)\r\n```\r\nfunction myInfo(name, age) {\r\n    console.log(\"hello\" + name + \"you are \" + age + \"years old.\")\r\n}\r\n```\r\n\r\n* '`' 사용\r\n  * 형태 : '`'로 전체를 감싸고, 변수는 ${}로 감싼다.\r\n  * 훨씬더 코드 깔끔  \r\n```\r\nfunction myInfo(name, age) {\r\n    console.log(`hello ${name}, you are ${age} years old`)\r\n}\r\nmyInfo(\"Donghyun\", 29)\r\n```\r\n\r\n### Fucntion(3) - return\r\n* function은 return 값을 보내준다. \r\n\r\n### function(4) - math 연습\r\n* object 안에 function을 담고, 호출한다\r\n* function에 꼭 이름을 할당해줄 필요는 없네. 바로 parameter값 넣는다.\r\n```\r\n  const calculator = {\r\n      plus : function(a, b){\r\n          return a + b;\r\n      },\r\n      minus : function(a, b){\r\n          return a - b;\r\n      },\r\n      divide : function(a, b){\r\n          return a / b\r\n      },\r\n      powerOf : function(a, b){\r\n          return a ** b\r\n      }\r\n  }\r\n\r\n  const doMath = {\r\n      plusResult : calculator.plus(2,3),\r\n      minusResult : calculator.minus(10,2),\r\n      divideResult : calculator.divide(8,4),\r\n      powerOfResult : calculator.powerOf(1, 3)\r\n  }\r\n\r\n  console.log(doMath)\r\n```\r\n","excerpt":"Function Function(1) - basic 형태 : `function nameHere(parameter1, parameter2) {} why use? : 반복 작업 제거. 한번에 특정 기능 호출 parameter는 1개 이상 올 수 있다. …","fields":{"slug":"/TIL_4_210104/"},"frontmatter":{"date":"Jan 04, 2021","title":"TIL_210104_(1)","tags":["TIL","js","nomadcoder","function"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# DOM\r\n\r\n### DOM(1) - document (JS - HTML)\r\n* summary\r\n  * 의미 : document는 js 파일에 연결된 `html 파일 전체에 접근`할 수 있도록 해준다\r\n  * 형태 : document.blahblah\r\n* 예시 : document.getElementById\r\n\r\n### DOM(2) - 의미, 형태\r\n* summary\r\n  * 의미\r\n    * Document Object Module.\r\n    * HTML내의 모든 것들을 객체 내의 값들로 변환해준다. \r\n* 기능 : JS를 통해 객체화된 HTML 파일들을 조정 가능\r\n* 예시 : \r\n```\r\nconst title = document.getElementById(\"title\")\r\ntitle.innerHTML(\"Hi! From JS!\")\r\n```\r\n\r\n### DOM(3) - DOM안에 있는 key들 예시\r\n* summary : 어떤 key값으로 html을 바꿀 수 있는지 예시를 살핀다.\r\n* how : console.dir(document)를 통해서 document ojbect내의 key값들을 살핀다.\r\n* 예시 \r\n```\r\n  const title = document.querySelector(\"#title\")\r\n\r\n  title.innerHTML = \"Hi! From JS!\"\r\n  title.style.color = \"green\"\r\n  document.title = \"기발자 :)\"\r\n\r\n  console.dir(document)\r\n```\r\n* 참고 - `querySelector` : The Document method querySelector() returns the `first Element` within the document that matches the specified selector, or group of selectors. If no matches are found, null is returned. \r\n\r\n### DOM(4) - Event Handler\r\n* summary \r\n  * 특정 이벤트 발생시, 그에 따른 action 실행(function 등) \r\n  * 형태 : `addEventListener`\r\n<br>\r\n\r\n* 예시1 : 윈도우 사이즈를 옮기는 event시, console에 표시\r\n```\r\n  function handleSize(event){\r\n      console.log(event)\r\n  };\r\n\r\n  window.addEventListener(\"resize\", handleSize);\r\n```\r\n<br>\r\n\r\n* 예시2 : title의 문장 클릭시 색깔을 변경\r\n```\r\n    const title = document.querySelector(\"#title\");\r\n\r\n    function handleClick(){\r\n        title.style.color = \"blue\"\r\n    };\r\n    title.addEventListener(\"click\", handleClick);\r\n```\r\n<br>\r\n\r\n### DOM(5) - if else - function practice(2)\r\n\r\n* 중요 : 함수 func() vs func\r\n  * func() : 해당 함수를 바로 호출해라\r\n  * func : 해당 함수를 필요할 때 호출해라\r\n```\r\n  const title = document.querySelector(\"#title\");\r\n\r\n  const BASE_COLOR = \"white\";\r\n  const NEW_COLOR = \"red\";\r\n\r\n  function handleClick(){\r\n      console.log(title.style.color)\r\n      if (title.style.color === BASE_COLOR) {\r\n          title.style.color = NEW_COLOR;\r\n      } else {\r\n          title.style.color = BASE_COLOR;\r\n      }\r\n  }\r\n\r\n  function init() {\r\n      title.style.color = BASE_COLOR;\r\n      title.addEventListener(\"click\", handleClick);\r\n  }\r\n\r\n  init();\r\n```\r\n\r\n### 복습1\r\n* Object의 형태 - key값을 `:`로 담는다. `=`이 아니라.\r\n  ```\r\n  const objectExample = {\r\n    key1 : \"value\",\r\n    key2 : \"value2\"\r\n  }\r\n  ```\r\n\r\n### AND, OR\r\n* summary \r\n  * and : &&\r\n  * or : ||\r\n\r\n### 기타\r\n* console.log도 Object의 일종\r\n  * console 이라는 object\r\n  * log라는 key 값을 불러 오는 것\r\n* id값을 css에서 가져올때는 #id_name 형태 (#을 사용)\r\n  ```\r\n  #title {\r\n  }\r\n  ```\r\n* JS event 목록을 찾을때는 항상 `MDM`을 검색할 것","excerpt":"DOM DOM(1) - document (JS - HTML) summary 의미 : document는 js 파일에 연결된 할 수 있도록 해준다 형태 : document.blahblah 예시 : document.getElementById DOM(2) …","fields":{"slug":"/TIL_5_210104/"},"frontmatter":{"date":"Jan 04, 2021","title":"TIL_210104_(2)","tags":["TIL","js","nomadcoder","DOM","document","addEventListener","if","and(&&)","or(||)","MDM"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# 초보자를 위한 바닐라 JS\r\n\r\n### JS로 할 수 있는 것\r\n\r\n* 웹, 앱을 만들 수 있음\r\n* 게임도 제작 가능\r\n* 꽤 파워풀한 툴인 듯\r\n* 접근성이 높은 서비스를 만들 때 유용함\r\n\r\n### 바닐라 JS\r\n* 뜻 : 라이브러리가 없는 JS\r\n\r\n\r\n### ES5, ES6?\r\n* 뜻 : ECMAScript의 줄임말\r\n* why does it matter?\r\n    * JS의 코어 script\r\n    * JS의 버전을 의미하기도? \r\n    * 지금은 중요하지 않으니, JS와 유사하고, 그 버전을 의미하는 정도로만 이해하고 넘어가자\r\n\r\n\r\n### JS 구조\r\n* index.js 와 같이 별도 폴더로 구성\r\n* html 폴더 내에, script 문으로 .js 파일을 연결\r\n \r\n  * index.html\r\n  ```\r\n  <!DOCTYPE html>\r\n  <html>\r\n      <head>\r\n          <title>기발자</title>\r\n          <link rel=\"stylesheet\" href=\"index.css\">\r\n      </head>\r\n      <body>\r\n          <h1>this works!</h1>\r\n          <script src=\"index.js\"></script>\r\n      </body>\r\n  </html>\r\n  ```\r\n\r\n  * index.js\r\n  ```\r\n  console.log('Im working!');\r\n  alert('hello world')\r\n  ```\r\n\r\n### Variable, Constant\r\n* Variable : `var`, `let`\r\n* Constant : `const`\r\n* 실제 tip\r\n  * default로는 constant를 사용하는 것이 좋다.\r\n  * 왜? variable은 나중에 바뀔 위험이 있어서일까. 여튼 팁.\r\n\r\n1. create\r\n2. initialize\r\n3. using\r\n```\r\n    let a = 221\r\n    let b = a - 5\r\n    a - 4;\r\n    console.log(b, a)\r\n\r\n    const a = 221\r\n```\r\n\r\n\r\n### Data type on JS\r\n* `String` : \"text\"\r\n* `Boolean` : true, false\r\n* `Number` : 1,2,3 ... \r\n* `Float` : 55.1 (.을 가진 number)\r\n\r\n  ```\r\n  const string = \"dobedh\";\r\n  const boolean = true;\r\n  const number = 1\r\n  const float = 55.1\r\n  ```\r\n\r\n### 데이터를 담는 방식(1) - Array\r\n* 형태 : \r\n  * `[]` 안에 데이터를 담음\r\n  * Array 명은 `camel case` 사용 (예 : dobeNameIs)\r\n* 순서 : Array 내의 순서는 0,1,2....순으로 카운트\r\n* 단점 :\r\n  * Array는 단지 리스트만을 준다.\r\n  * 특정 속성의 값이 무엇지는 담을 수 없다. \r\n  * 그래서 뒤 이어 나올 `Object`가 나옴.\r\n* 기타 : 앞서 다룬 데이터 타입들을 넣을 수 있음 (변수 포함)\r\n```\r\n  const sth = \"something\"\r\n  const daysOfWeek = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", true, 90, sth]\r\n\r\n  console.log(daysOfWeek[2])\r\n  console.log(daysOfWeek)\r\n```\r\n\r\n### 데이터를 담는 방식(2) - Object\r\n* 형태 \r\n  * `{}` 안에 담음\r\n  * 변수와 그에 해당하는 값을 할당할 수 있음\r\n  * `.`을 사용하여 object 내의 변수 값 호출 가능\r\n* Array와의 중첩\r\n  * Array 안에 object를 넣을 수 있다\r\n  * Object 안에 Array를 넣을 수도 있다. \r\n  * Object 안에 Array를 넣고, 그 Array안에 다시 Object 넣는 것도 가능\r\n\r\n```\r\n  const dobeInfo = {\r\n      name : \"Donghyun\",\r\n      age : 29,\r\n      gender : \"Male\",\r\n      city : \"Seoul\",\r\n      favMovie : [\"Harry Potter\", \"Lord of the ring\"],\r\n      favFood : [\r\n          {\r\n              name: \"pizza\", \r\n              fatty : true\r\n          }, \r\n          {\r\n              name:\"salad\", \r\n              fatty : false\r\n          }\r\n      ]\r\n  }\r\n\r\n  dobeInfo.age = 32\r\n\r\n  console.log(dobeInfo)\r\n  console.log(dobeInfo.name)\r\n  console.log(dobeInfo.age)\r\n  console.log(dobeInfo)\r\n  console.log(dobeInfo.favMovie[0])\r\n  console.log(dobeInfo.favFood[1].name)\r\n```","excerpt":"초보자를 위한 바닐라 JS JS로 할 수 있는 것 웹, 앱을 만들 수 있음 게임도 제작 가능 꽤 파워풀한 툴인 듯 접근성이 높은 서비스를 만들 때 유용함 바닐라 JS 뜻 : 라이브러리가 없는 JS ES5, ES6? 뜻 : ECMAScript의 줄임말…","fields":{"slug":"/TIL_3_210103/"},"frontmatter":{"date":"Jan 03, 2021","title":"TIL_210103","tags":["TIL","dev","js","nomadcoder","ES","바닐라JS","datatype"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# logical operation\r\n\r\n### 1. opposite operation\r\n - summary : !를 수식 앞에 붙여서, 반대 로직을 만든다\r\n```\r\nlet passingGrade = 50\r\nlet studentGrade = 50\r\nlet chrisGrade = 49 \r\nlet samGrade = 99\r\n\r\n    let samPassed = samGrade >= passingGrade\r\n    let chrisPassed = chrisGrade >= passingGrade\r\n\r\n    !samPassed\r\n    !chrisPassed\r\n```\r\n\r\n### 2. AND, OR operation\r\n- summary : 조건문에서 또는, 그리고\r\n- 형태 : AND : &&, OR : ||\r\n```\r\n    let bothPassed = samPassed && chrisPassed\r\n\r\n    let eitherPassed = samPassed || chrisPassed\r\n    let anyonePassed = samPassed || chrisPassed || studentPassed\r\n    let everyonePassed = samPassed && chrisPassed && studentPassed\r\n    \r\n    let meritAwardGrade = 90\r\n    let samHasPerfectAttendace = true\r\n    let chrisHasPefectAttendace = true\r\n    \r\n    let samIsMeritStudent = samHasPerfectAttendace && samGrade >= meritAwardGrade\r\n    let chrisIsMeritStudent = chrisHasPefectAttendace && chrisGrade >= meritAwardGrade\r\n```\r\n\r\n\r\n### 3. Ternary conditional operator\r\n - summary : if문을 간단하게 표현하는 operation\r\n - 형태 : exepression ? true-value : false-value\r\n```\r\n    var betterStudent : String\r\n    \r\n    if samGrade > chrisGrade {\r\n        betterStudent = \"Sam\"\r\n    } else {\r\n        betterStudent = \"Chris\"\r\n    }\r\n    \r\n    betterStudent = samGrade > chrisGrade ? \"Sam\" : \"Chris\"\r\n```\r\n\r\n### 4. 오늘의 질문\r\n - 마크다운 안의 박스(``)에서, 한 줄을 띄우면 박스에서 벗어나는데 어떻게 처리?\r\n - 해결책 : 띄우고자 하는 문장의 제일 앞에, 스페이스 4개를 add.\r\n","excerpt":"logical operation 1. opposite operation summary : !를 수식 앞에 붙여서, 반대 로직을 만든다 2. AND, OR operation summary : 조건문에서 또는, 그리고 형태 : AND : &&, OR :…","fields":{"slug":"/TIL_2_210102/"},"frontmatter":{"date":"Jan 02, 2021","title":"TIL_210102","tags":["TIL","dev","ios","swift","operator","?","ternary operator","ifelse"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### 1. iOS 배운 것\r\n\r\n```\r\n배운 것을 씁니다.\r\n```\r\n\r\n### 2. Gatsby 배운 것\r\n\r\n1) git 사용법\r\n\r\n2) gatsby를 위한 install\r\n\r\n3) 기타\r\n - origin developer의 developer documents를 보는 것이 가장 정확하다.\r\n - 다른 사람들이 2차 가공한 문서를 보면, 빠르게 학습되지 않는다. ","excerpt":"1. iOS 배운 것 2. Gatsby 배운 것 git 사용법 gatsby를 위한 install 기타 origin developer의 developer documents를 보는 것이 가장 정확하다. 다른 사람들이 2차 가공한 문서를 보면, 빠르게 학…","fields":{"slug":"/TIL_1_210101/"},"frontmatter":{"date":"Jan 01, 2021","title":"TIL_210101","tags":["TIL","dev","ios"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}