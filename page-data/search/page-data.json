{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\r\n\r\n# [2.11] MVC Pattern part(3)\r\n\r\n### URL 들만 따로 나누기\r\n* 1) routes 폴더를 만들고, 그 안에 URL들을 모두 변수화 시킨다.\r\n* 2) 변수화된 routes 들을 object화 해서 불러 쓸수 있게 한다. \r\n* 3) 그리고 그 routes 코드를 다른 파일들에서 import 한다\r\n* 결과적으로, 직접 URL을 쓰거나 기억할 필요 없이, routes 안의 변수를 불러와 URL생성 가능!\r\n```\r\n    // home\r\n    const HOME = \"/\"\r\n    const JOIN = \"/join\"\r\n\r\n    //user \r\n    const USERS = \"/users\"\r\n    const USERS_DETAIL = \"/:id\"\r\n\r\n\r\n    const routes = {\r\n        home : HOME,\r\n        join : JOIN,\r\n        users : USERS,\r\n        userDetail : USERS_DETAIL,\r\n    };\r\n\r\n    export default routes;\r\n\r\n```\r\n\r\n\r\n# [2.11] MVC Pattern part(4)\r\n\r\n### 1. Controller\r\n* function을 따로 분리하여 저장한다.\r\n* 보통 각 프로젝트에서, 모델들 마다 controller 파일을 생성함 ","excerpt":"2.11 MVC Pattern part(3) URL 들만 따로 나누기 routes 폴더를 만들고, 그 안에 URL들을 모두 변수화 시킨다. 변수화된 routes 들을 object화 해서 불러 쓸수 있게 한다.  그리고 그 routes 코드를 다른 파…","fields":{"slug":"/TIL_22_210122/"},"frontmatter":{"date":"Jan 22, 2021","title":"TIL-210122","tags":["JS","nodejs","youtubeclone"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [2.8] Express Core : Routing\r\n\r\n## js 파일을 다른 js파일에서 가져오기\r\n* import 들은 node_modules에서 코드들을 가져옴\r\n* 내가 js파일을 만들어서, js파일의 코드를 불러올 수도 있음\r\n\r\n### 1. export하려는 파일에 export 추가\r\n* app.js 파일\r\n```\r\nexport default app;\r\n```\r\n\r\n### 2. 가져올 파일에 import 추가\r\n\r\n* init.js 파일\r\n```\r\nimport app from \"./app\"\r\n```\r\n\r\n\r\n### 3. package.json에 호출할 js파일 명 변경\r\n* 기존에 index.js 불러오게 되있던걸, 새롭게 변경한걸로 수정\r\n\r\n\r\n### 4. Port에 접속하는 코드 재작성(init.js파일에)\r\n* `app.listen()` 요게 특정 포트로 접속했을떄, 이 함수를 실행해라는 의미.\r\n* 특정 port가 열려 있도록도 하는듯. 위 코드가 없으면 호출되지 않음. \r\n```\r\nconst PORT = 4000;\r\nconst handleListening = () => console.log(`Listening on https://localhost:${PORT}`)\r\napp.listen(PORT, handleListening)\r\n```\r\n\r\n\r\n## Router 사용\r\n* route들을 더 복잡하게 쪼개서 사용할때 사용\r\n* 예 : /user/changepassword, /user/login .... so on\r\n\r\n### 1.router로 사용할 js 파일 생성\r\n* 예 : router.js\r\n\r\n### 2. router 파일 내, 아래 코드 작성\r\n* 1) `const app = express()` 가 아님\r\n    * router : `const userRouter = express.Router()`\r\n    * `express.Router()`는 메인 app이 아니라, mini app을 호출하는 느낌임 \r\n    * `express()`는 main app을 호출하는 느낌\r\n    * 참고 : https://stackoverflow.com/questions/28305120/differences-between-express-router-and-app-get#:~:text=When%20var%20app%20%3D%20express(),different%20mini%20app%20is%20returned.\r\n* 2) route 안에 함수를 바로 사용\r\n    * 기존에는 함수명만 적어서 호출했다면, 여기선 함수를 바로 넣고 사용\r\n* 3) export default vs export\r\n    * export default는 해당 js파일 전체를 export 하는것\r\n    * export 는 해당 하는 변수만 export하는것\r\n```\r\n    import express from \"express\"\r\n\r\n    export const userRouter = express.Router();\r\n\r\n    userRouter.get(\"/\", (req, res) => res.send(\"Hello User!\"));\r\n    userRouter.get(\"/edit\", (req, res) => res.send(\"edit your page\"));\r\n    userRouter.get(\"/password\", (req, res) => res.send(\"Change your password\"));\r\n```\r\n\r\n\r\n### 3. router를 호출할 파일에 import 및 use\r\n* 1) import : `import { userRouter } from \"./router\";`\r\n    * 여기서 `{}`로 되있는 이유는, 해당 파일을 모두 export시킨게 아니라 `{}`안의 변수만 export했기때문\r\n* 2) use : `app.use(\"/user\", userRouter)`\r\n* user 페이지가, router.js의 `/` 페이지가 된다.\r\n\r\n\r\n# [2.9] MVC Pattern part(1)\r\n\r\n### 1. 의미\r\n* `M`odel : data\r\n* `V`iew : how deose the data looks like\r\n* `C`ontrol : function that looks for data\r\n\r\n* 위 세개를 코드에서 다 분리시켜야한다!\r\n\r\n### 2. 일단, function과 url이 섞이지 않게 다 나눈다.\r\n* 페이지(url)별로 router를 만들어서, 해당 router로 페이지 호출하게 만듬\r\n* 예 - glolbalRouter.js : \"/\"에 접속했을 때 호출되는 라우터\r\n* 예 - userRouter.js : \"/user\"에 접속했을 때 호출되는 라우터\r\n* 예 - videoRouter.js : \"/vidoe\"에 접속했을떄 호출되는 라우터\r\n\r\n","excerpt":"2.8 Express Core : Routing js 파일을 다른 js파일에서 가져오기 import 들은 node_modules에서 코드들을 가져옴 내가 js파일을 만들어서, js파일의 코드를 불러올 수도 있음 1. export하려는 파일에 expo…","fields":{"slug":"/TIL_21_210121/"},"frontmatter":{"date":"Jan 21, 2021","title":"TIL-210121","tags":["JS","nodejs","youtubeclone"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# [2.6] Express Core: Middlewares\r\n\r\n### Middleware 의미\r\n* 유저의 요청, 액션과 서버/브라우저의 액션 사이의 무언가\r\n* express에서 모든 함수는 middleware가 될 수 있음\r\n* 서버-유저 간의 플로우 예시\r\n    * 1) 유저의 브라우저 접속, 요청\r\n    * 2) index.js로 와서 서버 실행(express)\r\n    * 3) app 라우터를 보고 함수 실행 \r\n    * 4) 최종 response\r\n* middleware 예시\r\n```\r\nconst handleHome = (req, res) => res.send(\"Hi from home! dobedh\");\r\nconst betweenHome = () => console.log(\"I'm in between\")\r\napp.get(\"/\", betweenHome, handleHome) \r\n```\r\n\r\n### 2. Middleware의 형태\r\n* Middleware가 되는 function 들은 `next`를 갖는다\r\n* function의 parameter로 `req`, `res`, `next`를 갖는것\r\n* 최종 response가 되는 것들(즉, middleware가 아닌 것들)은 next를 안줌\r\n```\r\nconst handleHome = (req, res) => res.send(\"Hi from home! dobedh\");\r\nconst handleProfile = (req, res, next) => {\r\n        console.log(\"in Between\")\r\n        next()\r\n}\r\napp.get(\"/\", betweenHome, handleHome) \r\n```\r\n\r\n### 2.1 Middleware를 모든 라우터에 추가(globally)\r\n* 위 예시에서는, \"/\" 경로(라우터)에만 middleware추가한것\r\n* 웹의 모든 경로에 추가하려면 아래 코드 사용\r\n* `app.use(betweeHome)`\r\n* 위치는, router들 작성 전. 그래야 모든 router들에 적용됨\r\n\r\n### 3. Middleware의 기능\r\n* 중간에서 일어나는 모든 작업들 가능\r\n* 유저가 로그인할때 로그인 정보 확인\r\n* 웹에서 발생하는 모든 로그를 중간에서 남기는 일\r\n* 데이터, 정보를 중간에서 가져와서 확인하는 일\r\n\r\n\r\n# [2.7] Express core : Middlewares -part(2)\r\n\r\n### 1. Middleware 예시 : morgan\r\n* 유저의 log를 남겨줌\r\n* http://expressjs.com/en/resources/middleware/morgan.html\r\n\r\n#### 2. middleware 예시 : helmet\r\n* 보안을 위한 미들웨어\r\n* https://github.com/helmetjs/helmet\r\n\r\n### 3. middleware로 연결을 끊을 수 있음\r\n* next 함수를 실행하지 않고, res.send를 통해서 \r\n```\r\n    const notHappening = (req, res, next) => {\r\n        res.send(\"not happening\")\r\n    }\r\n\r\n    app.get(\"/\", notHappening, handdleHome)\r\n```\r\n\r\n### 4. 예시 : body parser\r\n* 유저가 보낸 정보(form)를 서버가 이해하도록 돕는 것\r\n* 이건 텍스트 정보, 이건 html 정보, 이건 이런 형태의 정보라고 서버에게 알려주는 것\r\n* json과 html 파일 읽을 수 있게 middleware로 추가\r\n```\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({extended:true}));\r\n```\r\n* http://expressjs.com/en/resources/middleware/body-parser.html\r\n\r\n### 5. 예시 : cookie parser\r\n* 유저로 부터 받은 cookie 정보를 서버가 이해하도록 돕는 것\r\n```\r\napp.use(cookieParser());\r\n```\r\n* https://www.npmjs.com/package/cookie-parser\r\n\r\n\r\n# Challenge \r\nhttps://codesandbox.io/s/empty-blueprint-forked-8zuni?file=/index.html\r\n\r\n","excerpt":"2.6 Express Core: Middlewares Middleware 의미 유저의 요청, 액션과 서버/브라우저의 액션 사이의 무언가 express에서 모든 함수는 middleware가 될 수 있음 서버-유저 간의 플로우 예시 유저의 브라우저 접속…","fields":{"slug":"/TIL_20_210120/"},"frontmatter":{"date":"Jan 20, 2021","title":"TIL-210120","tags":["JS","nodejs","youtubeclone"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Handling Routes with Express\r\n\r\n### 1. 전체적인 서버 작동 flow 요약\r\n* 1) 서버 생성\r\n    * express로 \r\n```\r\nconst express = require('express') // 1. import express \r\nconst app = express() // 2. excecute express\r\nconst PORT = 4000\r\n```\r\n* 2) Router 생성\r\n    * get, request 할수 있게, 접속시 반응하는 라우터\r\n```\r\napp.get(\"/\", handleHome)\r\napp.get(\"/profile\", handleProfile)\r\n```\r\n* 3) response \r\n    * Router에서 실행한 response를 실행\r\n    * 이 response에 html, css 등을 담아서 response로 보내면 웹사이트가 됨!\r\n\r\n### 2. 중요한 두개의 인터넷 작동 개념(브라우저에서?)\r\n* 1) `GET` \r\n    * 웹사이트 접속시, 브라우저가 GET method를 실행함.  \r\n    * 정보를 받아옴\r\n* 2) `POST` \r\n    * 웹사이트 로그인 등등하게 되면, POSt method를 실행함. \r\n    * 브라우저가 정보를 전달함\r\n \r\n* 요런게 웹사이트, 브라우저, http가 작동하는 방식\r\n\r\n### 3. request object vs response object\r\n* app(브라우저)에 접속할떄, 정보를 request 하게 되고\r\n* 브라우저는 이에 대해 response를 주게 된다. (뇌피셜)\r\n\r\n### 4. Get 코드 예시\r\n* `app.get()`사용\r\n* `app.get(접근경로, 실행함수)` 형태\r\n* 아래 코드에서는, \"/\"경로에 접속했을때 handleHome 실행\r\n\r\n```\r\n    function handleHome(req, res) {\r\n        console.log(req)\r\n        res.send(\"Hi from home!\")\r\n    }\r\n\r\n    app.get(\"/\", handleHome)\r\n```\r\n\r\n### 위 예제 풀 코드 \r\n```\r\n    const express = require('express') // 1. import express \r\n    const app = express() // 2. excecute express\r\n\r\n    const PORT = 4000\r\n\r\n    const handleListening = () => {\r\n    console.log(`Listening on : http://localhost:${PORT}`)\r\n    }\r\n\r\n    function handleHome(req, res) {\r\n        console.log(req)\r\n        res.send(\"Hi from home!\")\r\n    }\r\n\r\n    function handleProfile(req, res) {\r\n        res.send(\"You are seeing my profile\")\r\n    }\r\n\r\n    app.get(\"/\", handleHome) // app에 접근하려고 정보를 req할때 실행되는구나\r\n    app.get(\"/profile\", handleProfile)\r\n\r\n    app.listen(PORT, handleListening);\r\n```\r\n\r\n\r\n----\r\n\r\n## [2.5] ES6 on NodeJS using Babel\r\n\r\n### 1. Babel 뜻\r\n* 최신 js를 쓸 수 있게 해주는 툴\r\n* 최신의 js를 예전 버전의 js 코드로 변환해줌\r\n\r\n\r\n### 2. Babel node install\r\n* 1) 프로젝트 디렉토리에서 babel 설치\r\n    * npm install @babel/node\r\n* 2) babel홈피에서 babel env 버전 설치(최신이지만 실험버전 아)\r\n\r\n### 3. `.babelrc` 생성\r\n* 1) babel 실행되기 전에, babel은 우선 .babelrc를 훑는다\r\n* 2) 거기 우리가 설정해둔 preset들을 읽는다\r\n* 3) 가이드대로 bablerc내 코드 설정\r\n\r\n### 4. import 코드로 변환\r\n* index.js에서, 예전 방식으로 되어있던 코드를 변환\r\n    * 새코드 : import express from \"express\";\r\n    * 기존 코드 : const express = require('express')\r\n\r\n### 4. npm install @babel/core \r\n\r\n### 5. package.json 수정\r\n* 기존 \"start\"를 `babel-node index.js`로 수정\r\n* babel이 우리 코드를 읽어주도록 설정하는 것(그래야 import를 읽지!)\r\n\r\n\r\n### Arrow function \r\n\r\n* function의 ES6방식 : const로 함수 생성 가능\r\n* 기존\r\n```\r\nfunction handleProfile(req, res) {\r\n    res.send(\"You are seeing my profile\")\r\n}\r\n```\r\n* ES6\r\n```\r\nconst handleProfile = (req, res) => res.send(\"You are seeing my profile\");\r\n```\r\n\r\n\r\n### devDependency로 pacakage 설치하는 법\r\n* `devDependency`란? \r\n    * 프로젝트 실행할떄 필요한게 아니라, 개발자가 개발할떄 편하도록 하는걸 설치 하는 것!\r\n* `dependency`\r\n    * 내 프로젝트 실행과 관련하여 설치되는것 \r\n* 설치방법 : npm install 끝에 `-D`를 붙여준다\r\n```\r\nnpm install nodemon -D\r\n```\r\n* 설치하면, package.json에 devDependecy object가 생긴다\r\n\r\n\r\n\r\n\r\n### nodemon 으로 서버 자동 갱신\r\n* `nodemon` : 서버에 업데이트 사항이 자동 반영되도록 하는것(계속 껐다 킬 필요 없이)\r\n    * 1) npm install nodemon -D\r\n    * 2) package.json에 devDependency 생성 확인\r\n    * 3) scrpit의 start 앞에 nodemon 넣어주기\r\n        ```\r\n        \"start\" : \"nodemon --exec bable-node index.js\"\r\n        ```\r\n","excerpt":"Handling Routes with Express 1. 전체적인 서버 작동 flow 요약 서버 생성 express로  Router 생성 get, request 할수 있게, 접속시 반응하는 라우터 response  Router에서 실행한 respon…","fields":{"slug":"/TIL_19_210119/"},"frontmatter":{"date":"Jan 19, 2021","title":"TIL-210119","tags":["JS","nodejs","youtubeclone"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# NodeJS Theory\r\n\r\n## Who uses NodeJS\r\n\r\n* Paypal\r\n* Uber\r\n* Netflix\r\n\r\n## 1. installing NodeJS\r\n* mac일땐 brew였는데..\r\n* window는 사이트가서 직접 설치\r\n\r\n\r\n## 2. Express JS\r\n* NodeJS에서 작동하는 프레임워크\r\n    * `프레임워크`? : 이미 많은 코드로 만들어져있어서, 쉽게 서버 구축 등에 활용가능한 틀\r\n\r\n## 3. `npm` : Node Package Manager\r\n* 의미 : \r\n    * nodeJS와 관련된 모두가 각자의 pacakage를 올려둠.\r\n    * 그래서 우리가 다운로드 받아서 쓸 수 있음. 이걸 업데이트 하고. \r\n    * 여기서 우리가 직접 package를 만들수도 있고. \r\n    * 업데이트할 수 있다!!\r\n* 설치 : NodeJS 설치할때 자동으로 설치됨\r\n\r\n## 4. npm으로 프로젝트 시작하기\r\n* 1) `npm init`\r\n    * package name : 우리의 웹사이트가 package가 됨\r\n    * 나오는 정보들 넣음\r\n* 2) `package.json`이 생성됨\r\n* 3-1) `증요` package.json이 있는 디렉토리에서 npm을 실행해야함\r\n    * package.json 이 없는곳에서 실행하면, 이해를 못해서 package.json을 우리 프로젝트가 아닌 다른곳에 또 만들어버림\r\n* 3-2) `npm install express`\r\n    * `package-lock.json` 생성\r\n    * `node_modules` 생성 : npm으로 다운로드 된 것\r\n        * js파일에서 코드가 실행 될 때, 필요한 것들은 node_modules에서 찾아서 사용\r\n\r\n### 4.1 package.json 좋은점!\r\n* 협업할 때, 협업자에게 `package.json` 파일과 `index.js 파일만 넘기면됨\r\n* 협업자가 두 파일 받은 후, npm install 하면 package.json에 있는 정보를 읽어서 필요한 것들(node_modules) 자동 다운로드\r\n\r\n\r\n## 5. git init\r\n* 새로운 git repository를 만들고, git command를 활용하는데 필요한 메타데이터들을 받음..?\r\n* 상세 내용 : https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-init#:~:text=The%20git%20init%20command%20creates,run%20in%20a%20new%20project.\r\n\r\n\r\n## 6. github에서 repository 생성\r\n\r\n### 6.1 github에 commit 하지 않을 파일들 제외\r\n* 1) `.gitignore` 파일 생성\r\n* 2) 해당 파일에, commit 안할 파일들 리스트 작성 (내가 작성할 코드 외)\r\n    * node_modules\r\n    * package-lock.json (security를 위한 파일)\r\n    * .gitignore 검색해서 주로 제외하는 것들 copy-paste\r\n\r\n### 6.2 README.md 생성\r\n* 해당 프로젝트를 설명\r\n\r\n## 7. git repository와 local의 프로젝트 연결 - commit/push \r\n* 1) git remote add origin `git repository 주소(https://github.com/dobedh/wetube)`\r\n* 2) `git add .`\r\n* 3) `git commit -m \"commit message\"`\r\n* 4) `git push origin master`\r\n=> repository에 프로젝트가 commit 됨\r\n\r\n\r\n## 8. express 코드 삽입\r\n* 1) express에서 설치 코드를 index.js로 설치(express웹의 guide 참고)\r\n```\r\n    var express = require('express')\r\n    var app = express()\r\n```\r\n* 2) 위의 `require`는 다른 모듈을 어디선가 가져오는 것\r\n    * 위코드에서는, express라는 파일을 내 dir에서 찾으려고 함\r\n    * 만약 못찾으면 내 node_modules에서 찾으려고 함. (node module에 있음)\r\n* 3) express를 실행해서 app을 만듦\r\n* 4) `app.listen(4000)`로 4000포트 바라보도록 설정 \r\n* 5) 콘솔창에서 `node index.js` 입력하여 서버 실행\r\n\r\n## 9. package.json에 명령어 몰아넣기\r\n* `package.json`에 아래코드 넣어서, `node index.js`를 간소화 시킬 수 있음\r\n* `pacakage.json`에 우리가 필요한걸 다 넣는거네\r\n```\r\n  \"scripts\":{\r\n    \"start\" : \"node index.js\"\r\n  }\r\n```\r\n* 와우...그래서 매번 `npm start`를 했던거구나..\r\n\r\n## 10. callback 넣기\r\n* 아래와 같이 listen에 함수 추가하여 `callback 함수` 실행\r\n```\r\n    const handleListening = () => {\r\n    console.log('Listening on : http://localhost:4000')\r\n    }\r\n\r\n    app.listen(4000, handleListening);\r\n```\r\n\r\n\r\n## 기타\r\n* node 명령어로 프로젝트 내 파일을 실행","excerpt":"NodeJS Theory Who uses NodeJS Paypal Uber Netflix 1. installing NodeJS mac일땐 brew였는데.. window는 사이트가서 직접 설치 2. Express JS NodeJS에서 작동하는 프레임워…","fields":{"slug":"/TIL_18_210118/"},"frontmatter":{"date":"Jan 18, 2021","title":"TIL-210118","tags":["JS","nodejs","youtubeclone"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n## nomad Coder - challenge(8)\r\n\r\n\r\n### appendChild()\r\n* 동일한 node를 두번 appendChild하면, 해당 node가 두개가 생성되는 것이 아니라, 처음 append한 node의 위치가 두번째 append한 위치로 업데이트 된다.\r\n* 두번 이상 반복해서 같은 node를 넣을 수 없다!\r\n```\r\n    const body = document.querySelector(\"body\");\r\n\r\n    const titleText = [\"Pending\", \"Finished\"];\r\n\r\n    function boardAdd() {\r\n    const pending = document.createElement(\"h2\");\r\n    const finished = document.createElement(\"h2\");\r\n    pending.innerText = titleText[0];\r\n    finished.innerText = titleText[1];\r\n    body.appendChild(pending);\r\n    body.appendChild(finished);\r\n    }\r\n\r\n    function init() {\r\n    boardAdd();\r\n    }\r\n\r\n    init();\r\n```\r\n\r\n","excerpt":"nomad Coder - challenge(8) appendChild() 동일한 node를 두번 appendChild하면, 해당 node가 두개가 생성되는 것이 아니라, 처음 append한 node의 위치가 두번째 append한 위치로 업데이트 된다…","fields":{"slug":"/TIL_18_210118_2/"},"frontmatter":{"date":"Jan 18, 2021","title":"TIL-210118-part(2)","tags":["JS","appendchild"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Youtube Clone Coding - start!\r\n\r\n## Website vs Web app\r\n* `website` : 콘텐츠를 소비할 수 있고, 정적임. interaction 없음.\r\n* `webapp` : interaction 가능. 검색, 좋아요, 태그, 재생 등 많은 기능\r\n\r\n## What is NodeJS\r\n\r\n* `javascript`\r\n    * 웹에 내장되어있음. 웹/브라우저를 위해 주로 만들어진 언어.\r\n* `nodeJS`\r\n    * js를 브라우저 밖으로 가져와서, 유저가 local에서 사용할 수 있도록 한 것.\r\n    * 브라우저 밖의 javascript\r\n    * js를 이용해서 서버도 만들고, web scrapping도 하고..\r\n\r\n\r\n## Use cases for NodeJS\r\n* NodeJS vs DJango, Python\r\n    * `nodejs` : 무에서 유를 만들어내는 것 같은 자유도. 작은 블럭으로 성을 쌓는 것 같음\r\n    * `DJango`, `Python` : 매우 큰 성같은 도구를 사용하는 것. 먼저 이 도구에 대해 공부하고 쓸 줄 알아야 사용 가능\r\n\r\n* nodeJS가 적합한 때\r\n    * 많은 data를 handle 해야할때\r\n    * 실시간으로 데이터를 다루는 app (채팅, 우버)\r\n\r\n* nodeJS가 적합하지 않은 떄\r\n    * 컴퓨터의 하드웨어, 메모리 등에 acceess해서 hardcore한 작업을 해야 할 때\r\n    * 예 : 유튜브 같은 동영상 처리 서버 등","excerpt":"Youtube Clone Coding - start! Website vs Web app  : 콘텐츠를 소비할 수 있고, 정적임. interaction 없음.  : interaction 가능. 검색, 좋아요, 태그, 재생 등 많은 기능 What is …","fields":{"slug":"/TIL_17_210117_2/"},"frontmatter":{"date":"Jan 17, 2021","title":"TIL-210117-part2","tags":["JS","youtube_clone_coding","webapp"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n\r\n## Getting the Weather - part2 : API\r\n\r\n\r\n### 1. API\r\n* 특정 웹사이트로부터 데이터 얻거나, 저장된 것들 서로 주고받기위함\r\n* API에 있는 unit을 바꾸려면, 해당 API 문서에 방법 설명되어 있음\r\n    * 예 : weather API에서 섭씨로 바꾸는 방법은 \"units = metric\" 설정\r\n\r\n\r\n### 2. fetch\r\n* 데이터를 가져오게 하는 function\r\n* `.then()` :  fetch가 데이터를 다가지고 오면, 다음 함수를 실행시킴\r\n* fetch 밑 json 활용은 다음 코스에서....아래는 완성 코드\r\n\r\n```\r\nfunction getWeather(lat, lng) {\r\n    fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${API_KEY}&units=metric`\r\n    )\r\n    .then(function(response){\r\n        return response.json()\r\n    })\r\n    .then(function(json){\r\n        const temp = json.main.temp;\r\n        const place = json.name;\r\n        weather.innerText = `${temp} @ ${place}`\r\n    });\r\n}\r\n```","excerpt":"Getting the Weather - part2 : API 1. API 특정 웹사이트로부터 데이터 얻거나, 저장된 것들 서로 주고받기위함 API에 있는 unit을 바꾸려면, 해당 API 문서에 방법 설명되어 있음 예 : weather API에서 섭…","fields":{"slug":"/TIL_17_210117/"},"frontmatter":{"date":"Jan 17, 2021","title":"TIL-210117","tags":["JS","weather API","API"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n## Getting the Weather  - part1 : Geolocation\r\n\r\n\r\n### 1. navigator\r\n* 뜻 : 위치 값을 얻는 object. 안에 API들이 있어 사용.\r\n\r\n### (1) navigator.geolocation.getCurrentPosition()\r\n* 현재 위치의 위도, 경도, 고도 등의 정보값을 가져올 수 있음\r\n* ()안에 succes시 호출 함수, error시 호출 함수를 넣음\r\n```\r\nfunction askForCoords() {\r\n       navigator.geolocation.getCurrentPosition(handleGeoSuccess, handleGeoError);\r\n}\r\n```\r\n<br>\r\n\r\n### 2. 가져온 위치 값 localStorage에 저장\r\n* JSON.stringify() : 위치 obj를 string으로 바꿔서 locastorage에wjwkd\r\n```\r\nfunction saveCoords(coordsObj) {\r\n        const coordsInfo = JSON.stringify(coordsObj)\r\n        localStorage.setItem(COORDS, coordsInfo)\r\n}\r\n```\r\n\r\n### 3. self coding\r\n\r\n* `navigator.geolocation.getCurrentLocation()`\r\n    * 현재 device의 위도, 경도를 알려준다?!\r\n\r\n```\r\nnavigator.geolocation.getCurrentPosition(호출할 함수);\r\n```\r\n\r\n\r\n### 4. Nomad Coders - Challenge \r\n* 구현할 기능\r\n    * 국가정보 선택\r\n    * 선택한 정보를 local storage에 저장\r\n    * local storage에 저장된 국가 정보 있는지 확인\r\n    * 있다면, 해당 정보를 drop down의 default 값으로 표시\r\n* 완성 코드 : https://codesandbox.io/s/day-six-blueprint-forked-hnyd8?file=/src/index.js\r\n\r\n\r\n### 5. 기타\r\n* 꿀팁 : js에서 object에 key값과 value값이 같을때는, key 값 하나만 적으면 됨\r\n```\r\nconst coordsObj = {\r\n        latitude,\r\n        longitude\r\n    }\r\n```\r\n","excerpt":"Getting the Weather  - part1 : Geolocation 1. navigator 뜻 : 위치 값을 얻는 object. 안에 API들이 있어 사용. (1) navigator.geolocation.getCurrentPosition()…","fields":{"slug":"/TIL_16_210116/"},"frontmatter":{"date":"Jan 16, 2021","title":"TIL-210116","tags":["JS","TIL"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n## Image Background\r\n\r\n### 1. Math : random number생성하기\r\n* `Math.random()` : 랜덤 숫자를 생성\r\n* `Math.floor` : 숫자 반올림\r\n* `Math.ceil` : 숫자 내림\r\n```\r\nMath.floor(Math.random()*4)+1\r\n```\r\n\r\n### 2. background 이미지 추가하기\r\n* 아래 코드 보고 추가 공부 필요\r\n    * `image = new image()` : 요건 무슨 기능?\r\n    * `image.src = \"\"` : 요것도 공부\r\n    * body에 appendChild로 결국 `<image src>` 요걸 넣은건가?\r\n```\r\nfunction paintImage(imgNumber) {\r\n    const image = new Image()\r\n    image.src = `./images/${imgNumber + 1}.jpg`;\r\n    image.classList.add('bgImage')\r\n    body.appendChild(image)\r\n}\r\n```\r\n\r\n### 3. classList.add\r\n* 의미 : 특정 element에 class 명을 추가함\r\n```\r\nimage.classList.add('bgImage')\r\n```\r\n\r\n## Self study\r\n\r\n### 1. background image 넣는법\r\n* object.style.backgroundImage = \"url('경로')\"\r\n```\r\nbody.style.backgroundImage = \"url('./images/image1.jpg')\";\r\n```\r\n\r\n### 2. background image 꽉차게 하는법\r\n* object.style.backgroundSize = \"100%\"\r\n```\r\nbody.style.backgroundSize = \"100%\";\r\n```\r\n\r\n\r\n### 3. background image를 fix 시키기(스크롤해서 더 보기 x)\r\n* object.style.backgroundAttachment = \"fixed\"\r\n\r\n<br>\r\n\r\n## 기타 \r\n* 항상 코드를 최대한 분절.\r\n* 나중에 바뀔 수 있는 것들은 변수화 시켜서 따로 빼누는 것이 좋다.","excerpt":"Image Background 1. Math : random number생성하기  : 랜덤 숫자를 생성  : 숫자 반올림  : 숫자 내림 2. background 이미지 추가하기 아래 코드 보고 추가 공부 필요  : 요건 무슨 기능?  : 요것도 공…","fields":{"slug":"/TIL_15_210115/"},"frontmatter":{"date":"Jan 15, 2021","title":"TIL_210115","tags":["TIL","js","Math","image"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Making a To Do List part3 - (3)\r\n\r\n### 1. target\r\n* 의미 : event 발생시, 어떤 코드에서 event가 발생했는지 확인 가능\r\n\r\n\r\n### 1.1 target.parentNode\r\n* 해당 target의 parent가 누군지 확인 가능\r\n\r\n### 2. removeChild()\r\n* 해당 parentnode의 child를 삭제하는 코드\r\n```\r\n    const toDoList = document.querySelector(\".js-toDoList\");\r\n\r\n    function deleteToDo(event) {\r\n        const btn = event.target;\r\n        const li = btn.parentNode;\r\n        toDoList.removeChild(li);\r\n    }\r\n```\r\n\r\n### 3. .filter()\r\n* 의미 : array의 모든 item에 filter()안의 함수를 실행시키고, 함수 조건에 맞는 값만으로 다시 array를 만드는 기능\r\n    * forEach()와 함께 기억!\r\n    * 둘다 ()안의 function을 순차적으로 array에 모두 실행시킨다.\r\n```\r\nfunction deleteToDo(event) {\r\n    const btn = event.target;\r\n    const li = btn.parentNode;\r\n    toDoList.removeChild(li);\r\n    const cleanToDos = toDos.filter(function(toDo){\r\n        return toDo.id !== parseInt(li.id)\r\n    });\r\n    toDos = cleanToDos;\r\n    saveToDo();\r\n}\r\n```\r\n\r\n### 3.1 parseInt\r\n* string을 int(숫자)로 바꿔줌\r\n```\r\nparseInt(li.id)\r\n```\r\n\r\n<br>\r\n\r\n\r\n# Nomad Coder - Challenge\r\n\r\n* window의 사이즈가 바뀔때마다 window의 배경색이 바뀌게 만들기 \r\n```\r\n    // <⚠️ DONT DELETE THIS ⚠️>\r\n    import \"./styles.css\";\r\n    // <⚠️ /DONT DELETE THIS ⚠️>\r\n\r\n    const body = document.querySelector(\"body\"),\r\n    h2 = document.createElement(\"h2\");\r\n\r\n    const greeting = \"hello World\";\r\n\r\n    function bodyText() {\r\n    h2.innerText = greeting;\r\n    h2.style.color = \"white\";\r\n    body.appendChild(h2);\r\n    body.style.backgroundColor = \"blue\";\r\n    }\r\n\r\n    function windowMove() {\r\n    const windowSize = window.innerWidth;\r\n    if (windowSize < 1000) {\r\n        body.style.backgroundColor = \"red\";\r\n    } else if (windowSize < 1250) {\r\n        body.style.backgroundColor = \"green\";\r\n    } else {\r\n        body.style.backgroundColor = \"blue\";\r\n    }\r\n    }\r\n\r\n    function init() {\r\n    bodyText();\r\n    window.addEventListener(\"resize\", windowMove);\r\n    }\r\n    init();\r\n\r\n```","excerpt":"Making a To Do List part3 - (3) 1. target 의미 : event 발생시, 어떤 코드에서 event가 발생했는지 확인 가능 1.1 target.parentNode 해당 target의 parent가 누군지 확인 가능 2. …","fields":{"slug":"/TIL_14_210114/"},"frontmatter":{"date":"Jan 14, 2021","title":"TIL_210114","tags":["TIL","js","filter()","forEach()","target"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Nomad Coder Vanila JS challenge code - 1\r\n\r\n### 구현해야 하는 기능\r\n* 마우스 enter시 문자, 색깔 변경\r\n* 마우스 leave시 문자, 색깔 변경\r\n* 윈도우 창 resize시 문자, 색깔 변경\r\n* 마우스 우클릭시, 문자, 색깔 변경\r\n\r\n```\r\n    // <⚠️ DONT DELETE THIS ⚠️>\r\n    import \"./styles.css\";\r\n    const colors = [\"#1abc9c\", \"#3498db\", \"#9b59b6\", \"#f39c12\", \"#e74c3c\"];\r\n    // <⚠️ /DONT DELETE THIS ⚠️>\r\n\r\n    const h2 = document.querySelector(\"h2\"),\r\n    html = document.querySelector(\"html\");\r\n\r\n    const superEventHandler = {\r\n    mouseEnter: function () {\r\n        h2.innerHTML = \"Mouse Entered :)\";\r\n        h2.style.color = colors[0];\r\n    },\r\n    mouseLeave: function () {\r\n        h2.innerHTML = \"Mouse Leaved :(\";\r\n        h2.style.color = colors[1];\r\n    },\r\n    rightClick: function () {\r\n        h2.innerText = \"Mouse right clicked!\";\r\n        h2.style.color = colors[2];\r\n    },\r\n    resize: function () {\r\n        h2.innerText = \"window resized <>\";\r\n        h2.style.color = colors[3];\r\n    }\r\n    };\r\n\r\n    function init() {\r\n    h2.addEventListener(\"mouseenter\", superEventHandler.mouseEnter);\r\n    h2.addEventListener(\"mouseleave\", superEventHandler.mouseLeave);\r\n    html.addEventListener(\"contextmenu\", superEventHandler.rightClick);\r\n    window.addEventListener(\"resize\", superEventHandler.resize);\r\n    }\r\n    init();\r\n\r\n```","excerpt":"Nomad Coder Vanila JS challenge code - 1 구현해야 하는 기능 마우스 enter시 문자, 색깔 변경 마우스 leave시 문자, 색깔 변경 윈도우 창 resize시 문자, 색깔 변경 마우스 우클릭시, 문자, 색깔 변경","fields":{"slug":"/TIL_13_210113/"},"frontmatter":{"date":"Jan 13, 2021","title":"TIL_210113","tags":["TIL","eventListener","js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Making a To Do List part Three\r\n\r\n\r\n### 1. remove by id\r\n* 방법 : id 기준으로 해당 태그를 호출한 후, `.remove()` 사용\r\n```\r\nconst clickedId = event.path[1].id;\r\nconst clickedList = document.getElementById(clickedId);\r\nclickedList.remove();\r\n```\r\n\r\n\r\n### 2. remove in locaStorage\r\n* 방법 : `.splice` 사용? (배열에서 배열 내 값 삭제)\r\n```\r\nconst loadedToDos = localStorage.getItem(TODOS_LS);\r\nconst parsedToDos = JSON.parse(loadedToDos);\r\nparsedToDos.splice(clickedId-1, 1);\r\n```\r\n\r\n\r\n### self code\r\n```\r\n    const toDoForm = document.querySelector(\".js-toDoForm\"),\r\n        toDoInput = toDoForm.querySelector(\"input\"),\r\n        toDoList = document.querySelector(\".js-toDoList\");\r\n\r\n    const TODOS_LS = \"toDos\";\r\n\r\n    let toDos = [];\r\n\r\n    function handleClick(event) {\r\n        const clickedId = event.path[1].id;\r\n        const clickedList = document.getElementById(clickedId);\r\n        clickedList.remove();\r\n        const loadedToDos = localStorage.getItem(TODOS_LS);\r\n        const parsedToDos = JSON.parse(loadedToDos);\r\n        parsedToDos.splice(clickedId-1, 1);\r\n        toDos = parsedToDos;\r\n        saveToDo();\r\n    }\r\n\r\n    function saveToDo() {\r\n        localStorage.setItem(TODOS_LS, JSON.stringify(toDos))\r\n    }\r\n\r\n    function paintToDo(text) {\r\n        const li = document.createElement(\"li\");\r\n        const delBtn = document.createElement(\"button\");\r\n        const span = document.createElement(\"span\");\r\n        const newId = toDos.length + 1;\r\n        delBtn.innerText = \"✔\";\r\n        span.innerText = text;\r\n        li.appendChild(span);\r\n        li.appendChild(delBtn);\r\n        li.id = newId;\r\n        toDoList.appendChild(li);\r\n        const toDoObj = {\r\n            text : text,\r\n            id : newId\r\n        };\r\n        toDos.push(toDoObj);\r\n        saveToDo()\r\n    }   \r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        const currentValue = toDoInput.value;\r\n        paintToDo(currentValue);\r\n        toDoInput.value = \"\";\r\n    }\r\n\r\n    function loadToDos(){\r\n        const loadedToDos = localStorage.getItem(TODOS_LS);\r\n        if ( loadedToDos !== null) {\r\n            const parsedToDos = JSON.parse(loadedToDos);\r\n            parsedToDos.forEach(function(toDo){\r\n                paintToDo(toDo.text)\r\n            })\r\n        }\r\n    }\r\n\r\n    function init() {\r\n        loadToDos();\r\n        toDoForm.addEventListener(\"submit\", handleSubmit);\r\n        toDoList.addEventListener(\"click\", handleClick)\r\n    }\r\n\r\n    init();\r\n```\r\n","excerpt":"Making a To Do List part Three 1. remove by id 방법 : id 기준으로 해당 태그를 호출한 후,  사용 2. remove in locaStorage 방법 :  사용? (배열에서 배열 내 값 삭제) self code","fields":{"slug":"/TIL_12_210112/"},"frontmatter":{"date":"Jan 12, 2021","title":"TIL_210112","tags":["TIL","data","js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Making a To Do List Par two\r\n\r\n### 1. localStorage에 object로 저장 \r\n* (1) `JSON.stringify()` 필요\r\n    * 의미 : JS object를 string으로 변환해줌\r\n    * localStorage는 string만을 저장하기 때문에, 변환필요\r\n* (2) `JSON.parse()`\r\n    * 의미 : String으로 저장된 값을 다시 JS Object로 변환\r\n```\r\nlocalStorage.setItem(\"toDoItem\", JSON.stringify(toDoArray))\r\n```\r\n<br>\r\n\r\n### 2. array 추가하기\r\n* `.push()` 사용\r\n```\r\nconst toDoArray = []\r\nconst addToDoArray = toDoArray.push()\r\n```\r\n<br>\r\n\r\n### 3.forEach\r\n* sum : array를 위한 function. array속 하나하나에 대하여 function을 실행함\r\n* 예 : parsedToDos.`forEach(sth)` => parsedToDos array안의 값들에게 하나씩 sth이라는 function 을 실행함\r\n```\r\nfunction loadToDos(){\r\n    const loadedToDos  = localStorage.getItem(TODOS_LS);\r\n    if ( loadedToDos !== null) {\r\n        const parsedToDos = JSON.parse(loadedToDos);\r\n        parsedToDos.forEach(function(toDo){\r\n            paintToDo(toDo.text)\r\n        })\r\n    }\r\n}\r\n```\r\n<br>\r\n\r\n\r\n### 기타\r\n\r\n* dobe-blog\r\n    * disqus 댓글 달기 : disqus 사이트에서 shortname 생성하여 코드 넣기\r\n    * tsx 파일의 주석 처리 {/* */} 로 주석 처리 가능","excerpt":"Making a To Do List Par two 1. localStorage에 object로 저장 (1)  필요 의미 : JS object를 string으로 변환해줌 localStorage는 string만을 저장하기 때문에, 변환필요 (2)  의미…","fields":{"slug":"/TIL_11_210111/"},"frontmatter":{"date":"Jan 11, 2021","title":"TIL_210111","tags":["TIL","data","js","forEach",".push","array","JSON"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n## Making a TO-DO List\r\n\r\n### appendChild, innerText\r\n* `appendChild` : tag 안/밑에 또다른 tag를 넣을 수 있음\r\n* `innerText` : 태그가 표시하는 text 값을 넣을 수 있음\r\n    * innerText 적용 대상이 혼동 되는 듯\r\n```\r\nfunction paintToDo(text) {\r\n    const li = document.createElement(\"li\")\r\n    const delBtn = document.createElement(\"button\")\r\n    delBtn.innerText = \"✔\"\r\n    li.innerText = text\r\n    li.appendChild(delBtn)\r\n    toDoList.appendChild(li)\r\n}   \r\n```\r\n\r\n### Eliment 만들기\r\n* document.createElement(\"li\")\r\n\r\n\r\n\r\n\r\n\r\n### pre-self code\r\n```\r\n    const todo = document.querySelector(\".js-todo\"),\r\n        todoInput = todo.querySelector(\"input\"),\r\n        list = document.querySelector(\".js-list\")\r\n\r\n    const TODO_LIST = \"todoItem\",\r\n        addTodoList = document.createElement(\"li\");\r\n\r\n    function storageAdd() {\r\n        event.preventDefault();\r\n        const addedItem =  todoInput.value;\r\n        console.log(addedItem);\r\n        localStorage.setItem(TODO_LIST, addedItem);\r\n        listAdd(addedItem);\r\n    }\r\n\r\n    function listAdd(item) {\r\n        addTodoList.innerText(item);\r\n        list.appendChild(addTodoList);\r\n    }\r\n\r\n\r\n    function todoWrite() {\r\n        todo.addEventListener(\"submit\", storageAdd);\r\n    }\r\n\r\n    function init(){\r\n        todoWrite()\r\n    }\r\n\r\n    init()\r\n```\r\n\r\n\r\n### 기타\r\n* 헷갈리는 것\r\n    * `O` : innerHTML = \"text\" \r\n    * `X` : innerHTML(\"Text\")\r\n\r\n* html 태그내 meta charset\r\n    * 이모지 등 글꼴 표시하기 위해서는 html내 표기 필수\r\n    ```\r\n    <!DOCTYPE html>\r\n     <html>\r\n       <meta charset = \"utf-8\">\r\n     </html>\r\n    ```\r\n* window에서 이모지창 단축키 : 윈도우키 + . or ,","excerpt":"Making a TO-DO List appendChild, innerText  : tag 안/밑에 또다른 tag를 넣을 수 있음  : 태그가 표시하는 text 값을 넣을 수 있음 innerText 적용 대상이 혼동 되는 듯 Eliment 만들기 do…","fields":{"slug":"/TIL_10_210110/"},"frontmatter":{"date":"Jan 10, 2021","title":"TIL_210110","tags":["TIL","data","js","list","ul"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Saving the User Name part1-1\r\n<br>\r\n\r\n### FORM - 데이터 submit, 가져오기\r\n\r\n<br>\r\n\r\n* Summary\r\n    1. form에 eventListener로 submit 추가\r\n    2. input의 value값(입력된 데이터)를 .value로 가져옴\r\n\r\n<br>\r\n\r\n* 1. form에 eventListener 추가\r\n        * 형태 : .addEventListener\r\n        * 기능 : 특정 이벤트가 발생하면, 특정 액션을 하도록 tag에 eventListener 추가\r\n        ```\r\n            function askForName() {\r\n                form.classList.add(SHOWING_DS);\r\n                form.addEventListener(\"submit\", handleSubmit)\r\n            }\r\n\r\n            function handleSubmit() {\r\n                const addUser = input.value\r\n                localStorage.setItem(USER_LS, addUser);\r\n                loadName();\r\n            }\r\n        ```\r\n<br>\r\n\r\n* 2. input의 value 값 가져오기\r\n```\r\nconst addUser = input.value\r\n```\r\n\r\n<br><br>\r\n    \r\n\r\n### 기타\r\n\r\n\r\n<br>\r\n* classList.add / classList.remove\r\n    * class명 추가 / 삭제\r\n    * 예시\r\n    ```\r\n    form.classList.add(SHOWING_DS)\r\n    form.classList.remove(SHOWING_DS)\r\n    ```\r\n<br>\r\n\r\n* event.preventDefault()\r\n    * 특정 이벤트가 발생했을 때, 기본적으로 브라우저가 하는 행동을 막음(예 : 페이지 새로고침, document레벨 전체)\r\n<br>\r\n\r\n* 최대한 모든 것을 분절해서, 클래스명이든 기능이든 다 분절해서 코드화 \r\n","excerpt":"Saving the User Name part1-1 FORM - 데이터 submit, 가져오기 Summary form에 eventListener로 submit 추가 input의 value값(입력된 데이터)를 .value로 가져옴 form에 event…","fields":{"slug":"/TIL_9_210109/"},"frontmatter":{"date":"Jan 09, 2021","title":"TIL_210109","tags":["TIL","data","js"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n # Saving the User Name - part1\r\n\r\n\r\n### Local Storage\r\n* sum. : 작은 정보들을 client단에서 저장하고 있는 것\r\n\r\n\r\n### 기타\r\n* JS에서, HTML의 class를 가져오는 법 : `.className`\r\n```\r\nconst form= document.querySelector(\".js-form\")\r\n```\r\n\r\n* form \r\n```\r\n<form class=\"js-form\">\r\n <input type=\"text\" placeholder=\"what is your name\">\r\n</form>\r\n```\r\n\r\n* html에서  class명을 하나에 두개 넣는 법\r\n    * 띄어쓰기로 추가 한다\r\n```\r\n<form class=\"js-form newClass1 newClass2></form>\r\n```\r\n\r\n* css에서 두개의 클래스에 동시 속성을 넣는법 : `,`로 클래스명 구분\r\n```\r\n.form,\r\n.text {\r\n    color : red\r\n}\r\n```","excerpt":"Saving the User Name - part1 Local Storage sum. : 작은 정보들을 client단에서 저장하고 있는 것 기타 JS에서, HTML의 class를 가져오는 법 :  form  html에서  class명을 하나에 두개 …","fields":{"slug":"/TIL_8_210108/"},"frontmatter":{"date":"Jan 08, 2021","title":"TIL_210108","tags":["JS","data","til"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### views\r\n* 뜻 : 화면에 표시되는 모든 것이 view \r\n* 예시\r\n    * 텍스트\r\n    * 슬라이더\r\n    * 버튼\r\n    * VStack(Vertical Stack)\r\n        * view의 일종으로, 다른 view들을 담는 container 역할\r\n        * Vertically 담음\r\n    * HStack\r\n        * Horizontally 담음\r\n\r\n### Swift View Modifiers\r\n* 뜻 : CSS같은 개념. UI적 요소들을 바꿀 수 있음\r\n* 규칙 : View modifier가 적힌 순서대로 코드가 적용된다.\r\n* 예시 : 아래 예시에서, border에는 opacity가 적용 안됨\r\n```\r\nText(\"100\")\r\n    .opacity(0.5)\r\n    .border(color.red, width: 2)\r\n```\r\n### Modifers 유의사항\r\n* 각 modifer가 return하는 view 종류가 다르다\r\n    * 예를 들어, .bold() -> Text view를 리턴\r\n    * 하지만 lineSpacing()은 그냥 view를 리턴\r\n* 때문에 modifier를 놓는 순서를 잘 고려해야 함. \r\n    * bold를 lineSpacing에 놓으면, 안됨. bold는 text view에 적용해야하는 것이라\r\n\r\n#### Modifier(1) - font()\r\n* font size를 하드코딩 하는게 아니라, title, footnote 등의 속성으로 해두면 화면 크기에 따라 size를 조정해줌\r\n\r\n#### Modifier(1) - kerning()\r\n* 기능 : letter spacing\r\n\r\n\r\n\r\n### 기타\r\n* ctrl + cmmd + space : 이모지 창\r\n        ","excerpt":"views 뜻 : 화면에 표시되는 모든 것이 view  예시 텍스트 슬라이더 버튼 VStack(Vertical Stack) view의 일종으로, 다른 view들을 담는 container 역할 Vertically 담음 HStack Horizontall…","fields":{"slug":"/TIL_7_210107/"},"frontmatter":{"date":"Jan 07, 2021","title":"TIL_210107","tags":["TIL","swift"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Making a JS Clock - part1\r\n\r\n### 1. ternary operation\r\n* summary : if문을 간단히 표현. 미니 if문\r\n* 형태 : condition ? true result : false result\r\n* 예시 :\r\n```\r\nconst time = `${hours < 10 ? `0${hours}` : hours} : ${\r\nminutes < 10 ? `0${minutes}` : minutes} : ${\r\nseconds < 10 ? `0${seconds}` : seconds}`;\r\n``` \r\n\r\n### 2. 연습(1)\r\n```\r\n    const clockContainer = document.querySelector(\".js-clock\");\r\n    const clockTitle = clockContainer.querySelector(\"h1\");\r\n\r\n    var reset =  setInterval(getTime, 100);\r\n\r\n    function getTime() {\r\n        const date = new Date();\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        const seconds = date.getSeconds();\r\n        const time = `${hours} : ${minutes} : ${seconds}`;\r\n        clockTitle.innerText = time;\r\n    }\r\n\r\n    function init(){\r\n        getTime();\r\n    \r\n    }\r\n    init();\r\n```\r\n\r\n#### 2.1 코드(1) : 시간 object\r\n * Date() 현재 시간을 가져온다\r\n    * Date().getHours()\r\n    * Date().getMinutes() ...\r\n\r\n#### 2.2 코드(2) : 시간 reset\r\n * setInterval(function, ms) : 기입한 ms 단위로 function 재실행\r\n * setTimeout(function, ms) : 한번만 실행? 여튼 차이가 있음 인터벌과\r\n\r\n\r\n### 3. 연습(2)\r\n* summary : 연습1에서 구현한 코드에, 시간 형태를 00 단위로 수정\r\n* 사용한 코드 : ternary operator. 미니 if 문\r\n```\r\n    const clockContainer = document.querySelector(\".js-clock\");\r\n    const clockTitle = clockContainer.querySelector(\"h1\");\r\n\r\n\r\n\r\n    function getTime() {\r\n        const date = new Date();\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        const seconds = date.getSeconds();\r\n        const time = `${hours < 10 ? `0${hours}` : hours} : ${\r\n            minutes < 10 ? `0${minutes}` : minutes} : ${\r\n            seconds < 10 ? `0${seconds}` : seconds}`;\r\n        clockTitle.innerText = time;\r\n    }\r\n\r\n    function init(){\r\n        getTime();\r\n        setInterval(getTime, 1000);\r\n    }\r\n    init();\r\n```\r\n\r\n### 기타\r\n* 프로그래밍 시, 항상 분리해서 생각!\r\n    * 코드도, 파일도, 최대한 분리해서 깔끔하게. 정리되게. ","excerpt":"Making a JS Clock - part1 1. ternary operation summary : if문을 간단히 표현. 미니 if문 형태 : condition ? true result : false result 예시 : 2. 연습(1) 2.1 …","fields":{"slug":"/TIL_6_210106/"},"frontmatter":{"date":"Jan 06, 2021","title":"TIL_210106","tags":["TIL","JS","tip"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# DOM\r\n\r\n### DOM(1) - if else Function practice_3\r\n* summary\r\n    * 문장 클릭시 색깔이 바뀌는 코드 짜기\r\n    * class를 추가해, pointer 기능과 색 변화 기능 두가지 모두를 구현하기 \r\n\r\n<br>\r\n\r\n* 1차 코드 : `clssList` 사용\r\n    * classList 기능 : 많은 function들 사용 가능(add, remove, contains..)\r\n```\r\n        const title = document.querySelector(\"#title\");\r\n        const CLASS_CLICKED = \"clicked\"\r\n        const CLASS_BTN = \"btn\"\r\n\r\n        function handleClick(){\r\n            const classList = title.classList\r\n            if (classList.contains(CLASS_CLICKED)) {\r\n                classList.remove(\"clicked\")\r\n            } else {\r\n                classList.add(\"clicked\")\r\n            }\r\n        }\r\n\r\n        function init() {\r\n            title.addEventListener(\"click\", handleClick);\r\n        }\r\n        init();\r\n```\r\n<br>\r\n\r\n* 2차 코드 : `toggle` 사용\r\n    * toggle의 기능 : if visible is set remove it, otherwise add it (코드 훨씬 짧아짐!)\r\n```\r\n        const title = document.querySelector(\"#title\");\r\n        const CLASS_CLICKED = \"clicked\"\r\n\r\n        function handleClick(){\r\n            title.classList.toggle(CLASS_CLICKED)\r\n        }\r\n\r\n        function init() {\r\n            title.addEventListener(\"click\", handleClick);\r\n        }\r\n        init();\r\n```\r\n\r\n### 기타\r\n* const 로 정의하더라도, HTML에 바로 반영이 되네. \r\n* JS에서는 css의 값들을 직접 건드리기보다 로직만 짜는 것이 좋다. \r\n    * 그래야 jS폴더내에서 색이 뭔지, 크기가 어떤지 등 세부 값들에 대해 신경안쓰고 로직만 신경 쓸 수 있기때문\r\n* html 태그에 2개 이상의 class 할당 가능. class=\"\" 안에서 띄어쓰기로 클래스 명 추가, 구분","excerpt":"DOM DOM(1) - if else Function practice_3 summary 문장 클릭시 색깔이 바뀌는 코드 짜기 class를 추가해, pointer 기능과 색 변화 기능 두가지 모두를 구현하기  1차 코드 :  사용 classList 기…","fields":{"slug":"/TIL_5_210105/"},"frontmatter":{"date":"Jan 05, 2021","title":"TIL_210105","tags":["TIL","js","ifelse"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Function\r\n\r\n### Function(1) - basic\r\n* 형태 : `function nameHere(parameter1, parameter2) {}\r\n* why use? : 반복 작업 제거. 한번에 특정 기능 호출\r\n* parameter는 1개 이상 올 수 있다. parameter를 입력하면 function 내에 전달한다. \r\n* 예시\r\n```\r\n  function myInfo(name, age) {\r\n      console.log(\"hello\", name, \", you are \", age, \"years old.\")\r\n  }\r\n\r\n  myInfo(\"Donghyun\", 29)\r\n```\r\n\r\n### Function(2) - 다른 방식\r\n* '+' 사용 (, 대신)\r\n```\r\nfunction myInfo(name, age) {\r\n    console.log(\"hello\" + name + \"you are \" + age + \"years old.\")\r\n}\r\n```\r\n\r\n* '`' 사용\r\n  * 형태 : '`'로 전체를 감싸고, 변수는 ${}로 감싼다.\r\n  * 훨씬더 코드 깔끔  \r\n```\r\nfunction myInfo(name, age) {\r\n    console.log(`hello ${name}, you are ${age} years old`)\r\n}\r\nmyInfo(\"Donghyun\", 29)\r\n```\r\n\r\n### Fucntion(3) - return\r\n* function은 return 값을 보내준다. \r\n\r\n### function(4) - math 연습\r\n* object 안에 function을 담고, 호출한다\r\n* function에 꼭 이름을 할당해줄 필요는 없네. 바로 parameter값 넣는다.\r\n```\r\n  const calculator = {\r\n      plus : function(a, b){\r\n          return a + b;\r\n      },\r\n      minus : function(a, b){\r\n          return a - b;\r\n      },\r\n      divide : function(a, b){\r\n          return a / b\r\n      },\r\n      powerOf : function(a, b){\r\n          return a ** b\r\n      }\r\n  }\r\n\r\n  const doMath = {\r\n      plusResult : calculator.plus(2,3),\r\n      minusResult : calculator.minus(10,2),\r\n      divideResult : calculator.divide(8,4),\r\n      powerOfResult : calculator.powerOf(1, 3)\r\n  }\r\n\r\n  console.log(doMath)\r\n```\r\n","excerpt":"Function Function(1) - basic 형태 : `function nameHere(parameter1, parameter2) {} why use? : 반복 작업 제거. 한번에 특정 기능 호출 parameter는 1개 이상 올 수 있다. …","fields":{"slug":"/TIL_4_210104/"},"frontmatter":{"date":"Jan 04, 2021","title":"TIL_210104_(1)","tags":["TIL","js","nomadcoder","function"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# DOM\r\n\r\n### DOM(1) - document (JS - HTML)\r\n* summary\r\n  * 의미 : document는 js 파일에 연결된 `html 파일 전체에 접근`할 수 있도록 해준다\r\n  * 형태 : document.blahblah\r\n* 예시 : document.getElementById\r\n\r\n### DOM(2) - 의미, 형태\r\n* summary\r\n  * 의미\r\n    * Document Object Module.\r\n    * HTML내의 모든 것들을 객체 내의 값들로 변환해준다. \r\n* 기능 : JS를 통해 객체화된 HTML 파일들을 조정 가능\r\n* 예시 : \r\n```\r\nconst title = document.getElementById(\"title\")\r\ntitle.innerHTML(\"Hi! From JS!\")\r\n```\r\n\r\n### DOM(3) - DOM안에 있는 key들 예시\r\n* summary : 어떤 key값으로 html을 바꿀 수 있는지 예시를 살핀다.\r\n* how : console.dir(document)를 통해서 document ojbect내의 key값들을 살핀다.\r\n* 예시 \r\n```\r\n  const title = document.querySelector(\"#title\")\r\n\r\n  title.innerHTML = \"Hi! From JS!\"\r\n  title.style.color = \"green\"\r\n  document.title = \"기발자 :)\"\r\n\r\n  console.dir(document)\r\n```\r\n* 참고 - `querySelector` : The Document method querySelector() returns the `first Element` within the document that matches the specified selector, or group of selectors. If no matches are found, null is returned. \r\n\r\n### DOM(4) - Event Handler\r\n* summary \r\n  * 특정 이벤트 발생시, 그에 따른 action 실행(function 등) \r\n  * 형태 : `addEventListener`\r\n<br>\r\n\r\n* 예시1 : 윈도우 사이즈를 옮기는 event시, console에 표시\r\n```\r\n  function handleSize(event){\r\n      console.log(event)\r\n  };\r\n\r\n  window.addEventListener(\"resize\", handleSize);\r\n```\r\n<br>\r\n\r\n* 예시2 : title의 문장 클릭시 색깔을 변경\r\n```\r\n    const title = document.querySelector(\"#title\");\r\n\r\n    function handleClick(){\r\n        title.style.color = \"blue\"\r\n    };\r\n    title.addEventListener(\"click\", handleClick);\r\n```\r\n<br>\r\n\r\n### DOM(5) - if else - function practice(2)\r\n\r\n* 중요 : 함수 func() vs func\r\n  * func() : 해당 함수를 바로 호출해라\r\n  * func : 해당 함수를 필요할 때 호출해라\r\n```\r\n  const title = document.querySelector(\"#title\");\r\n\r\n  const BASE_COLOR = \"white\";\r\n  const NEW_COLOR = \"red\";\r\n\r\n  function handleClick(){\r\n      console.log(title.style.color)\r\n      if (title.style.color === BASE_COLOR) {\r\n          title.style.color = NEW_COLOR;\r\n      } else {\r\n          title.style.color = BASE_COLOR;\r\n      }\r\n  }\r\n\r\n  function init() {\r\n      title.style.color = BASE_COLOR;\r\n      title.addEventListener(\"click\", handleClick);\r\n  }\r\n\r\n  init();\r\n```\r\n\r\n### 복습1\r\n* Object의 형태 - key값을 `:`로 담는다. `=`이 아니라.\r\n  ```\r\n  const objectExample = {\r\n    key1 : \"value\",\r\n    key2 : \"value2\"\r\n  }\r\n  ```\r\n\r\n### AND, OR\r\n* summary \r\n  * and : &&\r\n  * or : ||\r\n\r\n### 기타\r\n* console.log도 Object의 일종\r\n  * console 이라는 object\r\n  * log라는 key 값을 불러 오는 것\r\n* id값을 css에서 가져올때는 #id_name 형태 (#을 사용)\r\n  ```\r\n  #title {\r\n  }\r\n  ```\r\n* JS event 목록을 찾을때는 항상 `MDM`을 검색할 것","excerpt":"DOM DOM(1) - document (JS - HTML) summary 의미 : document는 js 파일에 연결된 할 수 있도록 해준다 형태 : document.blahblah 예시 : document.getElementById DOM(2) …","fields":{"slug":"/TIL_5_210104/"},"frontmatter":{"date":"Jan 04, 2021","title":"TIL_210104_(2)","tags":["TIL","js","nomadcoder","DOM","document","addEventListener","if","and(&&)","or(||)","MDM"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# 초보자를 위한 바닐라 JS\r\n\r\n### JS로 할 수 있는 것\r\n\r\n* 웹, 앱을 만들 수 있음\r\n* 게임도 제작 가능\r\n* 꽤 파워풀한 툴인 듯\r\n* 접근성이 높은 서비스를 만들 때 유용함\r\n\r\n### 바닐라 JS\r\n* 뜻 : 라이브러리가 없는 JS\r\n\r\n\r\n### ES5, ES6?\r\n* 뜻 : ECMAScript의 줄임말\r\n* why does it matter?\r\n    * JS의 코어 script\r\n    * JS의 버전을 의미하기도? \r\n    * 지금은 중요하지 않으니, JS와 유사하고, 그 버전을 의미하는 정도로만 이해하고 넘어가자\r\n\r\n\r\n### JS 구조\r\n* index.js 와 같이 별도 폴더로 구성\r\n* html 폴더 내에, script 문으로 .js 파일을 연결\r\n \r\n  * index.html\r\n  ```\r\n  <!DOCTYPE html>\r\n  <html>\r\n      <head>\r\n          <title>기발자</title>\r\n          <link rel=\"stylesheet\" href=\"index.css\">\r\n      </head>\r\n      <body>\r\n          <h1>this works!</h1>\r\n          <script src=\"index.js\"></script>\r\n      </body>\r\n  </html>\r\n  ```\r\n\r\n  * index.js\r\n  ```\r\n  console.log('Im working!');\r\n  alert('hello world')\r\n  ```\r\n\r\n### Variable, Constant\r\n* Variable : `var`, `let`\r\n* Constant : `const`\r\n* 실제 tip\r\n  * default로는 constant를 사용하는 것이 좋다.\r\n  * 왜? variable은 나중에 바뀔 위험이 있어서일까. 여튼 팁.\r\n\r\n1. create\r\n2. initialize\r\n3. using\r\n```\r\n    let a = 221\r\n    let b = a - 5\r\n    a - 4;\r\n    console.log(b, a)\r\n\r\n    const a = 221\r\n```\r\n\r\n\r\n### Data type on JS\r\n* `String` : \"text\"\r\n* `Boolean` : true, false\r\n* `Number` : 1,2,3 ... \r\n* `Float` : 55.1 (.을 가진 number)\r\n\r\n  ```\r\n  const string = \"dobedh\";\r\n  const boolean = true;\r\n  const number = 1\r\n  const float = 55.1\r\n  ```\r\n\r\n### 데이터를 담는 방식(1) - Array\r\n* 형태 : \r\n  * `[]` 안에 데이터를 담음\r\n  * Array 명은 `camel case` 사용 (예 : dobeNameIs)\r\n* 순서 : Array 내의 순서는 0,1,2....순으로 카운트\r\n* 단점 :\r\n  * Array는 단지 리스트만을 준다.\r\n  * 특정 속성의 값이 무엇지는 담을 수 없다. \r\n  * 그래서 뒤 이어 나올 `Object`가 나옴.\r\n* 기타 : 앞서 다룬 데이터 타입들을 넣을 수 있음 (변수 포함)\r\n```\r\n  const sth = \"something\"\r\n  const daysOfWeek = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", true, 90, sth]\r\n\r\n  console.log(daysOfWeek[2])\r\n  console.log(daysOfWeek)\r\n```\r\n\r\n### 데이터를 담는 방식(2) - Object\r\n* 형태 \r\n  * `{}` 안에 담음\r\n  * 변수와 그에 해당하는 값을 할당할 수 있음\r\n  * `.`을 사용하여 object 내의 변수 값 호출 가능\r\n* Array와의 중첩\r\n  * Array 안에 object를 넣을 수 있다\r\n  * Object 안에 Array를 넣을 수도 있다. \r\n  * Object 안에 Array를 넣고, 그 Array안에 다시 Object 넣는 것도 가능\r\n\r\n```\r\n  const dobeInfo = {\r\n      name : \"Donghyun\",\r\n      age : 29,\r\n      gender : \"Male\",\r\n      city : \"Seoul\",\r\n      favMovie : [\"Harry Potter\", \"Lord of the ring\"],\r\n      favFood : [\r\n          {\r\n              name: \"pizza\", \r\n              fatty : true\r\n          }, \r\n          {\r\n              name:\"salad\", \r\n              fatty : false\r\n          }\r\n      ]\r\n  }\r\n\r\n  dobeInfo.age = 32\r\n\r\n  console.log(dobeInfo)\r\n  console.log(dobeInfo.name)\r\n  console.log(dobeInfo.age)\r\n  console.log(dobeInfo)\r\n  console.log(dobeInfo.favMovie[0])\r\n  console.log(dobeInfo.favFood[1].name)\r\n```","excerpt":"초보자를 위한 바닐라 JS JS로 할 수 있는 것 웹, 앱을 만들 수 있음 게임도 제작 가능 꽤 파워풀한 툴인 듯 접근성이 높은 서비스를 만들 때 유용함 바닐라 JS 뜻 : 라이브러리가 없는 JS ES5, ES6? 뜻 : ECMAScript의 줄임말…","fields":{"slug":"/TIL_3_210103/"},"frontmatter":{"date":"Jan 03, 2021","title":"TIL_210103","tags":["TIL","dev","js","nomadcoder","ES","바닐라JS","datatype"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# logical operation\r\n\r\n### 1. opposite operation\r\n - summary : !를 수식 앞에 붙여서, 반대 로직을 만든다\r\n```\r\nlet passingGrade = 50\r\nlet studentGrade = 50\r\nlet chrisGrade = 49 \r\nlet samGrade = 99\r\n\r\n    let samPassed = samGrade >= passingGrade\r\n    let chrisPassed = chrisGrade >= passingGrade\r\n\r\n    !samPassed\r\n    !chrisPassed\r\n```\r\n\r\n### 2. AND, OR operation\r\n- summary : 조건문에서 또는, 그리고\r\n- 형태 : AND : &&, OR : ||\r\n```\r\n    let bothPassed = samPassed && chrisPassed\r\n\r\n    let eitherPassed = samPassed || chrisPassed\r\n    let anyonePassed = samPassed || chrisPassed || studentPassed\r\n    let everyonePassed = samPassed && chrisPassed && studentPassed\r\n    \r\n    let meritAwardGrade = 90\r\n    let samHasPerfectAttendace = true\r\n    let chrisHasPefectAttendace = true\r\n    \r\n    let samIsMeritStudent = samHasPerfectAttendace && samGrade >= meritAwardGrade\r\n    let chrisIsMeritStudent = chrisHasPefectAttendace && chrisGrade >= meritAwardGrade\r\n```\r\n\r\n\r\n### 3. Ternary conditional operator\r\n - summary : if문을 간단하게 표현하는 operation\r\n - 형태 : exepression ? true-value : false-value\r\n```\r\n    var betterStudent : String\r\n    \r\n    if samGrade > chrisGrade {\r\n        betterStudent = \"Sam\"\r\n    } else {\r\n        betterStudent = \"Chris\"\r\n    }\r\n    \r\n    betterStudent = samGrade > chrisGrade ? \"Sam\" : \"Chris\"\r\n```\r\n\r\n### 4. 오늘의 질문\r\n - 마크다운 안의 박스(``)에서, 한 줄을 띄우면 박스에서 벗어나는데 어떻게 처리?\r\n - 해결책 : 띄우고자 하는 문장의 제일 앞에, 스페이스 4개를 add.\r\n","excerpt":"logical operation 1. opposite operation summary : !를 수식 앞에 붙여서, 반대 로직을 만든다 2. AND, OR operation summary : 조건문에서 또는, 그리고 형태 : AND : &&, OR :…","fields":{"slug":"/TIL_2_210102/"},"frontmatter":{"date":"Jan 02, 2021","title":"TIL_210102","tags":["TIL","dev","ios","swift","operator","?","ternary operator","ifelse"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n### 1. iOS 배운 것\r\n\r\n```\r\n배운 것을 씁니다.\r\n```\r\n\r\n### 2. Gatsby 배운 것\r\n\r\n1) git 사용법\r\n\r\n2) gatsby를 위한 install\r\n\r\n3) 기타\r\n - origin developer의 developer documents를 보는 것이 가장 정확하다.\r\n - 다른 사람들이 2차 가공한 문서를 보면, 빠르게 학습되지 않는다. ","excerpt":"1. iOS 배운 것 2. Gatsby 배운 것 git 사용법 gatsby를 위한 install 기타 origin developer의 developer documents를 보는 것이 가장 정확하다. 다른 사람들이 2차 가공한 문서를 보면, 빠르게 학…","fields":{"slug":"/TIL_1_210101/"},"frontmatter":{"date":"Jan 01, 2021","title":"TIL_210101","tags":["TIL","dev","ios"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}