<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[dobedh | Feed]]></title><description><![CDATA[Blog Description]]></description><link>https://dobedh.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 12 May 2021 11:41:17 GMT</lastBuildDate><item><title><![CDATA[TIL-210512]]></title><description><![CDATA[React-native react와 안드로이드, ios를 연결해주는 브릿지 View, Text 처럼 양쪽을 연결해주는 브릿지 컴포넌트들이 있음 모든 것이 그런데 기존 html, css, js처럼 작동하지는 않고, react native만의 규칙을 갖…]]></description><link>https://dobedh.github.io/TIL_210512/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210512/</guid><pubDate>Wed, 12 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;react-native&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react-native&quot; aria-label=&quot;react native permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React-native&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;react와 안드로이드, ios를 연결해주는 브릿지&lt;/li&gt;
&lt;li&gt;View, Text 처럼 양쪽을 연결해주는 브릿지 컴포넌트들이 있음&lt;/li&gt;
&lt;li&gt;모든 것이 그런데 기존 html, css, js처럼 작동하지는 않고, react native만의 규칙을 갖고 있기도 함&lt;/li&gt;
&lt;li&gt;무거운 것들(3d 게임 등) 아니면 react native로 만들기는 좋음&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL-210509]]></title><description><![CDATA[Create React app npx create-react-app 생성하고자하는 project/dir 이름 cd pjt 이름 npm start]]></description><link>https://dobedh.github.io/TIL_210509/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210509/</guid><pubDate>Sun, 09 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;create-react-app&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#create-react-app&quot; aria-label=&quot;create react app permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Create React app&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;npx create-react-app 생성하고자하는 project/dir 이름&lt;/li&gt;
&lt;li&gt;cd pjt 이름&lt;/li&gt;
&lt;li&gt;npm start&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL-210508]]></title><description><![CDATA[Link - pathname, state Link를 사용하면, pathname으로 연동될 url을 넣고 state 안에 내가 전달하고 싶은 데이터를 넘길 수 있다(string,array,object 등) Component 안의 props 모든 컴포넌…]]></description><link>https://dobedh.github.io/TIL_210508/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210508/</guid><pubDate>Sat, 08 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;link---pathname-state&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#link---pathname-state&quot; aria-label=&quot;link   pathname state permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Link - pathname, state&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Link를 사용하면, pathname으로 연동될 url을 넣고&lt;/li&gt;
&lt;li&gt;state 안에 내가 전달하고 싶은 데이터를 넘길 수 있다(string,array,object 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;Link
      to={{
        pathname: &amp;quot;/movie&amp;quot;,
        state: {
          title,
          year,
          summary,
          poster,
          genres,
        },
      }}
    &amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;component-안의-props&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#component-%EC%95%88%EC%9D%98-props&quot; aria-label=&quot;component 안의 props permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Component 안의 props&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;모든 컴포넌트는 기본적으로 props를 전달 받아 가지고 있다(console안에서 확인 가능)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;state안에-값이-있는지-없는지-체크하고-페이지-이동&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#state%EC%95%88%EC%97%90-%EA%B0%92%EC%9D%B4-%EC%9E%88%EB%8A%94%EC%A7%80-%EC%97%86%EB%8A%94%EC%A7%80-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B3%A0-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99&quot; aria-label=&quot;state안에 값이 있는지 없는지 체크하고 페이지 이동 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;state안에 값이 있는지 없는지 체크하고 페이지 이동&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;만약, 유저가 url직접 치고 들어와서 데이터가 없는 페이지로 간다면 다시 홈이나 다른 페이지로 redirect 해줄 필요&lt;/li&gt;
&lt;li&gt;이때 prpos 안에 있는 history 를 사용 가능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;props.history.push(&amp;quot;url&amp;quot;)&lt;/code&gt; 이렇게하면, 해당 url로 redirect됨&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Detail extends React.Component {
  componentDidMount() {
    const { location, history } = this.props;
    if (location.state === undefined) {
      history.push(&amp;quot;/&amp;quot;);
    }
  }
  render() {
    const { location } = this.props;
    if (location.state) {
      return &amp;lt;span&amp;gt;{location.state.title}&amp;lt;/span&amp;gt;;
    } else {
      return null;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;기타&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%ED%83%80&quot; aria-label=&quot;기타 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기타&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;현재 로컬에 문제가 생겼을 때, git remote에 있는 걸 clone 할 수 있음&lt;/li&gt;
&lt;li&gt;현재 로컬 버젼을, 깃헙에 있는 걸로 변경 : &lt;code class=&quot;language-text&quot;&gt;git reset --hard commit한 버전 코드&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;git pull로 병합 등등...&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL-210507]]></title><description><![CDATA[Hash Router react지원 기능으로, Routing API인듯 특정 path를 호출하면, 특정 component 페이지가 보이도록 해준다 근데 최근에는 Brower Router라는걸 더 많이 쓰는 듯. 확인 필요 Navigation navi…]]></description><link>https://dobedh.github.io/TIL_210507/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210507/</guid><pubDate>Fri, 07 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;hash-router&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#hash-router&quot; aria-label=&quot;hash router permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hash Router&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;react지원 기능으로, Routing API인듯&lt;/li&gt;
&lt;li&gt;특정 path를 호출하면, 특정 component 페이지가 보이도록 해준다&lt;/li&gt;
&lt;li&gt;근데 최근에는 Brower Router라는걸 더 많이 쓰는 듯. 확인 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { HashRouter, Route } from &amp;quot;react-router-dom&amp;quot;;
import Home from &amp;quot;./routes/Home&amp;quot;;
import About from &amp;quot;./routes/About&amp;quot;;

function App() {
  return (
    &amp;lt;HashRouter&amp;gt;
      &amp;lt;Route path=&amp;quot;/&amp;quot; exact={true} component={Home}&amp;gt;&amp;lt;/Route&amp;gt;
      &amp;lt;Route path=&amp;quot;/about&amp;quot; component={About}&amp;gt;&amp;lt;/Route&amp;gt;
    &amp;lt;/HashRouter&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;navigation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#navigation&quot; aria-label=&quot;navigation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Navigation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;navigation router를 생성해서, 상단 네비게이션으로 할수 있음&lt;/li&gt;
&lt;li&gt;특히, html의 &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;태그를 쓰지 않고 &lt;code class=&quot;language-text&quot;&gt;Link&lt;/code&gt;태그를 사용하면, 전체 화면을 refresh하는게 아니라 react로 매우 빠르게 화면을 이동 가능&lt;/li&gt;
&lt;li&gt;Navigation.js&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function Navigation() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Link to=&amp;quot;/&amp;quot;&amp;gt;Home&amp;lt;/Link&amp;gt;
      &amp;lt;Link to=&amp;quot;/about&amp;quot;&amp;gt;About&amp;lt;/Link&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;App.js&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function App() {
  return (
    &amp;lt;HashRouter&amp;gt;
      &amp;lt;Navigation /&amp;gt;
      &amp;lt;Route path=&amp;quot;/&amp;quot; exact={true} component={Home}&amp;gt;&amp;lt;/Route&amp;gt;
      &amp;lt;Route path=&amp;quot;/about&amp;quot; component={About}&amp;gt;&amp;lt;/Route&amp;gt;
    &amp;lt;/HashRouter&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL-210506]]></title><description><![CDATA[Gihub Page Deploy npm i gh-pages package.json > hompage : "url" (url = username.github.io/projectname) package.json > script > build > buil…]]></description><link>https://dobedh.github.io/TIL_210505/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210505/</guid><pubDate>Thu, 06 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;gihub-page-deploy&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gihub-page-deploy&quot; aria-label=&quot;gihub page deploy permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gihub Page Deploy&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;npm i gh-pages&lt;/li&gt;
&lt;li&gt;package.json &gt; hompage : &quot;url&quot; (url = username.github.io/projectname)&lt;/li&gt;
&lt;li&gt;package.json &gt; script &gt; build &gt; build dir 생성됨&lt;/li&gt;
&lt;li&gt;package.json &gt; script : deploy : gh-page -d build&lt;/li&gt;
&lt;li&gt;동일 경로 &gt; predeploy &gt; npm run build
끝~&lt;/li&gt;
&lt;li&gt;deploy 를 run 시키면 자동으로 predeploy를 실행함&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;async-await&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#async-await&quot; aria-label=&quot;async await permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;async await&lt;/h3&gt;
&lt;p&gt;s&lt;/p&gt;</content:encoded></item><item><title><![CDATA[TIL-210505]]></title><description><![CDATA[map() map을 사용할 때는, 항상 각 item에 key값을 부여해줘야한다. props로 component의 각 item에 key값 부여 하면 될 듯 className React에서 자체적으로 쓰는 class가 있기 때문에, html 내의 cla…]]></description><link>https://dobedh.github.io/TIL_210504/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210504/</guid><pubDate>Wed, 05 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;map&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#map&quot; aria-label=&quot;map permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;map()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;map을 사용할 때는, 항상 각 item에 key값을 부여해줘야한다.&lt;/li&gt;
&lt;li&gt;props로 component의 각 item에 key값 부여 하면 될 듯&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;classname&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#classname&quot; aria-label=&quot;classname permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;className&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;React에서 자체적으로 쓰는 class가 있기 때문에, html 내의 classs는 &lt;code class=&quot;language-text&quot;&gt;className&lt;/code&gt;으로 바꿔서 사용&lt;/li&gt;
&lt;li&gt;이런 비슷한게 몇개 있다 찾아볼 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;array를-가져오는-prop의-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#array%EB%A5%BC-%EA%B0%80%EC%A0%B8%EC%98%A4%EB%8A%94-prop%EC%9D%98-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;array를 가져오는 prop의 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array를 가져오는 Prop의 경우&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;proptypes를 아래와 같이 설정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;PropTypes.arrayOf(PropTypes.string).isRequired&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;css&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#css&quot; aria-label=&quot;css permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이건 직접 만들어봐야함&lt;/li&gt;
&lt;li&gt;하나하나 화면 보면서 하고&lt;/li&gt;
&lt;li&gt;왠만하면 다 class를 붙여주는 것이 좋다.&lt;/li&gt;
&lt;li&gt;flex, flexbox, 등등 기본 개념 다시 숙지 할 것&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL-210504]]></title><description><![CDATA[axios 데이터를 가져올 때 쓰는 js 언어. axios.get(데이터 소스?) async await s]]></description><link>https://dobedh.github.io/TIL_210506/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210506/</guid><pubDate>Tue, 04 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;axios&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#axios&quot; aria-label=&quot;axios permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;axios&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 가져올 때 쓰는 js 언어.&lt;/li&gt;
&lt;li&gt;axios.get(데이터 소스?)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;async-await&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#async-await&quot; aria-label=&quot;async await permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;async await&lt;/h3&gt;
&lt;p&gt;s&lt;/p&gt;</content:encoded></item><item><title><![CDATA[TIL-210503]]></title><description><![CDATA[react class component를 function 으로 하지 않고, class로 설정한다 class 설정시 를 사용해서 React.component로 부터 특성들을 가져온다. Render React는 자동으로, class component의 …]]></description><link>https://dobedh.github.io/TIL_210503/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210503/</guid><pubDate>Mon, 03 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;react-class&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react-class&quot; aria-label=&quot;react class permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;react class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;component를 function 으로 하지 않고, class로 설정한다&lt;/li&gt;
&lt;li&gt;class 설정시 &lt;code class=&quot;language-text&quot;&gt;extends&lt;/code&gt;를 사용해서 React.component로 부터 특성들을 가져온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;render&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#render&quot; aria-label=&quot;render permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Render&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;React는 자동으로, class component의 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; method를 화면에 뿌려준다.&lt;/li&gt;
&lt;li&gt;Render는 return을 갖는다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;state&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#state&quot; aria-label=&quot;state permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;state&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;State는 data를 담는 object&lt;/li&gt;
&lt;li&gt;State에 있는 data를 바꿔줄 수 있다&lt;/li&gt;
&lt;li&gt;그래서, data를 가변적으로 바꾸기 위해서 stat를 담을 수 있는 class component를 쓰는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;state-안-data의-변경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#state-%EC%95%88-data%EC%9D%98-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;state 안 data의 변경 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;state 안 data의 변경&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;state 안의 data를 변경하면, 관련된 function 들을 다시 실행하도록 해야함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;setstate-render&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#setstate-render&quot; aria-label=&quot;setstate render permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;setState(), render&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;setState로 바로, state 값을 변경하고, render를 재실행시킴&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;기타&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%ED%83%80&quot; aria-label=&quot;기타 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기타&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;function 끝에 ()를 붙이면 바로 실행하라는 것&lt;/li&gt;
&lt;li&gt;Onclick 이라는 props를 button은 갖는다 (react의 장점)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;component-lifecycle--react-내의-다양한-func&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#component-lifecycle--react-%EB%82%B4%EC%9D%98-%EB%8B%A4%EC%96%91%ED%95%9C-func&quot; aria-label=&quot;component lifecycle  react 내의 다양한 func permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Component Lifecycle : React 내의 다양한 func&lt;/h1&gt;
&lt;h2 id=&quot;mount--born&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mount--born&quot; aria-label=&quot;mount  born permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mount : Born&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;제일 처음 react를 호출할때 mount가 됨&lt;/li&gt;
&lt;li&gt;아래 순서로 func이 실행됨&lt;/li&gt;
&lt;li&gt;constructr()&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;li&gt;componentDidMount()&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;update--update&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#update--update&quot; aria-label=&quot;update  update permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Update : Update&lt;/h2&gt;
&lt;h2 id=&quot;unmount--death-kill&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#unmount--death-kill&quot; aria-label=&quot;unmount  death kill permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unmount : Death, kill&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[TIL_210502]]></title><description><![CDATA[Component react는 Component를 가져와서 브라우져가 이해할 수 있는 html로 변환해준 이떄, react가 html로 반환하는 모든 것들을 componenet라고 부름 JSX Javascript + HTML = JSX Compone…]]></description><link>https://dobedh.github.io/TIL_210502/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210502/</guid><pubDate>Sun, 02 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;component&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#component&quot; aria-label=&quot;component permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Component&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;react는 Component를 가져와서 브라우져가 이해할 수 있는 html로 변환해준&lt;/li&gt;
&lt;li&gt;이떄, react가 html로 반환하는 모든 것들을 componenet라고 부름&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jsx&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jsx&quot; aria-label=&quot;jsx permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JSX&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Javascript + HTML = JSX&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;component-만드는-법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#component-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B2%95&quot; aria-label=&quot;component 만드는 법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Component 만드는 법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Upper Case로 시작하는 function을 만든다&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function Potation() {
    return
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;react-app은-하나의-componennt만-렌더할-수-있다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react-app%EC%9D%80-%ED%95%98%EB%82%98%EC%9D%98-componennt%EB%A7%8C-%EB%A0%8C%EB%8D%94%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4&quot; aria-label=&quot;react app은 하나의 componennt만 렌더할 수 있다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React app은 하나의 Componennt만 렌더할 수 있다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;따라서 다양한 component를 기본 component 안에 집어 넣어서(중첩으로) 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;property-props&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#property-props&quot; aria-label=&quot;property props permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Property (props)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JSX에서는, 각 component에 props 값을 부여해서, 각 componenet에 전달할 수 가 있다.&lt;/li&gt;
&lt;li&gt;예를 들어, fav=kimchi라는 것을 componenet값으로 전달 할 수 있는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;map&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#map&quot; aria-label=&quot;map permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Map&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JS 언어로, array에 있는 각 요소들에 func을 걸수 있도록 함&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function App() {
  return foodILike.map((dish) =&amp;gt; {
    return &amp;lt;Food name={dish.name} picture={dish.image} /&amp;gt;;
  });
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;prop-types&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prop-types&quot; aria-label=&quot;prop types permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prop-Types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Component에서 전달하는 Prop이 적절한 type인지, required 인데 전달이 안됐는지 등을 체크해준다.&lt;/li&gt;
&lt;li&gt;npm i prop-types&lt;/li&gt;
&lt;li&gt;import PropTypes from &quot;prop-types&quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Food.propTypes = {
  name: PropTypes.string.isRequired,
  picture: PropTypes.string.isRequired,
  rating: PropTypes.number,
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL-210429]]></title><description><![CDATA[Firebase]]></description><link>https://dobedh.github.io/TIL_210317/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210317/</guid><pubDate>Thu, 29 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;firebase&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#firebase&quot; aria-label=&quot;firebase permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Firebase&lt;/h2&gt;</content:encoded></item></channel></rss>