<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[dobedh | Feed]]></title><description><![CDATA[Blog Description]]></description><link>https://dobedh.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 22 May 2021 09:45:34 GMT</lastBuildDate><item><title><![CDATA[TIL-210522]]></title><description><![CDATA[Hooks useConfirm Hooks은 아님 confirm() 브라우저에 내장된 function 인듯 클릭하면, cofirm 을 확인하는 alert 창을 띄어줌 onconfirm() alert창에 confirm을 하면 onconfirm 값은 tr…]]></description><link>https://dobedh.github.io/TIL_210522/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210522/</guid><pubDate>Sat, 22 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;hooks&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#hooks&quot; aria-label=&quot;hooks permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h1&gt;
&lt;h3 id=&quot;useconfirm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#useconfirm&quot; aria-label=&quot;useconfirm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;useConfirm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hooks은 아님&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;confirm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#confirm&quot; aria-label=&quot;confirm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;confirm()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브라우저에 내장된 function 인듯&lt;/li&gt;
&lt;li&gt;클릭하면, cofirm 을 확인하는 alert 창을 띄어줌&lt;/li&gt;
&lt;li&gt;onconfirm() alert창에 confirm을 하면 onconfirm 값은 true가 되고&lt;/li&gt;
&lt;li&gt;onconfirm() alert 창에 취소를 하면 onconfirm 값은 false가 된다&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const useConfirm = (message, onConfirm, onRejection) =&amp;gt; {
  if (!onConfirm || typeof onConfirm !== &amp;quot;function&amp;quot;) {
    return;
  }
  const confirmAction = () =&amp;gt; {
    if (confirm(message)) {
      onConfirm();
    } else {
      onRejection();
    }
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;preventleave&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#preventleave&quot; aria-label=&quot;preventleave permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PreventLeave&lt;/h2&gt;
&lt;h3 id=&quot;addeventlistener&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#addeventlistener&quot; aria-label=&quot;addeventlistener permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;addEventListener&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;반응할 event의 종류, event 발생시 실행할 함수를 넣어줘야함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;window.addEventListener(&amp;quot;beforeunload&amp;quot;, listener)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;beforeunload =&gt; 나갈떄 발생하는 event&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;eventpreventdefault&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#eventpreventdefault&quot; aria-label=&quot;eventpreventdefault permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;event.preventDefault()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 이벤트가 발생할떄, 바로 event 실행안하고 prevent 시키는 alert창을 띄운다?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const preventLeave = () =&amp;gt; {
  const listener = (event) =&amp;gt; {
    event.preventDefault();
    event.returnValue = &amp;quot;&amp;quot;;
  };
  const protectEvent = () =&amp;gt; window.addEventListener(&amp;quot;beforeunload&amp;quot;, listener);
  const unprotectEvent = () =&amp;gt;
    window.removeEventListener(&amp;quot;beforeunload&amp;quot;, listener);
  return { protectEvent, unprotectEvent };
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;use-fadein&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#use-fadein&quot; aria-label=&quot;use fadein permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;use Fadein&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;opacity, duration, dealy 등의 개념 사용&lt;/li&gt;
&lt;li&gt;useEffect는 계속 사용되네&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const useFadeIn = (duration = 1, delay = 1) =&amp;gt; {
  const element = useRef();
  useEffect(() =&amp;gt; {
    if (!element.current) {
      return;
    }
    const { current } = element;
    current.style.transition = `opacity ${duration}s ${delay}s`;
    current.style.opacity = 1;
  }, []);
  return { ref: element, style: { opacity: 0 } };
};

const App = () =&amp;gt; {
  const fadeIn = useFadeIn(3, 1);
  const fadeIn2 = useFadeIn(7, 6);
  return (
    &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
      &amp;lt;h2 {...fadeIn}&amp;gt; Hello Counselors :) &amp;lt;/h2&amp;gt;
      &amp;lt;p {...fadeIn2}&amp;gt; This is our playgorund! &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL-210521]]></title><description><![CDATA[Hooks useRef 특정 html에 ref를 추가해서, html 태그를 조작하거나 eventListener를 추가할 수 있도록 한 것 document.getElementById와 유사한 역할 current useRef로 특정 tag를 잡았을 때,…]]></description><link>https://dobedh.github.io/TIL_210521/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210521/</guid><pubDate>Fri, 21 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;hooks&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#hooks&quot; aria-label=&quot;hooks permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h1&gt;
&lt;h3 id=&quot;useref&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#useref&quot; aria-label=&quot;useref permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;useRef&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 html에 ref를 추가해서, html 태그를 조작하거나 eventListener를 추가할 수 있도록 한 것&lt;/li&gt;
&lt;li&gt;document.getElementById와 유사한 역할&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const App = () =&amp;gt; {
  const potato = useRef();
  setTimeout(() =&amp;gt; potato.current?.focus(), 5000);
  return (
    &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
      &amp;lt;input ref={potato} placeholder=&amp;quot;hello&amp;quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
  );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;current&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#current&quot; aria-label=&quot;current permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;current&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;useRef로 특정 tag를 잡았을 때, current를 꼭 써줘야한다&lt;/li&gt;
&lt;li&gt;예 : potato.current.addEventListenr 등등&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  const useClick = (onClick) =&amp;gt; {
    const element = useRef();
    useEffect(() =&amp;gt; {
      return element.current.addEventListener(&amp;quot;click&amp;quot;, onClick);
    }, []);
    return element;
  };

  const App = () =&amp;gt; {
    const sayHello = () =&amp;gt; console.log(&amp;quot;Say Hello&amp;quot;);
    const potato = useClick(sayHello);
    return (
      &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
        &amp;lt;h2 ref={potato}&amp;gt; hello &amp;lt;/h2&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL-210520]]></title><description><![CDATA[Hooks useEffect useEffect 는 아래 것들의 역할을 하는 hoook      useEffect의 구조 첫번째 파라미터는 실행할 function 두번째 파라미터는 실행 dependecy => 일종의 실행 조건? 두번째 파라미터에 변화…]]></description><link>https://dobedh.github.io/TIL_210520/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210520/</guid><pubDate>Thu, 20 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;hooks&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#hooks&quot; aria-label=&quot;hooks permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h1&gt;
&lt;h3 id=&quot;useeffect&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#useeffect&quot; aria-label=&quot;useeffect permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;useEffect&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;useEffect 는 아래 것들의 역할을 하는 hoook&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;componentDidUnmount()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;componentDidUpdate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;componentWillUnmount()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;useeffect의-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#useeffect%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;useeffect의 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;useEffect의 구조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;첫번째 파라미터는 실행할 function&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;두번째 파라미터는 실행 dependecy =&gt; 일종의 실행 조건?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;두번째 파라미터에 변화가 있을때만 첫번째 파라미터의 function을 실행!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;useEffect(sayHello, [number]);&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;number 값이 변할때만 sayHello실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;예시&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  const sayHello = () =&amp;gt; console.log(&amp;quot;Hello&amp;quot;);
  const [number, setNumber] = useState(0);
  const [anumber, setAnumber] = useState(0);
  useEffect(sayHello, [number]);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;documentqueryselectortagname&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#documentqueryselectortagname&quot; aria-label=&quot;documentqueryselectortagname permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;document.querySelector(&quot;tagname&quot;)&lt;/h3&gt;
&lt;h3 id=&quot;settimeout--function-time&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#settimeout--function-time&quot; aria-label=&quot;settimeout  function time permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;setTimeout(() =&gt; (function, time))&lt;/h3&gt;
&lt;h3 id=&quot;useeffect-예제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#useeffect-%EC%98%88%EC%A0%9C&quot; aria-label=&quot;useeffect 예제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;useEffect 예제&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  const useTitle = (initialTitle) =&amp;gt; {
    const [title, setTitle] = useState(initialTitle);
    const titleUpdater = () =&amp;gt; {
      const titleText = document.querySelector(&amp;quot;title&amp;quot;);
      titleText.innerText = title;
    };
    useEffect(titleUpdater, [title]);
    return setTitle;
  };

  const App = () =&amp;gt; {
    const titleChange = useTitle(&amp;quot;is Loading...&amp;quot;);
    setTimeout(() =&amp;gt; titleChange(&amp;quot;Home&amp;quot;), 1000);
    return &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;;
  };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL-210519]]></title><description><![CDATA[Hooks useTabs useState를 활용한 예제 연습중..]]></description><link>https://dobedh.github.io/TIL_210519/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210519/</guid><pubDate>Wed, 19 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;hooks&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#hooks&quot; aria-label=&quot;hooks permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h1&gt;
&lt;h3 id=&quot;usetabs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#usetabs&quot; aria-label=&quot;usetabs permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;useTabs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;useState를 활용한 예제 연습중..&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    const useTabs = (initialTab, allTab) =&amp;gt; {
      const [tab, setTab] = useState(initialTab);
      const onClick = (allTab) =&amp;gt; {
        return console.log(allTab);
      };
      return onClick;
    };

    const content = [
      {
        item: &amp;quot;item1&amp;quot;,
        content: &amp;quot;this is the name of item 1&amp;quot;
      },
      {
        item: &amp;quot;item2&amp;quot;,
        content: &amp;quot;this is the name of item 2&amp;quot;
      }
    ];

    const App = () =&amp;gt; {
      const tabs = useTabs(0, getIndex);
      const getIndex = (index) =&amp;gt; {
        return index;
      };
      return (
        &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
          {content.map((section) =&amp;gt; {
            return &amp;lt;button onClick={getIndex}&amp;gt; {section.item}&amp;lt;/button&amp;gt;;
          })}
        &amp;lt;/div&amp;gt;
      );
    };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL-210518]]></title><description><![CDATA[Hooks useInput 하나의 function 을 다른 function, 다른 file 등에서도 쓸 수 있게 해주는 것인듯? 정확한 원리는 모르겠지만.....useInput function을 다른 함수내에 넣어버려서, 함수를 불러오는 느낌?]]></description><link>https://dobedh.github.io/TIL_210518/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210518/</guid><pubDate>Tue, 18 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;hooks&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#hooks&quot; aria-label=&quot;hooks permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h1&gt;
&lt;h3 id=&quot;useinput&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#useinput&quot; aria-label=&quot;useinput permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;useInput&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;하나의 function 을 다른 function, 다른 file 등에서도 쓸 수 있게 해주는 것인듯?&lt;/li&gt;
&lt;li&gt;정확한 원리는 모르겠지만.....useInput function을 다른 함수내에 넣어버려서, 함수를 불러오는 느낌?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const useInput = (initialValue, validator) =&amp;gt; {
  const [value, setValue] = useState(initialValue);
  const onChange = (event) =&amp;gt; {
    const {
      target: { value }
    } = event;
  };
  let willUpdate = true;
  if (typeof validator === &amp;quot;function&amp;quot;) {
    willUpdate = validator(value);
  }
  if (willUpdate) {
    setValue(value);
  }
  return { value, onChange };
};

const App = () =&amp;gt; {
  const maxLength = (value) =&amp;gt; value.length &amp;lt;= 10;
  const name = useInput(&amp;quot;Mr.&amp;quot;, maxLength);
  return (
    &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
      &amp;lt;h1&amp;gt;Hello CodeSandbox&amp;lt;/h1&amp;gt;
      &amp;lt;input placeholder=&amp;quot;Your name :)&amp;quot; {...name} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL-210517]]></title><description><![CDATA[Hooks 의미 기존의 react에서 state 등 코드가 더러웠던 것들을 깔끔하게 해줌 class가 아닌 functional code로 다 짤 수 있게 해줌 예시 : useState 기존에 state, this, setState 등등등 여러가지로 …]]></description><link>https://dobedh.github.io/TIL_210517/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210517/</guid><pubDate>Mon, 17 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;hooks&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#hooks&quot; aria-label=&quot;hooks permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hooks&lt;/h1&gt;
&lt;h3 id=&quot;의미&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%98%EB%AF%B8&quot; aria-label=&quot;의미 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;의미&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기존의 react에서 state 등 코드가 더러웠던 것들을 깔끔하게 해줌&lt;/li&gt;
&lt;li&gt;class가 아닌 functional code로 다 짤 수 있게 해줌&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예시 : useState&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기존에 state, this, setState 등등등 여러가지로 코드가 복잡했던 걸 아주 깔끔하게 더 짧은 줄의 코드로 만들어줌&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function App() {
const [item, setItem] = useState(1);
const incremental = () =&amp;gt; setItem(item + 1);
const decremental = () =&amp;gt; setItem(item - 1);
return (
&amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Hello CodeSandbox {item}&amp;lt;/h1&amp;gt;
  &amp;lt;button onClick={incremental}&amp;gt;incremental&amp;lt;/button&amp;gt;
  &amp;lt;button onClick={decremental}&amp;gt;decremental&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;linear-gradient&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#linear-gradient&quot; aria-label=&quot;linear gradient permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linear Gradient&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;React Native에서는 자체 CSS 문법이 있는듯?&lt;/li&gt;
&lt;li&gt;Linear Gradient는 배경 색 등이 gradient로 나오게 하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;style-in-react-native&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#style-in-react-native&quot; aria-label=&quot;style in react native permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Style in React Native&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;하나의 element에 두개의 style을 부여하는 법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;View style={{ ...styles.halfContainer, ...styles.textContainer }}&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;...&lt;/code&gt;을 이용해서, 두개를 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;status-bar&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#status-bar&quot; aria-label=&quot;status bar permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status Bar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;핸드폰 상단의 Status Bar의 색상 등 스타일을 조정해줄 수 있음 -&lt;/li&gt;
&lt;li&gt;쓰려면 우선 &quot;react-native&quot;에서 import&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL-210513]]></title><description><![CDATA[Component 앞선 react와 마찬가지로, component를 사용해서 app.js 에 import 한다. styles를 이용해서 직접 native 코드를 건드리지 않고도 폰 화면 속을 꾸밀 수 있음 Styles code paddingHoriz…]]></description><link>https://dobedh.github.io/TIL_210513/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210513/</guid><pubDate>Thu, 13 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;component&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#component&quot; aria-label=&quot;component permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Component&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;앞선 react와 마찬가지로, component를 사용해서 app.js 에 import 한다.&lt;/li&gt;
&lt;li&gt;styles를 이용해서 직접 native 코드를 건드리지 않고도 폰 화면 속을 꾸밀 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;styles-code&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#styles-code&quot; aria-label=&quot;styles code permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Styles code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;paddingHorizontal&lt;/li&gt;
&lt;li&gt;paddingVertical&lt;/li&gt;
&lt;li&gt;backgroundColor&lt;/li&gt;
&lt;li&gt;fontSize&lt;/li&gt;
&lt;li&gt;justifyContent : &quot;flex-end&quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;react-native-에서의-css&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react-native-%EC%97%90%EC%84%9C%EC%9D%98-css&quot; aria-label=&quot;react native 에서의 css permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React Native 에서의 CSS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;보통 camel 스타일로 작성한다&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;location&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#location&quot; aria-label=&quot;location permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Location&lt;/h1&gt;
&lt;h3 id=&quot;expo의-여러-api들&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#expo%EC%9D%98-%EC%97%AC%EB%9F%AC-api%EB%93%A4&quot; aria-label=&quot;expo의 여러 api들 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Expo의 여러 API들&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Expo는 기본 react native에 비해서 많은 APi및 기능 제공&lt;/li&gt;
&lt;li&gt;location 등&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL-210512]]></title><description><![CDATA[React-native react와 안드로이드, ios를 연결해주는 브릿지 View, Text 처럼 양쪽을 연결해주는 브릿지 컴포넌트들이 있음 모든 것이 그런데 기존 html, css, js처럼 작동하지는 않고, react native만의 규칙을 갖…]]></description><link>https://dobedh.github.io/TIL_210512/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210512/</guid><pubDate>Wed, 12 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;react-native&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react-native&quot; aria-label=&quot;react native permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React-native&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;react와 안드로이드, ios를 연결해주는 브릿지&lt;/li&gt;
&lt;li&gt;View, Text 처럼 양쪽을 연결해주는 브릿지 컴포넌트들이 있음&lt;/li&gt;
&lt;li&gt;모든 것이 그런데 기존 html, css, js처럼 작동하지는 않고, react native만의 규칙을 갖고 있기도 함&lt;/li&gt;
&lt;li&gt;무거운 것들(3d 게임 등) 아니면 react native로 만들기는 좋음&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;view&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#view&quot; aria-label=&quot;view permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;View&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;React native에서 View는 html에서 div 같은것&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;flex&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#flex&quot; aria-label=&quot;flex permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;flex&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;폰 화면에서 공간을 얼마나 차지할 것인지&lt;/li&gt;
&lt;li&gt;react native에서 layout을 짤 때, flexbox를 사용할 것을 니꼬가 권장&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;flex : 1&lt;/code&gt;은 주어진 공간을 다 사용한다는 것&lt;/li&gt;
&lt;li&gt;각 view들의 flex가 몇이고, 상대적으로 비율이 어떻게 되느냐에 따라 자리를 차지함&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;direction&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#direction&quot; aria-label=&quot;direction permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;direction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;react native에서 felxbox의 direction 은 기본적으로 column (웹은 row)&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL-210509]]></title><description><![CDATA[Create React app npx create-react-app 생성하고자하는 project/dir 이름 cd pjt 이름 npm start]]></description><link>https://dobedh.github.io/TIL_210509/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210509/</guid><pubDate>Sun, 09 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;create-react-app&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#create-react-app&quot; aria-label=&quot;create react app permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Create React app&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;npx create-react-app 생성하고자하는 project/dir 이름&lt;/li&gt;
&lt;li&gt;cd pjt 이름&lt;/li&gt;
&lt;li&gt;npm start&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL-210508]]></title><description><![CDATA[Link - pathname, state Link를 사용하면, pathname으로 연동될 url을 넣고 state 안에 내가 전달하고 싶은 데이터를 넘길 수 있다(string,array,object 등) Component 안의 props 모든 컴포넌…]]></description><link>https://dobedh.github.io/TIL_210508/</link><guid isPermaLink="false">https://dobedh.github.io/TIL_210508/</guid><pubDate>Sat, 08 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;link---pathname-state&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#link---pathname-state&quot; aria-label=&quot;link   pathname state permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Link - pathname, state&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Link를 사용하면, pathname으로 연동될 url을 넣고&lt;/li&gt;
&lt;li&gt;state 안에 내가 전달하고 싶은 데이터를 넘길 수 있다(string,array,object 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    &amp;lt;Link
      to={{
        pathname: &amp;quot;/movie&amp;quot;,
        state: {
          title,
          year,
          summary,
          poster,
          genres,
        },
      }}
    &amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;component-안의-props&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#component-%EC%95%88%EC%9D%98-props&quot; aria-label=&quot;component 안의 props permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Component 안의 props&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;모든 컴포넌트는 기본적으로 props를 전달 받아 가지고 있다(console안에서 확인 가능)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;state안에-값이-있는지-없는지-체크하고-페이지-이동&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#state%EC%95%88%EC%97%90-%EA%B0%92%EC%9D%B4-%EC%9E%88%EB%8A%94%EC%A7%80-%EC%97%86%EB%8A%94%EC%A7%80-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B3%A0-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99&quot; aria-label=&quot;state안에 값이 있는지 없는지 체크하고 페이지 이동 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;state안에 값이 있는지 없는지 체크하고 페이지 이동&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;만약, 유저가 url직접 치고 들어와서 데이터가 없는 페이지로 간다면 다시 홈이나 다른 페이지로 redirect 해줄 필요&lt;/li&gt;
&lt;li&gt;이때 prpos 안에 있는 history 를 사용 가능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;props.history.push(&amp;quot;url&amp;quot;)&lt;/code&gt; 이렇게하면, 해당 url로 redirect됨&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Detail extends React.Component {
  componentDidMount() {
    const { location, history } = this.props;
    if (location.state === undefined) {
      history.push(&amp;quot;/&amp;quot;);
    }
  }
  render() {
    const { location } = this.props;
    if (location.state) {
      return &amp;lt;span&amp;gt;{location.state.title}&amp;lt;/span&amp;gt;;
    } else {
      return null;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;기타&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%ED%83%80&quot; aria-label=&quot;기타 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기타&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;현재 로컬에 문제가 생겼을 때, git remote에 있는 걸 clone 할 수 있음&lt;/li&gt;
&lt;li&gt;현재 로컬 버젼을, 깃헙에 있는 걸로 변경 : &lt;code class=&quot;language-text&quot;&gt;git reset --hard commit한 버전 코드&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;git pull로 병합 등등...&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>